@page "/hrapplicantcontroltool"
@using XebecPortal.UI.Interfaces
@using XebecPortal.UI.Services.Models
@using JetBrains.Annotations
@inject IApplicantDataService _applicantDataService
<style>
   tbody {
       display: block;
       height: 60vh;
       overflow: auto;
   }
   thead, tbody tr {
       display: table;
       width: 100%;
       table-layout: fixed;
   }
  .col-1{
    width: 5%;
  }
  
  thead{
    border-radius: 20px 20px 0 0 ;
  }
  tbody{
    border-radius: 0 0 20px 20px;
  }
  th:hover{
    cursor: pointer;
  }
  .btn-primary{
    background: #00bcae;
  }
  .table-wrap{
    overflow: hidden;
    background: none;
    border-radius: 20px;
    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;
  }
</style>

@if (_applicants == null)
{
    <p>Loading</p>
}
else
{
    <div class="limiter">
        <div class="table-container p-4">
            <div class="input-group d-flex justify-content-center">
                <span class="input-group-text">
                    <i class="fa fa-search"></i>
                </span>
                <input class="form-control" style="max-width: 50%" type="text" placeholder="Search" value="@_keyword" @oninput="@OnKeywordChanged"/>
            </div>
            <div class="table-wrap mt-2">
                <table id="example" class="table table-striped bg-white">
                    <thead style="background: #00bcae;">
                    <tr style="color:#fff;" class="col-12">
                        <th class="col-1" @onclick="() => Sort(SortOptions.Id)"># @GetIcon(SortOptions.Id)</th>
                        <th class="col-2" @onclick="() => Sort(SortOptions.Name)">Full Name</th>
                        <th class="col-1" @onclick="() => Sort(SortOptions.CstMark)">CST Mark</th>
                        <th class="col-2" @onclick="() => Sort(SortOptions.CstComment)">CST Comment</th>
                        <th class="col-1" @onclick="() => Sort(SortOptions.InterviewRating)">Int. Rating</th>
                        <th class="col-2" @onclick="() => Sort(SortOptions.InterviewComment)">Interview Comment</th>
                        <th class="col-2" @onclick="() => Sort(SortOptions.Phase)">Phase</th>
                        <th class="col-1">Actions</th>
                        <th style="width: 1%;"></th>
                    </tr>
                    </thead>
                    <tbody>

                    @if (_applicants != null)
                    {
                        foreach (var applicant in _applicants)
                        {
                            <tr class="col-12">
                                <td class="col-1">@applicant.Id</td>
                                <td class="col-2">@applicant.FirstName @applicant.LastName</td>
                                <td class="col-1">@(applicant.CstMark)%</td>
                                <td class="col-2">@applicant.CstComment</td>
                                @if (_tempApplicant != applicant)
                                {
                                    <td class="col-1">@(applicant.InterviewRating)%</td>
                                    <td class="col-2">@applicant.InterviewComment</td>
                                    <td class="col-2">@applicant.Phase</td>
                                }
                                else
                                {
                                    <td class="col-1">
                                        <input type="text" class="form-control" @bind="_tempApplicant.InterviewRating">
                                    </td>
                                    <td class="col-2">
                                        <textarea class="form-control" rows="5" @bind="_tempApplicant.InterviewComment"></textarea>
                                    </td>
                                    <td class="col-2">
                                        <input type="text" class="form-control" @bind="_tempApplicant.Phase">
                                    </td>
                                }
                                <td class="col-1">
                                    @if (applicant != _tempApplicant)
                                    {
                                        <button type="button" class="btn btn-primary btn-xs dt-edit" style="margin-right:16px;" @onclick="() => Edit(applicant)">
                                            <i class="fas fa-pen"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-primary btn-xs dt-edit" style="margin-right:16px;" @onclick="() => Save(applicant)">
                                            <i class="fas fa-save"></i>
                                        </button>
                                        <button type="button" class="btn btn-primary btn-xs dt-edit" style="margin-right:16px;" @onclick="CancelEdit">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    }

                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code{
    List<Applicant> _applicants;
    Applicant _tempApplicant;
    private List<Applicant> _storeInitializedData;

    TableColumn[] columns = new TableColumn[]
    {
        new TableColumn()
        {
            Label = "First Name",
            DataField = "FirstName",
        },
        new TableColumn()
        {
            Label = "Last Name",
            DataField = "LastName",
        },
        new TableColumn()
        {
            Label = "Cst Mark",
            DataField = "CstMark",
        },
        new TableColumn()
        {
            Label = "Cst Comment",
            DataField = "CstComment",
        },
        new TableColumn()
        {
            Label = "Phase",
            DataField = "Phase",
        }
    };

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("getting Applicants");
        _applicants = (await _applicantDataService.GetAllApplicants()).ToList();
    //await _jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
        _storeInitializedData = _applicants;
    }

    private void Edit(Applicant user)
    {
        _tempApplicant = user;
    }

    private void CancelEdit()
    {
        _applicants = _storeInitializedData;
        _tempApplicant = null;
    }

    private async Task Save(Applicant applicant)
    {
        Console.WriteLine("Updating Applicant");
        _applicantDataService.UpdateApplicant(applicant);
        Console.WriteLine("Done Updating Applicant");
        Console.WriteLine("Get Updated Applicants List");
    //_applicants = (await _applicantDataService.GetAllApplicants()).ToList();
        Console.WriteLine("Done Getting Updated Applicants List");

        _storeInitializedData = _applicants;
        _tempApplicant = null;
    }


    private void ChangePhase(Applicant applicant, ChangeEventArgs e)
    {
        if (e.Value != null) _tempApplicant.Phase = e.Value.ToString();
    }

    private string _keyword = string.Empty;

    [Parameter]
    [CanBeNull]
    public string Keyword { get; set; }

    [Parameter]
    [CanBeNull]
    public EventCallback<string> KeywordChanged { get; set; }

    private Task OnKeywordChanged(ChangeEventArgs e)
    {
        _keyword = e?.Value?.ToString();

        if (string.IsNullOrWhiteSpace(_keyword))
        {
            _applicants = _storeInitializedData;
            return Task.CompletedTask;
        }

        _applicants = _storeInitializedData.FindAll(a =>
            a.Id.ToString().ToLower().Contains(_keyword.ToLower()) ||
            a.FirstName.ToLower().Contains(_keyword.ToLower()) ||
            a.LastName.ToLower().Contains(_keyword.ToLower()) ||
            a.Phase.ToLower().Contains(_keyword.ToLower()) ||
            a.CstComment.ToLower().Contains(_keyword.ToLower()) ||
            a.CstMark.ToString().ToLower().Contains(_keyword.ToLower()) ||
            a.InterviewComment.ToLower().Contains(_keyword.ToLower()) ||
            a.InterviewRating.ToString().ToLower().Contains(_keyword.ToLower()));


        return KeywordChanged.InvokeAsync(_keyword);
    }

    public enum SortOptions
    {
        Id,
        Name,
        Phase,
        CstMark,
        CstComment,
        InterviewRating,
        InterviewComment
    }

    bool _ascending = true;
    SortOptions _currentSortOption;

    private MarkupString GetIcon(SortOptions option)
    {
        if (_currentSortOption == option)
        {
            if (_ascending)
            {
                return (MarkupString) "<i class='fas fa-sort'></i>";
            }
            else
            {
                return (MarkupString) "<i class='fas fa-sort-down'></i>";
            }
        }
        return (MarkupString) "<i class='fas fa-sort'></i>";
    }

    private void Sort(SortOptions option)
    {
        _currentSortOption = option;
        switch (option)
        {
            case SortOptions.Id:
                if (_ascending)
                {
                    _applicants = _applicants.OrderByDescending(a => a.Id).ToList();
                    _ascending = false;
                }
                else
                {
                    _applicants = _applicants.OrderBy(a => a.Id).ToList();
                    _ascending = true;
                }
                break;
            case SortOptions.Name:
                if (_ascending)
                {
                    _applicants = _applicants.OrderByDescending(a => a.FirstName).ToList();
                    _ascending = false;
                }
                else
                {
                    _applicants = _applicants.OrderBy(a => a.FirstName).ToList();
                    _ascending = true;
                }
                break;

            case SortOptions.Phase:
                if (_ascending)
                {
                    _applicants = _applicants.OrderByDescending(a => a.Phase).ToList();
                    _ascending = false;
                }
                else
                {
                    _applicants = _applicants.OrderBy(a => a.Phase).ToList();
                    _ascending = true;
                }
                break;
            case SortOptions.CstMark:
                if (_ascending)
                {
                    _applicants = _applicants.OrderByDescending(a => a.CstMark).ToList();
                    _ascending = false;
                }
                else
                {
                    _applicants = _applicants.OrderBy(a => a.CstMark).ToList();
                    _ascending = true;
                }
                break;
            case SortOptions.CstComment:
                if (_ascending)
                {
                    _applicants = _applicants.OrderByDescending(a => a.CstComment).ToList();
                    _ascending = false;
                }
                else
                {
                    _applicants = _applicants.OrderBy(a => a.CstComment).ToList();
                    _ascending = true;
                }
                break;
            case SortOptions.InterviewRating:
                if (_ascending)
                {
                    _applicants = _applicants.OrderByDescending(a => a.InterviewRating).ToList();
                    _ascending = false;
                }
                else
                {
                    _applicants = _applicants.OrderBy(a => a.InterviewRating).ToList();
                    _ascending = true;
                }
                break;
            case SortOptions.InterviewComment:
                if (_ascending)
                {
                    _applicants = _applicants.OrderByDescending(a => a.InterviewComment).ToList();
                    _ascending = false;
                }
                else
                {
                    _applicants = _applicants.OrderBy(a => a.InterviewComment).ToList();
                    _ascending = true;
                }
                break;
            default:
                _applicants = _applicants = _applicants.OrderBy(a => a.Id).ToList();
                break;
        }
    }

}