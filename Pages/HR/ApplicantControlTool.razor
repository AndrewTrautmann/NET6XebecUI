@page "/hrapplicantcontroltool"
@using XebecPortal.UI.Interfaces
@using XebecPortal.UI.Services.Models
@inject IApplicantDataService _applicantDataService
@inject IJobDataService _jobDataService
@inject IJSRuntime _jsRuntime

<style>
    * {
        font-family: 'Open Sans','Arial Narrow',Arial,sans-serif !important;
    }

    .table-container {
        width: 100%;
        height: 80vh;
        background: #d5d5d5;
        flex-wrap: wrap;
        overflow-y: auto;
    }

    .table-wrap {
        width: 100%;
        height: 100%;
        box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;
        border-radius: 10px;
        overflow: hidden;
        background: white;
        padding: 30px;
    }

    table {
        border-spacing: 1px;
        border-collapse: collapse;
        background: #fff;
        border-radius: 10px 10px 0 0;
        overflow: hidden;
        width: 100%;
        margin: auto auto;
    }

        table td,
        table th {
            padding: 8px 10px;
            font-size: 1.5vh;
            line-height: 2vh;
        }

        table thead tr {
            height: 60px;
            background: #003340;
            padding-right: 5px;
            font-size: 1.5vh;
        }

        table tbody tr {
            height: 50px
        }

        table td,
        table th {
            text-align: left;
        }

            table td.l,
            table th.l {
                text-align: right
            }

            table td.c,
            table th.c {
                text-align: center
            }

            table td.r,
            table th.r {
                text-align: center
            }

    .table-head th {
        font-family: OpenSans-Regular, serif;
        font-size: 18px;
        color: #fff;
        line-height: 1.2;
        font-weight: unset
    }

    tbody tr:nth-child(even) {
        background-color: #f5f5f5;
        border-bottom: #555555 1px solid;
    }

    table tbody tr:nth-child(even) {
        border: 0;
    }

    tbody tr {
        font-size: 15px;
        color: gray;
        line-height: 1.2;
        font-weight: unset
    }

        tbody tr:hover {
            color: #555;
            background-color: #f5f5f5;
            cursor: pointer
        }

    .col-1 {
        max-width: 8.33%;
    }

    .col-2 {
        max-width: 16.67%;
    }

    .col-3 {
        min-width: 25%;
        max-width: 25%;
    }

    .col-12 {
        min-width: 100%;
    }

    .col-small {
        width: 4.5%;
    }
</style>

<div class="limiter">
    <div class="table-container p-4">

        <div class="table-wrap">
            <h4>Applicants</h4><hr />
            <table id="example" class="table table-striped table-bordered ">
                <thead>
                    <tr style="color:#fff;" class="col-12">
                        <th class="col-small">#</th>
                        <th class="col-2">Full Name</th>
                        <th class="col-small">CST Mark</th>
                        <th class="col-3">CST Comment</th>
                        <th class="col-1">Int. Rating</th>
                        <th class="col-3">Interview Comment</th>
                        <th class="col-1">Phase</th>
                        <th class="col-1">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (_applicants != null)
                    {
                        foreach (var applicant in _applicants)
                        {
                            <tr class="col-12">
                                <td class="col-small">@applicant.Id</td>
                                <td class="colspan">@applicant.FirstName @applicant.LastName</td>
                                <td class="col-small">@(applicant.CstMark)%</td>
                                <td class="col-3">@applicant.CstComment</td>

                                @if (_tempApplicant != applicant)
                                {
                                    <td class="col-1">@(applicant.InterviewRating)%</td>
                                    <td class="col-3">@applicant.InterviewComment</td>
                                    <td class="col-1">@applicant.Phase</td>
                                }
                                else
                                {
                                    <td class="col-1">
                                        <input type="text" class="form-control" @bind="_tempApplicant.InterviewRating">
                                    </td>
                                    <td class="col-3">
                                        <textarea class="form-control" rows="5" @bind="_tempApplicant.InterviewComment"></textarea>
                                    </td>
                                    <td class="col-1 small">
                                        <select class="form-control" @onchange="e => ChangePhase(applicant, e)">
                                            <option disabled>--Select Phase--</option>
                                            <option value="application">Application</option>
                                            <option value="interview">Interview</option>
                                            <option value="offer">Offer</option>
                                            <option value="hire">Hire</option>
                                        </select>
                                    </td>
                                }
                                <td class="col-1">
                                    @if (applicant != _tempApplicant)
                                    {
                                        <button type="button" class="btn btn-primary btn-xs dt-edit" style="margin-right:16px;" @onclick="() => Edit(applicant)">
                                            <i class="fas fa-pen"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-primary btn-xs dt-edit" style="margin-right:16px;" @onclick="() => Save(applicant)">
                                            <i class="fas fa-save"></i>
                                        </button>
                                        <button type="button" class="btn btn-primary btn-xs dt-edit" style="margin-right:16px;" @onclick="() => CancelEdit(applicant)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    List<Applicant> _applicants;
    Applicant _tempApplicant;
    private List<Applicant> _storeInitializedData;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("getting Applicants");
        _applicants = (await _applicantDataService.GetAllApplicants()).ToList();

        //await _jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");

        _storeInitializedData = _applicants;
    }

    private void Edit(Applicant user)
    {
        _tempApplicant = user;
    }

    private async Task CancelEdit(Applicant person)
    {
        _applicants = _storeInitializedData;
        _tempApplicant = null;
    }

    private async Task Save(Applicant applicant)
    {
        Console.WriteLine("Updating Applicant");
        _applicantDataService.UpdateApplicant(applicant).Wait();
        Console.WriteLine("Done Updating Applicant");
        Console.WriteLine("Get Updated Applicants List");
        _applicants = (await _applicantDataService.GetAllApplicants()).ToList();
        Console.WriteLine("Done Getting Updated Applicants List");

        _storeInitializedData = _applicants;
        _tempApplicant = null;
    }

    private void ChangePhase(Applicant applicant, ChangeEventArgs e)
    {
        if (e.Value != null) _tempApplicant.Phase = e.Value.ToString();
    }
}