@inject HrJobState hrJobState
@inject HttpClient httpClient
@inject UserState userstate

<style>
    .phase-manager-container {
        width: 100%;
        height: 90%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .page-top-select-job {
        height: 5vh;
        width: 100%;
        margin-bottom: 2.5vh;
    }

    .phase-container {
        width: 190px;
        max-height: 75%;
        background-color: white;
        border-radius: 20px;
        overflow-y: auto;
        overflow-x: hidden;
        display: flex;
        justify-content: center;
    }

    .phase-title {
        background-color: #00BCAE;
        text-align: center;
        height: 30px;
        width: 100%;
        margin-bottom: 5px;
        align-items: center;
    }

    .jobs-container {
        display: flex;
        justify-content: space-evenly;
        width: 90%;
    }

    .job-status {
        display: flex;
        flex-direction: column;
        width: 100%;
        background-color: white;
        height: 400px;
        max-height: 400px;
    }

        .job-status ul {
            flex: 1;
            overflow-y: auto;
            overflow-x: hidden;
            display: block;
            justify-content: center;
            margin-left: 8%;
        }

    .can-drop {
        border: 2px dashed #00BCAE;
        box-shadow: 3px 3px 10px #00BCAE;
    }

    .draggable {
        margin-bottom: 5px;
        border: 1px solid #00BCAE;
        cursor: grab;
        background: lightgrey;
        color: black;
        border-radius: 8px;
        width: 160px;
        height: 65px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .draggable-edit {
        width: 15%;

        height: 100%;
        border-radius: 8px;
        display: flex;
        justify-content: center;
    }

    .draggable-content {
        width: 50%;

        height: 100%;
        border-radius: 8px;
        font-family: opensans-light;
        display: flex;
        align-items: center;
        word-wrap: break-word;
    }

    .draggable-picture {
        width: 35%;

        height: 100%;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .draggable:hover:active {
        cursor: grabbing;
        background-color: #00BCAE;
    }

    .draggable:hover {
        background-color: #F0F0F0;
    }

    .drag-item-text {
        font-family: opensans-light;
        margin-left: 5px;
    }

    .mydialog {
        width: 350px;
        height: 400px;
        background-color: white;
        border-radius: 12px;
    }

    .mydialog-title {
        height: 10%;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 15px;
        font-family: opensans-bold;
        color: black;
    }

    .screening-dialog-body {
        height: 40%;
        width: 100%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .screening-dialog-textarea {
        width: 100%;
        height: 40%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .screening-dialog-email {
        height: 10%;
        width: 90%;
        margin-left: 5%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .email-button{
        position: absolute;
        top: 90%;
        left: 65%;
    }


    .mycard {
        width: 100px;
        height: 100px;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: white;
        font-family: opensans-bold;
        text-align: center;
        border: 1px solid rgba(255, 255, 255, 0.20);
        border-radius: 12px;
        background: linear-gradient(-45deg, rgba(0,0,0,0.22), rgba(255,255,255,0.25));
        box-shadow: 12px 12px 16px 0 rgba(0, 0, 0, 0.25), -8px -8px 12px 0 rgba(255, 255, 255, 0.3);
    }

    .edit-icon {
        color: black;
        font-size: 1em;
        text-align: center;
    }

        .edit-icon:hover {
            color: #d35bc9;
        }

    .currentphase {
        background: linear-gradient(135deg, rgba(0, 188, 174, 1), rgba(255,255,255,0.25));
    }

    .active-phase {
        color: white;
        font-family: opensans-bold;
    }

    .phase-manager-textarea {
        border-radius: 5px;
        border: 1px solid grey;
        background-color: white;
        width: 320px;
        height: 150px;
        padding: 5px;
    }

    .profile-picture {
        border-radius: 50%;
        width: 40px;
        height: 40px;
        border: 1px solid #00BCAE;
    }

    .loading-dialog {
        height: 100%;
        width: 100%;
        overflow-y: hidden;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        color: #00BCAE;
        font-family: opensans-bold;
    }

    .invalid-email{
        border: 1px solid red;
    }

</style>


<div class="page-top-select-job">
    <div class="hr-job-search-bar">
        <input class="hr-job-search-bar-input" type="text" placeholder="Search" @bind-value="searchTerm" @bind-value:event="oninput" />
    </div>
</div>
<div class="phase-manager-container">

    <div class="jobs-container">

        @if (TotalPhases.Contains(1))
        {
            <div class="phase-container shadow @DropClass">
                <div class="job-status">
                    <div class="phase-title">
                        <h5 class="active-phase">Applied</h5>
                    </div>

                    <ul class="dropzone"
                        ondragover="event.preventDefault();"
                        ondragstart="event.dataTransfer.setData('', event.target.id);"
                        @ondrop='() => HandleDrop(1)'
                        @ondragenter='() => HandleDragEnter(1)'
                        @ondragleave="HandleDragLeave">

                        @foreach (var item in FilteredItems)
                        {
                            @if (item.ApplicationPhaseId == 1)
                            {
                                <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                    <div class="draggable-picture">
                                        <img class="profile-picture" src="@item.Picture" />
                                    </div>
                                    <div class="draggable-content">
                                        <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                    </div>
                                    <div class="draggable-edit">
                                    </div>
                                </li>
                            }
                        }

                    </ul>
                </div>
            </div>
        }

        @if (TotalPhases.Exists(x => x is 10 or 3 or 5 or 25))
        {
            <div class="phase-container shadow @DropClass">
                <div class="job-status">
                    <div class="phase-title">
                        <h5 class="active-phase">Screening</h5>
                    </div>


                    <ul class="dropzone"
                        ondragover="event.preventDefault();"
                        ondragstart="event.dataTransfer.setData('', event.target.id);"
                        @ondrop='() => HandleDrop(10)'
                        @ondragenter='() => HandleDragEnter(10)'
                        @ondragleave="HandleDragLeave">

                        @foreach (var item in FilteredItems)
                        {
                            @if (item.ApplicationPhaseId is 3 or 5 or 25 or 10)
                            {
                                <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                    <div class="draggable-picture">
                                        <img class="profile-picture" src="@item.Picture" />
                                    </div>
                                    <div class="draggable-content">
                                        <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                    </div>
                                    <div class="draggable-edit">
                                        <span @onclick='() => ShowDialog(item)'>
                                            <i class="fas fa-edit edit-icon"></i>
                                        </span>
                                    </div>
                                </li>
                            }
                        }

                    </ul>
                </div>
            </div>
        }

        @if (TotalPhases.Contains(27))
        {
            <div class="phase-container shadow @DropClass">
                <div class="job-status">
                    <div class="phase-title">
                        <h5 class="active-phase">Assessment</h5>
                    </div>


                    <ul class="dropzone"
                        ondragover="event.preventDefault();"
                        ondragstart="event.dataTransfer.setData('', event.target.id);"
                        @ondrop='() => HandleDrop(27)'
                        @ondragenter='() => HandleDragEnter(27)'
                        @ondragleave="HandleDragLeave">

                        @foreach (var item in FilteredItems)
                        {
                            @if (item.ApplicationPhaseId == 27)
                            {
                                <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                    <div class="draggable-picture">
                                        <img class="profile-picture" src="@item.Picture" />
                                    </div>
                                    <div class="draggable-content">
                                        <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                    </div>
                                    <div class="draggable-edit">
                                        <span @onclick='() => ShowDialog(item)'>
                                            <i class="fas fa-edit edit-icon"></i>
                                        </span>
                                    </div>
                                </li>
                            }
                        }

                    </ul>
                </div>
            </div>
        }


        @if (TotalPhases.Exists(x => x is 11 or 26 or 28 or 29 or 30 or 31))
        {
            <div class="phase-container shadow @DropClass">
                <div class="job-status">
                    <div class="phase-title">
                        <h5 class="active-phase">Interview</h5>
                    </div>

                    <ul class="dropzone"
                        ondragover="event.preventDefault();"
                        ondragstart="event.dataTransfer.setData('', event.target.id);"
                        @ondrop='() => HandleDrop(11)'
                        @ondragenter='() => HandleDragEnter(11)'
                        @ondragleave="HandleDragLeave">

                        @foreach (var item in FilteredItems)
                        {
                            @if (item.ApplicationPhaseId is 26 or 28 or 29 or 30 or 31 or 11)
                            {
                                <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                    <div class="draggable-picture">
                                        <img class="profile-picture" src="@item.Picture" />
                                    </div>
                                    <div class="draggable-content">
                                        <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                    </div>
                                    <div class="draggable-edit">
                                        <span @onclick='() => ShowDialog(item)'>
                                            <i class="fas fa-edit edit-icon"></i>
                                        </span>
                                    </div>
                                </li>
                            }
                        }

                    </ul>
                </div>
            </div>
        }

        @if (TotalPhases.Contains(32))
        {
            <div class="phase-container shadow @DropClass">
                <div class="job-status">
                    <div class="phase-title">
                        <h5 class="active-phase">Reference Check</h5>
                    </div>


                    <ul class="dropzone"
                        ondragover="event.preventDefault();"
                        ondragstart="event.dataTransfer.setData('', event.target.id);"
                        @ondrop='() => HandleDrop(32)'
                        @ondragenter='() => HandleDragEnter(32)'
                        @ondragleave="HandleDragLeave">

                        @foreach (var item in FilteredItems)
                        {
                            @if (item.ApplicationPhaseId == 32)
                            {
                                <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                    <div class="draggable-picture">
                                        <img class="profile-picture" src="@item.Picture" />
                                    </div>
                                    <div class="draggable-content">
                                        <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                    </div>
                                    <div class="draggable-edit">
                                        <span @onclick='() => ShowDialog(item)'>
                                            <i class="fas fa-edit edit-icon"></i>
                                        </span>
                                    </div>
                                </li>
                            }
                        }

                    </ul>
                </div>
            </div>
        }

        @if (TotalPhases.Exists(x => x is 12 or 33 or 34 or 35))
        {
            <div class="phase-container shadow @DropClass">
                <div class="job-status">
                    <div class="phase-title">
                        <h5 class="active-phase">Offer</h5>
                    </div>


                    <ul class="dropzone"
                        ondragover="event.preventDefault();"
                        ondragstart="event.dataTransfer.setData('', event.target.id);"
                        @ondrop='() => HandleDrop(12)'
                        @ondragenter='() => HandleDragEnter(12)'
                        @ondragleave="HandleDragLeave">

                        @foreach (var item in FilteredItems)
                        {
                            @if (item.ApplicationPhaseId is 33 or 34 or 35 or 12)
                            {
                                <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                    <div class="draggable-picture">
                                        <img class="profile-picture" src="@item.Picture" />
                                    </div>
                                    <div class="draggable-content">
                                        <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                    </div>
                                    <div class="draggable-edit">
                                        <span @onclick='() => ShowDialog(item)'>
                                            <i class="fas fa-edit edit-icon"></i>
                                        </span>
                                    </div>
                                </li>
                            }
                        }

                    </ul>
                </div>
            </div>
        }

        @if (TotalPhases.Exists(x => x is 13 or 36))
        {
            <div class="phase-container shadow @DropClass">
                <div class="job-status">
                    <div class="phase-title">
                        <h5 class="active-phase">Hired/Not Hired</h5>
                    </div>


                    <ul class="dropzone"
                        ondragover="event.preventDefault();"
                        ondragstart="event.dataTransfer.setData('', event.target.id);"
                        @ondrop='() => HandleDrop(13)'
                        @ondragenter='() => HandleDragEnter(13)'
                        @ondragleave="HandleDragLeave">

                        @foreach (var item in FilteredItems)
                        {
                            @if (item.ApplicationPhaseId is 36 or 13)
                            {
                                <li class="draggable" draggable="true" title="@item.Name" @ondragstart="@(() => HandleDragStart(item))">
                                    <div class="draggable-picture">
                                        <img class="profile-picture" src="@item.Picture" />
                                    </div>
                                    <div class="draggable-content">
                                        <p class="drag-item-text" style="margin-top: 10px;">@item.Name @item.Surname</p>
                                    </div>
                                    <div class="draggable-edit">
                                        <span @onclick='() => ShowDialog(item)'>
                                            <i class="fas fa-edit edit-icon"></i>
                                        </span>
                                    </div>
                                </li>
                            }
                        }

                    </ul>
                </div>
            </div>
        }


    </div>


    <MatDialog @bind-IsOpen="@ScreeningDialogIsOpen">
        <div class="mydialog">
            <div class="mydialog-title">
                <b>Screening</b>
            </div>
            <div class="screening-dialog-body">
                @if (TotalPhases.Contains(3))
                {
                    <div class=" rounded shadow mycard @ScreeningOne" @onclick="() => MovePhase(3)"><b>Schedule Phone Screen</b></div>
                }
                @if (TotalPhases.Contains(5))
                {
                    <div class=" rounded shadow mycard @ScreeningTwo" @onclick="() => MovePhase(5)"><b>Phone Screened</b></div>
                }
                @if (TotalPhases.Contains(25))
                {
                    <div class=" rounded shadow mycard @ScreeningThree" @onclick="() => MovePhase(25)"><b>MS Teams Meeting</b></div>
                }
            </div>
            <div class="screening-dialog-email" style="font-family: opensans-light">
                Send to:
                <input type="email" style="width: 60%;" @bind="CurrentEmailRecipient" class="@EmailAlert"/>
                <MudButton Disabled="@EmailSent" OnClick="SendEmail" Variant="Variant.Text" Style="height: 25px; width: 25px;">
                    @if (EmailSent)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailComplete)
                    {
                        <i class="fas fa-check edit-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane edit-icon" style="font-size: 20px;"></i>
                    }
                </MudButton>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@AssessmentDialogIsOpen">
        <div class="mydialog">
            <div class="mydialog-title">
                <b>Assessment</b>
            </div>
            <div class="screening-dialog-body">
                <input type="number" placeholder="0" style="width: 160px; height: 80px; font-size: 70px;" min="0" max="100" />
            </div>
            <div class="screening-dialog-email" style="font-family: opensans-light">
                Send to:
                <input type="email" style="width: 60%;" @bind="CurrentEmailRecipient"  class="@EmailAlert" />
                <MudButton Disabled="@EmailSent" OnClick="SendEmail" Variant="Variant.Text" Style="height: 25px; width: 25px;">
                    @if (EmailSent)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailComplete)
                    {
                        <i class="fas fa-check edit-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane edit-icon" style="font-size: 20px;"></i>
                    }
                </MudButton>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@InterviewDialogIsOpen">
        <div class="mydialog" style="width: 550px">
            <div class="mydialog-title">
                <b>Interview</b>
            </div>
            <div class="screening-dialog-body">
                @if (TotalPhases.Contains(26))
                {
                    <div class=" rounded shadow mycard @InterviewOne" @onclick="() => MovePhase(26)"><b>First Round</b></div>
                }
                @if (TotalPhases.Contains(28))
                {
                    <div class=" rounded shadow mycard @InterviewTwo" @onclick="() => MovePhase(28)"><b>Second Round</b></div>
                }
                @if (TotalPhases.Contains(29))
                {
                    <div class=" rounded shadow mycard @InterviewThree" @onclick="() => MovePhase(29)"><b>Manager Feedback</b></div>
                }
                @if (TotalPhases.Contains(30))
                {
                    <div class=" rounded shadow mycard @InterviewFour" @onclick="() => MovePhase(30)"><b>CTO/MD</b></div>
                }
                @if (TotalPhases.Contains(31))
                {
                    <div class=" rounded shadow mycard @InterviewFive" @onclick="() => MovePhase(31)"><b>CEO</b></div>
                }
            </div>
            <div class="screening-dialog-email" style="font-family: opensans-light; width: 315px; margin-left: 120px;">
                Send to:
                <input type="email" style="width: 60%;" @bind="CurrentEmailRecipient"  class="@EmailAlert"/>
                <MudButton Disabled="@EmailSent" OnClick="SendEmail" Variant="Variant.Text" Style="height: 25px; width: 25px;">
                    @if (EmailSent)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailComplete)
                    {
                        <i class="fas fa-check edit-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane edit-icon" style="font-size: 20px;"></i>
                    }
                </MudButton>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@ReferenceCheckDialogIsOpen">
        <div class="mydialog">
            <div class="mydialog-title">
                <b>Reference Check</b>
            </div>
            <div class="screening-dialog-body" style="height: 50px;">

            </div>
            <div class="screening-dialog-email" style="font-family: opensans-light">
                Send to:
                <input type="email" style="width: 60%;" @bind="CurrentEmailRecipient"  class="@EmailAlert"/>
                <MudButton Disabled="@EmailSent" OnClick="SendEmail" Variant="Variant.Text" Style="height: 25px; width: 25px;">
                    @if (EmailSent)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailComplete)
                    {
                        <i class="fas fa-check edit-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane edit-icon" style="font-size: 20px;"></i>
                    }
                </MudButton>
            </div>
            <div class="screening-dialog-textarea" style="margin-top: 50px;">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@OfferDialogIsOpen">
        <div class="mydialog">
            <div class="mydialog-title">
                <b>Offer</b>
            </div>
            <div class="screening-dialog-body">
                @if (TotalPhases.Contains(33))
                {
                    <div class=" rounded shadow mycard @OfferOne" @onclick="() => MovePhase(33)"><b>Send Offer</b></div>
                }
                @if (TotalPhases.Contains(34))
                {
                    <div class=" rounded shadow mycard @OfferTwo" @onclick="() => MovePhase(34)"><b>Unsuccessful</b></div>
                }
                @if (TotalPhases.Contains(35))
                {
                    <div class=" rounded shadow mycard @OfferThree" @onclick="() => MovePhase(35)"><b>Reviewed</b></div>
                }
            </div>
            <div class="screening-dialog-email" style="font-family: opensans-light">
                Send to:
                <input type="email" style="width: 60%;" @bind="CurrentEmailRecipient"  class="@EmailAlert"/>
                <MudButton Disabled="@EmailSent" OnClick="SendEmail" Variant="Variant.Text" Style="height: 25px; width: 25px;">
                    @if (EmailSent)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailComplete)
                    {
                        <i class="fas fa-check edit-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane edit-icon" style="font-size: 20px;"></i>
                    }
                </MudButton>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@HiredDialogIsOpen">
        <div class="mydialog">
            <div class="mydialog-title">
                <b>Successful/Unsuccessful</b>
            </div>
            <div class="screening-dialog-body">
                <div class=" rounded shadow mycard @Hired" @onclick="() => MovePhase(36)"><b>Hired</b></div>
                <div class=" rounded shadow mycard @NotHired" @onclick="Deny"><b>Not Hired</b></div>
            </div>
            <div class="screening-dialog-email" style="font-family: opensans-light">
                Send to:
                <input type="email" style="width: 60%;" @bind="CurrentEmailRecipient"  class="@EmailAlert"/>
                <MudButton Disabled="@EmailSent" OnClick="SendEmail" Variant="Variant.Text" Style="height: 25px; width: 25px;">
                    @if (EmailSent)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else if (EmailComplete)
                    {
                        <i class="fas fa-check edit-icon" style="font-size: 20px;"></i>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane edit-icon" style="font-size: 20px;"></i>
                    }
                </MudButton>
            </div>
            <div class="screening-dialog-textarea">
                <textarea class="phase-manager-textarea" @bind="CurrentEmailTemplate"></textarea>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@ReasonDialogIsOpen" Style="left: 30%;">
        <div class="mydialog" style="height: 170px;">
            <div class="mydialog-title">
                <b>Reasoning</b>
            </div>
            <div class="screening-dialog-body">
                <select @bind="tempReasonId" class="form-select" style="width: 80%;">
                    @foreach (var reason in Unsuccessful)
                    {
                        <option value="@reason.Id">@reason.Reason</option>
                    }
                </select>
            </div>
            <div class="d-flex justify-content-center align-items-center">
                <button class="btn" style="background-color: white; border: 1px solid black" @onclick="Reject">Submit</button>
            </div>
        </div>
    </MatDialog>

    <MatDialog @bind-IsOpen="@LoadingDialog">
        <div class="loading-dialog">
            <MudText Style="font-size: 15px; font-family: opensans-bold;">Loading data</MudText>
            <MudProgressCircular Class="ms-n1" Size="Size.Medium" Indeterminate="true" />
        </div>
    </MatDialog>



</div>



@code {

    [Parameter] public int CurrentJobId { get; set; }


    public ApplicationPhaseItem CurrentItem;

    public string searchTerm = "";
    public int tempReasonId = -1;
    public string CurrentJobTitle = "";
    public string CurrentEmailRecipient = "";
    public string CurrentEmailTemplate = "";

    string EmailAlert = "";

    bool EmailSent = false;
    bool EmailComplete = false;

    List<int> TotalPhases = new List<int>();

    //tables we need
    List<ApplicationPhase> AppPhases = new List<ApplicationPhase>();
    List<ApplicationPhasesHelper> CurrentApplicantPhases = new List<ApplicationPhasesHelper>();
    List<AppUser> tempAppUsers = new List<AppUser>();
    List<UnsuccessfulReason> Unsuccessful = new List<UnsuccessfulReason>();
    List<RejectedCandidate> RejectedUsers = new List<RejectedCandidate>();

    //tables to be filtered
    List<Application> AllApplications = new List<Application>();
    List<JobApplicationPhase> AllJobApplicationPhases = new List<JobApplicationPhase>();

    //filtered output
    List<Application> CurrentApplications;
    List<JobApplicationPhase> JobPhases;
    Job CurrentJob;

    //list for draggable items
    List<ApplicationPhaseItem> Items = new List<ApplicationPhaseItem>();
    List<ApplicationPhaseItem> FilteredItems => Items.Where(item => item.Name.ToLower().Contains(searchTerm.ToLower()) || item.Surname.ToLower().Contains(searchTerm.ToLower())).ToList();



    //dialogs
    bool ScreeningDialogIsOpen = false;
    bool AssessmentDialogIsOpen = false;
    bool InterviewDialogIsOpen = false;
    bool ReferenceCheckDialogIsOpen = false;
    bool OfferDialogIsOpen = false;
    bool HiredDialogIsOpen = false;
    bool ReasonDialogIsOpen = false;
    bool LoadingDialog = true;

    //css borders
    string DropClass = "";

    //dialog phases
    string ScreeningOne = "";
    string ScreeningTwo = "";
    string ScreeningThree = "";

    string InterviewOne = "";
    string InterviewTwo = "";
    string InterviewThree = "";
    string InterviewFour = "";
    string InterviewFive = "";

    string OfferOne = "";
    string OfferTwo = "";
    string OfferThree = "";

    string Hired = "";
    string NotHired = "";



    protected override async Task OnParametersSetAsync()
    {
        CurrentJob = await httpClient.GetFromJsonAsync<Job>($"https://xebecapi.azurewebsites.net/api/job/{CurrentJobId}");

        CurrentJobTitle = CurrentJob.Title;

        if(CurrentJobId!=0)
        {
            CurrentApplications = AllApplications.Where(x => x.JobId == CurrentJobId).ToList();
            JobPhases = AllJobApplicationPhases.Where(x => x.JobId == CurrentJobId).ToList();

            TotalPhases.Clear();
            TotalPhases.Add(1);
            TotalPhases.Add(13);
            TotalPhases.Add(36);

            foreach (var phase in JobPhases)
            {
                TotalPhases.Add(phase.ApplicationPhaseId);
            }

            if (JobPhases.Exists((x) => x.ApplicationPhaseId is 3 or 5 or 25))
            {
                TotalPhases.Add(10);
            }
            if (JobPhases.Exists((x) => x.ApplicationPhaseId is 26 or 28 or 29 or 30 or 31))
            {
                TotalPhases.Add(11);
            }
            if (JobPhases.Exists((x) => x.ApplicationPhaseId is 33 or 34 or 35))
            {
                TotalPhases.Add(12);
            }

            Items.Clear();
            FilteredItems.Clear();

            foreach (var application in CurrentApplications)
            {
                ApplicationPhaseItem temp = new ApplicationPhaseItem();
                temp.Id = application.Id;
                temp.ApplicationId = application.Id;
                temp.Name = tempAppUsers.First((x) => x.id == application.AppUserId).name;
                temp.Surname = tempAppUsers.First((x) => x.id == application.AppUserId).surname;
                temp.Email = tempAppUsers.First((x) => x.id == application.AppUserId).email;
                temp.Picture = tempAppUsers.First((x) => x.id == application.AppUserId).imageUrl;

                temp.ApplicationPhaseId = CurrentApplications.First((x) => x.Id == temp.ApplicationId).ApplicationPhaseId;

                Items.Add(temp);
            }

            if (FilteredItems.Count != 0)
            {
                LoadingDialog = false;
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        AllApplications = await httpClient.GetFromJsonAsync<List<Application>>("https://xebecapi.azurewebsites.net/api/application");
        AllJobApplicationPhases = await httpClient.GetFromJsonAsync<List<JobApplicationPhase>>("https://xebecapi.azurewebsites.net/api/jobapplicationphase");

        tempAppUsers = await httpClient.GetFromJsonAsync<List<AppUser>>("https://xebecapi.azurewebsites.net/api/user");
        CurrentApplicantPhases = await httpClient.GetFromJsonAsync<List<ApplicationPhasesHelper>>("https://xebecapi.azurewebsites.net/api/applicationphasehelper");
        AppPhases = await httpClient.GetFromJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase");
        Unsuccessful = await httpClient.GetFromJsonAsync<List<UnsuccessfulReason>>("https://xebecapi.azurewebsites.net/api/unsuccessfulreason");
        RejectedUsers = await httpClient.GetFromJsonAsync<List<RejectedCandidate>>("https://xebecapi.azurewebsites.net/api/rejectedcandidate");

    }




    private void HandleDragEnter(int applicationPhase)
    {
        DropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        //AppliedDropClass = "";
    }

    private async Task HandleDrop(int phase)
    {
        DropClass = "";

        CurrentEmailTemplate = "";
        CurrentEmailRecipient = CurrentItem.Email;


        if (phase == CurrentItem.ApplicationPhaseId) return;

        if (phase == 10)
        {
            if (CurrentItem.ApplicationPhaseId is 3 or 5 or 25) return;
            ScreeningDialogIsOpen = true;
        }
        if (phase == 11)
        {
            if (CurrentItem.ApplicationPhaseId is 26 or 28 or 29 or 30 or 31) return;
            InterviewDialogIsOpen = true;
        }
        if (phase == 12)
        {
            if (CurrentItem.ApplicationPhaseId is 33 or 34 or 35) return;
            OfferDialogIsOpen = true;
        }
        if (phase is 36 or 13)
        {
            if (CurrentItem.ApplicationPhaseId is 36) return;
            HiredDialogIsOpen = true;
        }

        await UpdateJobAsync(phase);

    }

    private void HandleDragStart(ApplicationPhaseItem selectedItem)
    {
        CurrentItem = selectedItem;
        CurrentEmailRecipient = CurrentItem.Email;
    }

    public async Task UpdateJobAsync(int phase)
    {
        CurrentItem.ApplicationPhaseId = phase;

        var task = Items.SingleOrDefault(x => x.Id == CurrentItem.Id);

        if (phase is 10 or 11 or 12 or 13 && task != null)
        {
            task.ApplicationPhaseId = phase;
            return;
        }

        if (task != null)
        {
            task.ApplicationPhaseId = phase;

            Application temp = new Application();

            temp = CurrentApplications.Single(i => i.Id == CurrentItem.ApplicationId);
            temp.ApplicationPhaseId = phase;

            await httpClient.PutAsJsonAsync<Application>($"https://xebecapi.azurewebsites.net/api/application/{CurrentItem.ApplicationId}", temp);

            ApplicationPhasesHelper tempHelper = new ApplicationPhasesHelper();
            tempHelper.ApplicationId = CurrentItem.ApplicationId;
            tempHelper.ApplicationPhaseId = phase;
            tempHelper.TimeMoved = DateTime.Now;

            await httpClient.PostAsJsonAsync<ApplicationPhasesHelper>("https://xebecapi.azurewebsites.net/api/applicationphasehelper", tempHelper);
        }
    }

    public void ShowDialog(ApplicationPhaseItem item)
    {
        CurrentItem = item;
        CurrentEmailRecipient = CurrentItem.Email;

        EmailComplete = false;

        EmailAlert = "";

        ScreeningOne = "";
        ScreeningTwo = "";
        ScreeningThree = "";

        InterviewOne = "";
        InterviewTwo = "";
        InterviewThree = "";
        InterviewFour = "";
        InterviewFive = "";

        OfferOne = "";
        OfferTwo = "";
        OfferThree = "";

        Hired = "";
        NotHired = "";


        if (item.ApplicationPhaseId is 3 or 5 or 25 or 10)
        {
            ScreeningDialogIsOpen = true;

            if (item.ApplicationPhaseId == 3)
            {
                ScreeningOne = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 3).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 5)
            {
                ScreeningTwo = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 5).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 25)
            {
                ScreeningThree = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 25).EmailTemplate);
            }
        }

        else if (item.ApplicationPhaseId == 27)
        {
            AssessmentDialogIsOpen = true;
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 27).EmailTemplate);
        }

        else if (item.ApplicationPhaseId is 26 or 28 or 29 or 30 or 31 or 11)
        {
            InterviewDialogIsOpen = true;

            if (item.ApplicationPhaseId == 26)
            {
                InterviewOne = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 26).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 28)
            {
                InterviewTwo = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 28).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 29)
            {
                InterviewThree = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 29).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 30)
            {
                InterviewFour = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 30).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 31)
            {
                InterviewFive = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 31).EmailTemplate);
            }
        }

        else if (item.ApplicationPhaseId == 32)
        {
            ReferenceCheckDialogIsOpen = true;
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 32).EmailTemplate);
        }

        else if (item.ApplicationPhaseId is 33 or 34 or 35 or 12)
        {
            OfferDialogIsOpen = true;

            if (item.ApplicationPhaseId == 33)
            {
                OfferOne = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 33).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 34)
            {
                OfferTwo = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 34).EmailTemplate);
            }
            else if (item.ApplicationPhaseId == 35)
            {
                OfferThree = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 35).EmailTemplate);
            }
        }

        else if (item.ApplicationPhaseId is 36 or 13)
        {
            HiredDialogIsOpen = true;

            if (item.ApplicationPhaseId == 36)
            {
                if (RejectedUsers.Exists(x => x.ApplicationId == CurrentItem.ApplicationId))
                {
                    NotHired = "currentphase";
                }
                else
                {
                    Hired = "currentphase";
                    CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 36).EmailTemplate);
                }
            }
        }

    }

    public async Task MovePhase(int i)
    {
        ScreeningOne = "";
        ScreeningTwo = "";
        ScreeningThree = "";

        InterviewOne = "";
        InterviewTwo = "";
        InterviewThree = "";
        InterviewFour = "";
        InterviewFive = "";

        OfferOne = "";
        OfferTwo = "";
        OfferThree = "";

        Hired = "";
        NotHired = "";

        if (i == 3)
        {
            ScreeningOne = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 3).EmailTemplate);
        }
        else if (i == 5)
        {
            ScreeningTwo = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 5).EmailTemplate);
        }
        else if (i == 25)
        {
            ScreeningThree = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 25).EmailTemplate);
        }
        else if (i == 26)
        {
            InterviewOne = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 26).EmailTemplate);
        }
        else if (i == 28)
        {
            InterviewTwo = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 28).EmailTemplate);
        }
        else if (i == 29)
        {
            InterviewThree = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 29).EmailTemplate);
        }
        else if (i == 30)
        {
            InterviewFour = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 30).EmailTemplate);
        }
        else if (i == 31)
        {
            InterviewFive = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 31).EmailTemplate);
        }
        else if (i == 33)
        {
            OfferOne = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 32).EmailTemplate);
        }
        else if (i == 34)
        {
            OfferTwo = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 33).EmailTemplate);
        }
        else if (i == 35)
        {
            OfferThree = "currentphase";
            CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 34).EmailTemplate);
        }
        else if (i == 36)
        {
            if (RejectedUsers.Exists(x => x.ApplicationId == CurrentItem.ApplicationId))
            {
                NotHired = "currentphase";
            }
            else
            {
                Hired = "currentphase";
                CurrentEmailTemplate = ConvertEmail(AppPhases.First(x => x.id == 36).EmailTemplate);
            }
        }

        var task = Items.SingleOrDefault(x => x.Id == CurrentItem.Id);

        CurrentItem.ApplicationPhaseId = i;

        EmailAlert = "";

        if (task != null)
        {
            Application temp = new Application();

            temp = CurrentApplications.Single(i => i.Id == CurrentItem.ApplicationId);
            temp.ApplicationPhaseId = i;

            await httpClient.PutAsJsonAsync<Application>($"https://xebecapi.azurewebsites.net/api/application/{CurrentItem.ApplicationId}", temp);
        }

        ApplicationPhasesHelper tempHelper = new ApplicationPhasesHelper();
        tempHelper.ApplicationId = CurrentItem.ApplicationId;
        tempHelper.ApplicationPhaseId = i;
        tempHelper.TimeMoved = DateTime.Now;

        await httpClient.PostAsJsonAsync<ApplicationPhasesHelper>("https://xebecapi.azurewebsites.net/api/applicationphasehelper", tempHelper);



    }

    public async Task Deny()
    {
        CurrentEmailTemplate = "";

        tempReasonId = -1;

        ReasonDialogIsOpen = true;
    }

    public async Task Reject()
    {
        if (tempReasonId != -1)
        {
            CurrentEmailTemplate = ConvertEmail(Unsuccessful.Single(x => x.Id == tempReasonId).EmailTemplate);

            RejectedCandidate temp = new RejectedCandidate();

            temp.ApplicationId = CurrentItem.ApplicationId;
            temp.UnsuccessfulReasonId = tempReasonId;

            await httpClient.PostAsJsonAsync<RejectedCandidate>("https://xebecapi.azurewebsites.net/api/rejectedcandidate", temp);
            RejectedUsers = await httpClient.GetFromJsonAsync<List<RejectedCandidate>>("https://xebecapi.azurewebsites.net/api/rejectedcandidate");

            await MovePhase(36);
        }

        ReasonDialogIsOpen = false;
    }

    public string ConvertEmail(string email)
    {
        if(email!="" && email!= null)
        {
            email = email.Replace("{firstname}", CurrentItem.Name);
            email = email.Replace("{surname}", CurrentItem.Surname);

            email = email.Replace("{jobtitle}", CurrentJobTitle);

            email = email.Replace("{date}", DateTime.Now.ToString("MMM-dd"));
            email = email.Replace("{time}", DateTime.Now.ToString("HH:mm:ss"));

            email = email.Replace("{sentname}", userstate.Name);
            email = email.Replace("{sentsurname}", userstate.Surname);
            email = email.Replace("{senttitle}", userstate.Title);
        }


        return email;
    }

    public async Task SendEmail()
    {

        if(IsValidEmail(CurrentEmailRecipient) && CurrentEmailTemplate!="")
        {
            EmailAlert = "";

            EmailModel CurrentEmail = new EmailModel();

            CurrentEmail.Subject = "Nebula Application";
            CurrentEmail.ToEmail = CurrentEmailRecipient;
            CurrentEmail.ToName = CurrentItem.Name;
            CurrentEmail.PlainText = CurrentEmailTemplate;
            CurrentEmail.Htmlcontent = "";

            EmailSent = true;

            await httpClient.PostAsJsonAsync<EmailModel>("https://mailingservice2022.azurewebsites.net/api/email/sendgrid", CurrentEmail);

            EmailSent = false;
            EmailComplete = true;
        }
        else
        {
            EmailAlert = "invalid-email";
        }
    }

    bool IsValidEmail(string email)
    {
        var trimmedEmail = email.Trim();

        if (trimmedEmail.EndsWith("."))
        {
            return false;
        }
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == trimmedEmail;
        }
        catch
        {
            return false;
        }
    }
}
