@page "/applicantportal"
@using XebecPortal.UI.Services.Models
@inject HttpClient httpClient
@inject HrJobState hrJobState
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>

    .page-top {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 15px;
    }

    .table-applicants-container {
        display: flex;
        align-items: center;
        flex-direction: column;
        height: 60vh;
    }

        .table-applicants-container td {
            text-align: center;
        }

        .table-applicants-container table {
            width: 95%;
        }

        .table-applicants-container thead tr {
            height: 7vh;
            background: #00bcae;
            color: white;
            font-weight: 800;
            font-family: opensans-condensed-bold;
            font-size: 1em;
        }

        .table-applicants-container tbody tr {
            border-bottom: 1px solid #e2e2e2;
            height: 9vh;
            background: #fff;
        }

        .table-applicants-container tbody {
            display: block;
            height: 53vh;
            overflow: auto;
        }

        .table-applicants-container thead, tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

        .table-applicants-container tr:first-child td:first-child {
            border-top-left-radius: 10px;
        }

        .table-applicants-container tr:first-child td:last-child {
            border-top-right-radius: 10px;
        }

        .table-applicants-container img {
            height: 7vh;
            width: 7vh;
        }

    .dimmed {
        background: rgb(0 0 0 / 0.20);
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-frame {
        width: 35%;
        height: 48%;
        border-radius: 15px;
        background: white;
        position: relative;
        /*overflow-y: auto;*/
    }

        .modal-frame thead, tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

    .close-modal {
        font-size: 30px;
        font-weight: bold;
        color: white;
        text-align: right;
        padding-bottom: 10px;
        padding-right: 30px;
        width: 20px;
        overflow: hidden !important;
    }

        .close-modal:hover {
            color: #d35bc9;
            cursor: pointer;
        }

    .title-column {
        font-weight: 600;
    }

    .title-modal {
        font-size: 20px;
    }

    .modal-frame thead td {
        font-weight: bold;
        background: #00bcae;
        color: white;
    }

        .modal-frame thead td:first-child {
            border-top-left-radius: 15px;
        }

        .modal-frame thead td:last-child {
            border-top-right-radius: 15px;
        }

    .modal-frame td {
        margin-bottom: 5px;
        margin-top: 5px;
        padding-left: 10px;
        overflow-x: auto;
    }

    .info-empty {
        color: #ec0f0f;
    }

    .modal-frame tbody {
        display: block;
        height: 38vh;
        overflow-y: auto;
        overflow-x: hidden;
        padding-right: 10px;
        padding-bottom: 5px;
    }

    .show-more-td {
        font-weight: 600;
    }

        .show-more-td:hover {
            cursor: pointer;
            color: #d35bc9;
        }


    .work-history-card {
        height: 20vh !important;
        width: 65vh;
        background: white;
        border-radius: 15px;
        box-shadow: 0 0 5px 5px #dddddd;
        margin-top: 10px;
        margin-left: 35px;
    }

    .work-references-card {
        height: 10vh !important;
        width: 65vh;
        background: white;
        border-radius: 15px;
        box-shadow: 0 0 5px 5px #dddddd;
        margin-top: 10px;
        margin-left: 35px;
        overflow: hidden;
    }

    .work-history-company-name {
        grid-area: companyName;
        font-weight: bold;
        text-align: left;
    }

    .work-history-job-title {
        grid-area: jobTitle;
        text-align: left;
        font-weight: 600;
        color: #414141
    }

    .work-history-date {
        grid-area: date;
        text-align: right;
        color: #d35bc9;
    }

    .work-history-description {
        grid-area: description;
    }

    .grid-container {
        display: grid;
        height: 100%;
        grid-template-areas:
            'companyName companyName companyName companyName'
            'jobTitle jobTitle jobTitle jobTitle'
            'description description description description'
            'date date date date';
        padding: 10px;
    }

    .ref-name {
        grid-area: name;
        font-weight: bold;
    }

    .ref-lastname {
        grid-area: lastname;
    }

    .ref-phone {
        grid-area: phone;
    }

    .ref-email {
        grid-area: email;
        text-align: right;
    }

    .ref-relationship {
        grid-area: relationship;
        text-align: right;
        font-weight: bold;
    }

    .grid-container-references {
        display: grid;
        grid-template-areas:
            'name name relationship relationship'
            'phone phone email email';
        padding: 10px;
    }

    .total-match-pill {
        width: 50px;
        height: 4px;
        border-radius: 1em;
        font-weight: bold;
        border-color: #2f2f2f;
    }

    .loading-icon {
        margin-top: 150px;
    }

    .btn-view-documents {
        height: 7vh;
        width: 70%;
        border-radius: 2em;
        border: none;
        color: white;
        background-color: #00BCAE;
        font-weight: 700;
        font-weight: bold;
    }

    .modal-frame-documents{
        height: 85%;
        width: 65%;
        border-radius: 1em;
        background-color: white;
        display: flex;
        justify-content: space-evenly;
        align-content: space-evenly;
        flex-direction: column;
    }

    .modal-frame-documents-rows {
        display: flex;
        justify-content: space-evenly;
        align-content: space-evenly;
    }

        .modal-frame-documents-rows .mini-modal-frame-documents img {
            height: 80%;
            width: 80%;
            margin-top: 10px;
        }

    .mini-modal-frame-documents {
        height: 25vh;
        width: 16vw;
        border-radius: 1em;
        background-color: white;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .img-document-profile {
        height: 80px;
        width: 80px;
    }

    .img-document {
        height: 60%;
        width: 90%;
    }

    .modal-document-header{
        display:flex;
        justify-content:right;
    }

    .modal-document-profile{
        display: flex;
        flex-direction: column;
    }

    .modal-document-profile img{
        width: 90px;
        height: 90px;
    }

</style>

<div class="page-top">
    <div class="hr-job-search-bar">
        <input class="hr-job-search-bar-input" type="text" placeholder="Search" @oninput="SearchCandidate" />
    </div>
</div>


<div class="table-applicants-container">

    @if (candidates != null && candidates.Count != 0)
    {
        FilterCandidatesByJob();
        <table>
            <thead>
                <tr>
                    <td></td>
                    <td>Personal Information</td>
                    <td>Position</td>
                    <td>Application Phase</td>
                    <td>Application Date</td>
                    <td></td>
                    <td></td>
                </tr>
            </thead>
            <tbody>

                @foreach (var user in users)
                {
                    @foreach (var application in applications)
                    {
                        @if (JobId == application.JobId && application.AppUserId == user.id)
                        {
                            string jobTitle = jobs.Where(x => x.Id == JobId).FirstOrDefault().Title;
                            <tr>
                                <td><img src="@user.imageUrl" alt="Avatar"></td>
                                <td style="font-size: 1.2em; font-family: opensans-condensed-bold">@user.name @empty @user.surname</td>
                                <td>@jobTitle</td>
                                <td>@FindCurrentPhase(@user.id, JobId)</td>
                                <td style="font-weight: 400; font-family: opensans-condensed-bold; font-size: 1em; color: #d35bc9">@($"{application.TimeApplied:dd MMM yyyy}")</td>
                                <td style="text-decoration: underline; font-family: opensans-condensed-bold"><a href="#">View Application Form</a></td>
                                <td><input type="button" class="btn-view-documents" value="View Documents" @onclick="() => toggleDocuments(user)" /></td>
                            </tr>

                        }
                    }
                }





                @*@foreach (var candidate in candidates)
                    {
                        AppUser currentUser = null;
                        CandidateRecommender tempCandidate = null;
                        @if (usersFiltered == null || searchCandidate == "" || searchCandidate == " ")
                        {
                            currentUser = users.Where(x => x.id == candidate.AppUserId).FirstOrDefault();
                        }
                        else if (usersFiltered.Where(x => x.id == candidate.AppUserId).FirstOrDefault() != null)
                        {
                            currentUser = usersFiltered.Where(x => x.id == candidate.AppUserId).FirstOrDefault();
                        }


                        @if (currentUser != null)
                        {
                            ApplicationModel currentApplication = applications.Where(x => x.AppUserId == currentUser.id).FirstOrDefault();


                            <tr>
                                <td style="font-weight: 900; font-family: opensans-extra-bold; font-size: 1.2em">
                                    @(candidates.IndexOf(candidate) + 1)
                                </td>

                                <td>
                                    <img src="@currentUser.imageUrl" alt="Avatar">
                                </td>
                                <td><h4 style="font-size: 1.2em; font-family: opensans-condensed-bold; text-align:left">@currentUser.name @empty @currentUser.surname</h4></td>

                                @if (candidates.Where(x => x.AppUserId == currentUser.id).FirstOrDefault() != null)
                                {
                                    tempCandidate = candidates.Where(x => x.AppUserId == currentUser.id).FirstOrDefault();

                                    <td style="padding-left: 35px">
                                    <td class="total-match-pill" style="@(GetPillStyle(candidate))">@Math.Round(tempCandidate.TotalMatch) %</td></td>
                                }


                                <td style="font-weight: 400;">@FindCurrentPhase(currentUser.id, JobId)</td>
                                <td style="font-weight: 400; font-family: opensans-condensed-bold; font-size: 1em; color: #d35bc9">@($"{currentApplication.TimeApplied:dd MMM yyyy}")</td>
                                <td class="show-more-td" @onclick="() => togglePersonalInformations(candidate)">...</td>
                                <td class="show-more-td" @onclick="() => toggleWorkHistory(candidate)">...</td>
                                <td class="show-more-td" @onclick="() => toggleEducation(candidate)">...</td>
                                <td class="show-more-td" @onclick="() => togglePortfolio(candidate)">...</td>
                                <td class="show-more-td" @onclick="() => toggleReferences(candidate)">...</td>
                                <td class="show-more-td" @onclick="() => toggleApplicationForm(candidate)">...</td>
                            </tr>

                        }

                    }*@
                @if (candidates == null || candidates.Count == 0)
                {
                    <p style="text-align: center">No applicants for this job.</p>
                }

            </tbody>
        </table>
    }
    else
    {
        <MudProgressCircular Class="loading-icon" Size="Size.Large" Indeterminate="true" />
    }

</div>



@if (showDocuments)
{
<div class="dimmed">

    <div class="modal-frame-documents">
        <div class="modal-document-header">
            <div class="modal-document-profile">
                <div class="modal-frame-documents-rows"><img src="@selectedUser.imageUrl" alt="Avatar"></div>
                <div class="modal-frame-documents-rows" style="color: #004393; font-family: opensans-condensed-bold">@selectedUser.name @empty @selectedUser.surname @empty Documents </div>
            </div>
            <input type="button" class="btn-view-documents" style="width: 100px; margin-right: 25px; margin-left:245px" value="Close" @onclick="toggleDocuments" />
        </div>
        <div class="modal-frame-documents-rows">
            <div class="mini-modal-frame-documents">
                <img src="@selectedUser.imageUrl" alt="Avatar">
                <div style="color: #00bcae; font-family: opensans-condensed-bold">
                CV
                </div>
            </div>
            <div class="mini-modal-frame-documents">
                <img src="$https://xebecstorage.blob.core.windows.net/matric-certificates/{@selectedUser.id}" alt="Avatar">
                <div style="color: #00bcae; font-family: opensans-condensed-bold">
                    Matric Certificate
                </div>
            </div>
            <div class="mini-modal-frame-documents">
                <img src="@selectedUser.imageUrl" alt="Avatar">
                <div style="color: #00bcae; font-family: opensans-condensed-bold">
                    Academic Transcript
                </div>
            </div>
        </div>
        <div class="modal-frame-documents-rows">
            <div class="mini-modal-frame-documents">
                <img src="@selectedUser.imageUrl" alt="Avatar">
                <div style="color: #00bcae; font-family: opensans-condensed-bold">
                    Certificate A
                </div>
            </div>
            <div class="mini-modal-frame-documents">
                <img src="@selectedUser.imageUrl" alt="Avatar">
                <div style="color: #00bcae; font-family: opensans-condensed-bold">
                    Certificate B
                </div>
            </div>
            <div class="mini-modal-frame-documents">
                <img src="@selectedUser.imageUrl" alt="Avatar">
                <div style="color: #00bcae; font-family: opensans-condensed-bold">
                    Certificate C
                </div>
            </div>
        </div>
    </div>
</div>
}



<!--Personal Information Model-->
@if (showPersonalInformation)
{
    @if (personalInformations != null && selectedCandidate != null)
    {
        @if (personalInformations.Where(x => x.AppUserId == selectedCandidate.AppUserId).FirstOrDefault() == null)
        {

            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">Personal Information: </td>
                                <td class="close-modal" @onclick="togglePersonalInformations">x</td>
                            </tr>
                            <tr></tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="info-empty">Candidate doesn't have any information saved.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            PersonalInformation personalInformation = personalInformations.Where(x => x.AppUserId == selectedCandidate.AppUserId).FirstOrDefault();

            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">Personal Information: </td>
                                <td class="close-modal" @onclick="togglePersonalInformations">x</td>
                            </tr>
                            <tr></tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="title-column">First Name</td>
                                <td class="form-control">@personalInformation.FirstName</td>
                            </tr>

                            <tr>
                                <td class="title-column">Last Name</td>
                                <td class="form-control">@personalInformation.LastName</td>
                            </tr>

                            <tr>
                                <td class="title-column">Email</td>
                                <td class="form-control">@personalInformation.Email</td>
                            </tr>

                            <tr>
                                <td class="title-column">Phone Number</td>
                                <td class="form-control">@personalInformation.PhoneNumber</td>
                            </tr>

                            @if (additionalInformations.Where(x => x.AppUserId == selectedCandidate.AppUserId).FirstOrDefault() == null)
                            {
                                <tr>
                                    <td class="title-column">Ethnicity</td>
                                    <td class="form-control info-empty">Empty</td>
                                </tr>
                                <tr>
                                    <td class="title-column">Gender</td>
                                    <td class="form-control info-empty">Empty</td>
                                </tr>
                            }
                            else
                            {
                                AdditionalInformation additionalInformation = additionalInformations.Where(x => x.AppUserId == selectedCandidate.AppUserId).FirstOrDefault();
                                <tr>
                                    <td class="title-column">Ethnicity</td>
                                    <td class="form-control">@additionalInformation.Ethnicity</td>
                                </tr>
                                <tr>
                                    <td class="title-column">Gender</td>
                                    <td class="form-control">@additionalInformation.Gender</td>
                                </tr>

                            }

                            <tr>
                                <td class="title-column">ID Number</td>
                                <td id="id-number" class="form-control">@personalInformation.IdNumber</td>
                            </tr>
                            <tr>
                                <td class="title-column">Address</td>
                                <td class="form-control" rows="4">@personalInformation.Address </td>
                            </tr>

                        </tbody>
                    </table>
                </div>
            </div>
        }

    }
    else if (personalInformations == null)
    {
        <p>Getting personal information...</p>
    }
}


<!--Work History Modal-->
@if (showWorkHistory)
{
    @if (workHistories != null && selectedCandidate != null)
    {
        @if (workHistories.Where(x => x.AppUserId == selectedCandidate.AppUserId).FirstOrDefault() == null)
        {
            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">Work History: </td>
                                <td class="close-modal" @onclick="toggleWorkHistory">x</td>
                            </tr>
                            <tr></tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="info-empty">Candidate doesn't have any work history.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            List<WorkHistory> workHistory = workHistories.Where(x => x.AppUserId == selectedCandidate.AppUserId).ToList();

            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">Work History: </td>
                                <td class="close-modal" @onclick="toggleWorkHistory">x</td>
                            </tr>
                            <tr></tr>
                        </thead>
                        <tbody>
                            @foreach (var item in workHistory)
                            {
                                <tr class="work-history-card" style="padding-left: 10px">

                                <tr class="grid-container">
                                    <td class="work-history-company-name">@item.CompanyName</td>
                                    <td class="work-history-job-title">@item.JobTitle</td>
                                    <td class="work-history-description">@item.Description</td>
                                    <td class="work-history-date">@($"{item.StartDate:yyyy MMMM} - {item.EndDate:yyyy MMMM}")</td>
                                </tr>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    }
    else if (workHistories == null)
    {
        <p>Getting Work history...</p>
    }
}

<!--Education modal-->

@if (showEducation)
{
    @if (educations != null && selectedCandidate != null)
    {
        @if (educations.Where(x => x.AppUserId == selectedCandidate.AppUserId).FirstOrDefault() == null)
        {
            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">Education: </td>
                                <td class="close-modal" @onclick="toggleEducation">x</td>
                            </tr>
                            <tr></tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="info-empty">Candidate doesn't have any education history.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            List<Education> education = educations.Where(x => x.AppUserId == selectedCandidate.AppUserId).ToList();

            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">Education: </td>
                                <td class="close-modal" @onclick="toggleEducation">x</td>
                            </tr>
                            <tr></tr>
                        </thead>
                        <tbody>
                            @foreach (var item in education)
                            {
                                <tr class="work-history-card" style="padding-left: 10px">

                                <tr class="grid-container">
                                    <td class="work-history-company-name">@item.Qualification</td>
                                    <td class="work-history-job-title"></td>
                                    <td class="work-history-description">@item.Insitution</td>
                                    <td class="work-history-date">@($"{item.StartDate:yyyy MMMM} - {item.EndDate:yyyy MMMM}")</td>
                                </tr>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    }
    else if (educations == null)
    {
        <p>Getting education history...</p>
    }
}

<!--Profile Links modal-->
@if (showPortfolio)
{
    @if (profilePortfolio != null && selectedCandidate != null)
    {

        @if (profilePortfolio.Where(x => x.AppUserId == selectedCandidate.AppUserId).FirstOrDefault() == null)
        {
            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">Education: </td>
                                <td class="close-modal" @onclick="togglePortfolio">x</td>
                            </tr>
                            <tr></tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="info-empty">Candidate doesn't have any portfolio information.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            ProfilePortfolioLink portfolioLinks = profilePortfolio.Where(x => x.AppUserId == selectedCandidate.AppUserId).FirstOrDefault();

            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">Portfolio Links: </td>
                                <td class="close-modal" @onclick="togglePortfolio">x</td>
                            </tr>
                            <tr></tr>
                        </thead>

                        <tbody>
                            <tr class="col-12">
                                <td class="row p-3">
                                <td class="col-6">
                                <td>
                                    <label class="form-label" for="github">Github</label>
                                    &ensp;
                                    <i class="fab fa-github fa-2x"></i>
                                </td>
                                <td id="github" class="form-control shadow bg-body rounded"><a href="@portfolioLinks.GitHubLink">@portfolioLinks.GitHubLink</a></td>
                                </td>
                                <td class="col-6">
                                <td>
                                    <label class="form-label" for="linkedin">LinkedIn</label>
                                    &ensp;
                                    <i class="fab fa-linkedin-in fa-2x" style="color: #0077b5"></i>
                                </td>
                                <td id="linkedin" class="form-control shadow bg-body rounded">
                                    <a href="@portfolioLinks.LinkedInLink">@portfolioLinks.LinkedInLink</a>
                                </td>
                                </td>
                                </td>
                                <td class="row p-3">
                                <td class="col-6">
                                <td>
                                    <label class="form-label" for="twitter">Twitter</label>
                                    &ensp;
                                    <i class="fab fa-twitter-square fa-2x" style="color: #00acee"></i>
                                </td>
                                <td id="twitter" class="form-control shadow bg-body rounded">
                                    <a href="@portfolioLinks.TwitterLink">@portfolioLinks.TwitterLink</a>
                                </td>
                                </td>
                                <td class="col-6">
                                <td>
                                    <label class="form-label" for="personal-website">Personal Website</label>
                                    &ensp;
                                    <i class="fas fa-globe fa-2x" style="color: #35afc0"></i>
                                </td>
                                <td id="personal-website" class="form-control shadow bg-body rounded">
                                    <a href="@portfolioLinks.PersonalWebsiteUrl">@portfolioLinks.PersonalWebsiteUrl</a>
                                </td>
                                </td>

                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        }
    }
    else if (profilePortfolio == null)
    {
        <p>Getting profile links...</p>
    }
}

<!--References Modal-->
@if (showReferences)
{
    @if (references != null && selectedCandidate != null)
    {
        @if (references.Where(x => x.appUserId == selectedCandidate.AppUserId).FirstOrDefault() == null)
        {
            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">References: </td>
                                <td class="close-modal" @onclick="toggleReferences">x</td>
                            </tr>
                            <tr></tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="info-empty">Candidate doesn't have any references.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            List<References> modalReference = references.Where(x => x.appUserId == selectedCandidate.AppUserId).ToList();

            <div class="dimmed">
                <div class="modal-frame">
                    <table>
                        <thead>
                            <tr>
                                <td class="title-modal">References: </td>
                                <td class="close-modal" @onclick="toggleReferences">x</td>
                            </tr>
                            <tr></tr>
                        </thead>
                        <tbody class="work-references-card" style="padding-left: 10px; overflow: hidden">
                            @foreach (var item in modalReference)
                            {
                                <tr class="grid-container-references">
                                    <td class="ref-name">@item.refFirstName  @item.refLastName</td>
                                    <td class="ref-phone">@item.refPhone</td>
                                    <td class="ref-email">@item.refEmail</td>
                                    <td class="ref-relationship">@item.relationship</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    }
    else if (workHistories == null)
    {
        <p>Getting references...</p>
    }
}

<!--ApplicationForm Modal-->
@if (showApplicationForm)
{
    @if (AnswerList != null && QuestionList != null && selectedCandidate != null)
    {
        <div class="dimmed">
            <div class="modal-frame">
                <table>
                    <thead>
                        <tr>
                            <td class="title-modal">Application Form: </td>
                            <td class="close-modal" @onclick="toggleApplicationForm">x</td>
                        </tr>
                        <tr></tr>
                    </thead>
                    <tbody>
                        @foreach (var answer in AnswerList)
                        {
                            @if (answer.appUserId == selectedCandidate.AppUserId)
                            {
                                FormQuestion question = QuestionList.Where(x => x.id == answer.questionnaireHRFormId && answer.appUserId == selectedCandidate.AppUserId).FirstOrDefault();

                                <tr>
                                    <td class="form-label" for="last-name">@question.question</td>
                                    <td id="last-name" class="form-control name">@answer.applicantAnswer</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="dimmed">
            <div class="modal-frame">
                <table>
                    <thead>
                        <tr>
                            <td class="title-modal">Application Form: </td>
                            <td class="close-modal" @onclick="toggleApplicationForm">x</td>
                        </tr>
                        <tr></tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="info-empty">No information saved.</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
}

@code {
    @using XebecPortal.UI.Utils.Handlers;
    @using System.Net.Http.Headers;

    string empty = "  ";
    bool showPersonalInformation = false;
    bool showWorkHistory = false;
    bool showEducation = false;
    bool showPortfolio = false;
    bool showReferences = false;
    bool showApplicationForm = false;
    bool showDocuments = false;

    string currentPhase;

    private List<FormQuestion> QuestionList = new List<FormQuestion>();
    private List<ApplicantAnswer> AnswerList = new List<ApplicantAnswer>();
    private ApplicationModel tempApplication;
    private IList<ApplicationPhaseHelper> tempPhaseHelper;
    private int tempRank;
    private string tempJobTitle;
    private string searchCandidate;
    private ApplicationPhase phaseFinal;
    private string selectedJob = "";
    private string searchTerm = "";
    private CandidateRecommender selectedCandidate;
    private AppUser selectedUser;
    private IList<AppUser> usersFiltered;
    private IList<Job> jobs = new List<Job>();
    private IList<CandidateRecommender> candidates = null;
    private IList<AppUser> users = new List<AppUser>();
    private IList<ApplicationPhaseHelper> phasesHelpers = new List<ApplicationPhaseHelper>();
    private IList<ApplicationModel> applications = new List<ApplicationModel>();
    private IList<ApplicationPhase> phases = new List<ApplicationPhase>();
    private IList<PersonalInformation> personalInformations { get; set; }
    private IList<AdditionalInformation> additionalInformations { get; set; }
    private IList<WorkHistory> workHistories { get; set; }
    private IList<Education> educations { get; set; }
    private IList<ProfilePortfolioLink> profilePortfolio { get; set; }
    private IList<References> references { get; set; }
    private currentPhase phase { get; set; }
    [Parameter] public int JobId { get; set; }

    string token;
    protected override async Task OnInitializedAsync()
    {
        token = await localStorage.GetItemAsync<string>("jwt_token");

        jobs = await httpClient.GetListJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/Job", new AuthenticationHeaderValue("Bearer", token));
        candidates = await httpClient.GetListJsonAsync<List<CandidateRecommender>>("https://xebecapi.azurewebsites.net/api/candidaterecommender", new AuthenticationHeaderValue("Bearer", token));
        personalInformations = await httpClient.GetListJsonAsync<List<PersonalInformation>>("https://xebecapi.azurewebsites.net/api/PersonalInformation", new AuthenticationHeaderValue("Bearer", token));
        additionalInformations = await httpClient.GetListJsonAsync<List<AdditionalInformation>>("https://xebecapi.azurewebsites.net/api/AdditionalInformation", new AuthenticationHeaderValue("Bearer", token));
        workHistories = await httpClient.GetListJsonAsync<List<WorkHistory>>("https://xebecapi.azurewebsites.net/api/WorkHistory", new AuthenticationHeaderValue("Bearer", token));
        educations = await httpClient.GetListJsonAsync<List<Education>>("https://xebecapi.azurewebsites.net/api/Education", new AuthenticationHeaderValue("Bearer", token));
        applications = await httpClient.GetListJsonAsync<List<ApplicationModel>>("https://xebecapi.azurewebsites.net/api/application", new AuthenticationHeaderValue("Bearer", token));
        AnswerList = await httpClient.GetListJsonAsync<List<ApplicantAnswer>>("https://xebecapi.azurewebsites.net/api/ApplicantQuestionnaire", new AuthenticationHeaderValue("Bearer", token));
        QuestionList = await httpClient.GetListJsonAsync<List<FormQuestion>>("https://xebecapi.azurewebsites.net/api/Questionnaire", new AuthenticationHeaderValue("Bearer", token));

        users = await httpClient.GetListJsonAsync<List<AppUser>>("https://xebecapi.azurewebsites.net/api/user", new AuthenticationHeaderValue("Bearer", token));
        phasesHelpers = await httpClient.GetListJsonAsync<List<ApplicationPhaseHelper>>("https://xebecapi.azurewebsites.net/api/ApplicationPhaseHelper", new AuthenticationHeaderValue("Bearer", token));
        applications = await httpClient.GetListJsonAsync<List<ApplicationModel>>("https://xebecapi.azurewebsites.net/api/Application", new AuthenticationHeaderValue("Bearer", token));
        phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/ApplicationPhase", new AuthenticationHeaderValue("Bearer", token));
        profilePortfolio = await httpClient.GetListJsonAsync<List<ProfilePortfolioLink>>("https://xebecapi.azurewebsites.net/api/ProfilePortfolioLink", new AuthenticationHeaderValue("Bearer", token));
        references = await httpClient.GetListJsonAsync<List<References>>("https://xebecapi.azurewebsites.net/api/Reference", new AuthenticationHeaderValue("Bearer", token));

        SetSelectedCandidate(candidates.FirstOrDefault());
    }

    private void SearchCandidate(ChangeEventArgs e)
    {
        searchCandidate = e.Value.ToString();

        usersFiltered = users.Where(x => x.name.ToLower().Contains(searchCandidate.ToLower()) || x.surname.ToLower().Contains(searchCandidate.ToLower())).ToList();
    }

    private void FilterCandidatesByJob()
    {
        GetCandidates();

        candidates = candidates.Where(o => o.jobId == JobId).ToList();
        candidates = candidates.OrderByDescending(o => o.TotalMatch).ToList();
    }

    private async Task GetCandidates()
    {
        candidates = await httpClient.GetListJsonAsync<List<CandidateRecommender>>("https://xebecapi.azurewebsites.net/api/candidaterecommender", new AuthenticationHeaderValue("Bearer", token));
    }

    private void toggleDocuments(AppUser user)
    {
        showDocuments = !showDocuments;
        SetSelectedCandidate(user);
    }

    private void toggleDocuments()
    {
        showDocuments = !showDocuments;
    }

    private void togglePersonalInformations(CandidateRecommender candidate)
    {
        showPersonalInformation = !showPersonalInformation;
        SetSelectedCandidate(candidate);
    }

    private void togglePersonalInformations()
    {
        showPersonalInformation = !showPersonalInformation;
    }

    private void toggleWorkHistory(CandidateRecommender candidate)
    {
        showWorkHistory = !showWorkHistory;
        SetSelectedCandidate(candidate);
    }

    private void toggleWorkHistory()
    {
        showWorkHistory = !showWorkHistory;
    }

    private void toggleEducation(CandidateRecommender candidate)
    {
        showEducation = !showEducation;
        SetSelectedCandidate(candidate);
    }

    private void toggleEducation()
    {
        showEducation = !showEducation;
    }

    private void togglePortfolio(CandidateRecommender candidate)
    {
        showPortfolio = !showPortfolio;
        SetSelectedCandidate(candidate);
    }

    private void togglePortfolio()
    {
        showPortfolio = !showPortfolio;
    }

    private void toggleApplicationForm(CandidateRecommender candidate)
    {
        showApplicationForm = !showApplicationForm;
        SetSelectedCandidate(candidate);
    }

    private void toggleApplicationForm()
    {
        showApplicationForm = !showApplicationForm;
    }

    private void toggleReferences(CandidateRecommender candidate)
    {
        showReferences = !showReferences;
        SetSelectedCandidate(candidate);
    }

    private void toggleReferences()
    {
        showReferences = !showReferences;
    }

    private void AssignApplication(ApplicationModel application)
    {
        tempApplication = application;
    }

    private string FindCurrentPhase(int candidateId, int jobId)
    {
        string phaseDescription = "";

        int applicationId = applications.Where(x => x.JobId == jobId && x.AppUserId == candidateId).FirstOrDefault().Id;

        List<ApplicationPhaseHelper> phases_ = phasesHelpers.Where(x => x.ApplicationId == applicationId).ToList();
        phases_ = phases_.OrderByDescending(x => x.TimeMoved).ToList();

        ApplicationPhaseHelper currentPhase = phases_.FirstOrDefault();

        phaseDescription = phases.Where(x => x.id == currentPhase.ApplicationPhaseId).FirstOrDefault().description;

        return phaseDescription;
    }

    private string SetCurrentPhase()
    {
        @if (phase != null)
        {
            currentPhase = phases.Where(x => x.id == phase.phases.LastOrDefault().applicationPhaseId).FirstOrDefault().description;
        }
        else
        {
            currentPhase = "none";
        }

        return currentPhase;
    }

    private void SetSelectedCandidate(CandidateRecommender candidate)
    {
        if (candidate != null)
            selectedCandidate = candidate;
    }

    private void SetSelectedCandidate(AppUser user)
    {
        if (user != null)
            selectedUser = user;
    }

    private object GetPillStyle(CandidateRecommender candidate)
    {
        double totalMatch = candidate.TotalMatch;
        if (totalMatch <= 30)
            return "background: #ff5201; color: rgba(0, 0, 0, 0.35)";
        else if (totalMatch <= 40)
            return "background: #ff8401; color: rgba(0, 0, 0, 0.35)";
        else if (totalMatch <= 50)
            return "background: #ff9d01; color: rgba(0, 0, 0, 0.35)";
        else if (totalMatch <= 60)
            return "background: #ffbc01; color: rgba(0, 0, 0, 0.35)";
        else if (totalMatch <= 70)
            return "background: #ffd401; color: rgba(0, 0, 0, 0.35)";
        else if (totalMatch <= 80)
            return "background: #ebff01; color: rgba(0, 0, 0, 0.35)";
        else if (totalMatch <= 90)
            return "background: #baff01; color: rgba(0, 0, 0, 0.35)";
        else if (totalMatch <= 100)
            return "background: #05ff01; color: rgba(0, 0, 0, 0.35)";

        return "";
    }

    private object GetStyle(CandidateRecommender candidate)
    {
        if (selectedCandidate == candidate)
            return "border-left: 5px solid #00bcae;";
        return "";
    }

}