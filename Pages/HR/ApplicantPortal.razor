@page "/applicantportal"
@using XebecPortal.UI.Services.Models
@using XebecPortal.UI.Interfaces
@using Bogus
@using XebecPortal.UI.Pages.Applicant
@using XebecPortal.UI.Service_Interfaces
@using XebecPortal.UI.Services.MockServices
@inject IApplicantDataService _applicantDataService
@inject IMyJobListDataService _myJobListDataService
@inject IApplicationPhaseHelperDataService _phaseHelperDataService
@inject IPhaseDataService _phaseDataService
@inject IStatusDataService _statusDataService
@inject HttpClient _httpClient
<style>
     
*{
    font-family: 'Open Sans', sans-serif;
}
.container-main {
     width: 100vw;
     min-height: calc(90vh - 20px);
     margin: 0;
     display: grid;
     grid-template-columns: 1fr 0.2fr 1.8fr 1fr;
     grid-template-rows: repeat(2, 1fr);
     grid-auto-flow: row;
     grid-gap: 10px;
     padding: 5px;
     overflow: auto;
     /*background: #dde1eb;*/
     
 }

 .container-main > div {
    background: #fff;
    border-radius: 10px;
    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;
 }

 .candidate-section {
     display: grid;
     grid-template-columns: 1fr;
     grid-template-rows: 10% 1fr;
     grid-auto-flow: row;
     grid-area: 1 / 1 / 3 / 3;
     grid-gap: 10px;
     padding: 5px;
     background: transparent !important;
 }

 .candidate-section > div {
     background: #fff;
     border-radius: 10px;
 }

 /*filter plane styling - start*/
 .filter-plane {
     display: grid;
     grid-template-columns: repeat(1, 1fr);
     grid-template-rows: repeat(1, 1fr);
     grid-auto-flow: row;
 }

 .filter-plane-heading {
     grid-area: 1 / 1 /  span 1/ span 1;
     text-align: center;
     font-weight: 900;
 }

 /*.filter-plane-search-bar {*/
 /*    grid-area: 2 / 1 / span 1 / span 2;*/
 /*}*/

 /*filter plane styling - end*/

 /*Candidate list styling - start*/
 .candidate-list {
     grid-area: 2 / 1 / 3 / 2;
     display: grid;
     grid-auto-rows: 15%;
     grid-template-columns: 1fr;
     grid-gap: 10px;
     overflow-y: auto;
 }


 .candidate-list > div {
     box-shadow: rgba(60, 64, 67, 0.3) 0 1px 2px 0, rgba(60, 64, 67, 0.15) 0 1px 3px 1px; 
 }


 .candidate-card {
     display: grid;
     grid-template-columns: 28% 69%;
     grid-template-rows: 1fr;
     grid-column-gap: 2px;
     
 }

 .candidate-card .profile-picture {
     border: none !important;
     border-radius: 0 !important;
     grid-area: 1 / 1 / 2 / 2;
     display: flex;
     align-items: center;
     justify-content: center;
 }

 .candidate-card .profile-picture img {
     height: 7vh;
     width: 7vh;
     border-radius: 50%;
     box-shadow: rgba(6, 24, 44, 0.4) 0 0 0 2px, rgba(6, 24, 44, 0.65) 0 4px 6px -1px, rgba(255, 255, 255, 0.08) 0 1px 0 inset;
 }

 .candidate-card .candidate-details {
     grid-area: 1 / 2 / 2 / 3;
     
     height: 100%;
     width: 100%;
     padding: 5px;
     
 }

.candidate-card .candidate-details .name{
    font-weight: 800;
    line-height: 3vh;
    font-size: 3vh;

}
.candidate-card .candidate-details .job{
    line-height: 2vh;
    font-size: 1.5vh;
    font-weight: 400;
}
.candidate-card .candidate-details .phase{
    line-height: 1vh;
    font-size: 1vh;
    font-weight: 500;
}

 /*Candidate list styling - start*/

 /*Jobs Section Start*/
 .jobs-section {
     grid-area: 1 / 3 / 2 / 5;
     padding: 10px;
 }
 .jobs-section tbody {
        display: block;
        height: 30vh !important;
        overflow: auto;
    }
  .jobs-section  thead, tbody tr {
        display: table;
        width: 100%;
        table-layout: fixed;
        border-radius: 0 0 10px 10px;
    }
   
 .jobs-section  thead{
      border-radius: 10px 10px 0 0;
   }
 .jobs-section  tbody{
      border-radius: 0;
   }
 .jobs-section  th:hover{
     cursor: pointer;
   }
 .jobs-section  .btn-primary{
     background: #00bcae;
   }
   /*Jobs Section end*/

 .profile-section {
     grid-area: 2 / 3 / 3 / 5;
     padding: 10px;
 }
</style>

<link rel="stylesheet" href="style.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" rel="stylesheet">
<div class="container-main">
    <div class="candidate-section">
        <div class="filter-plane">
            <h1 class="filter-plane-heading">
                Candidates
            </h1>
        </div>
        <div class="candidate-list">
            @if (_applicants != null)
            {
                Console.WriteLine("We have applicants");
                foreach (var applicant in _applicants)
                {
                    var applicationPhaseHelpers = _map[applicant];
                    Console.WriteLine($">>>>>>>>Applicant Portal : applicant id:{applicant.Id} has {applicationPhaseHelpers.Count} phase helpers!");
                    //var applicationPhaseHelpers = _httpClient.GetFromJsonAsync<List<ApplicationPhaseHelper>>($"https://xebecapi.azurewebsites.net/api/ApplicationPhaseHelper/UserId={FocusApplicant.Id}").Result;
                    //Todo: application must not be null && get the last job
                    //var lastJob = new JobModel(){ Title = "N/A no application",Department = "N/A no application"};
                    if (applicationPhaseHelpers != null && applicationPhaseHelpers.Any())
                    {
                        //lastJob = applicationPhaseHelpers[applicationPhaseHelpers.Count() - 1].Application.Job;
                    }
                    KeyValuePair<Applicant, List<ApplicationPhaseHelper>> applicantPair = new KeyValuePair<Applicant, List<ApplicationPhaseHelper>>(applicant, applicationPhaseHelpers);

                    <div class="candidate-card" @onclick="() => ShowApplicant(applicantPair)">
                        <div class="profile-picture">
                            <img src="@applicant.Avatar" alt="Avatar">
                        </div>
                        <div class="candidate-details">
                            <span class="name">@($"{applicant.FirstName} {applicant.LastName}")</span>
                            @* <br> *@
                            @* <span class="job">@lastJob.Title</span> *@
                            @* <br> *@
                            @* <span class="phase-pill" style="@(GetColor(applicant.Phase))">@lastJob.JobPhases</span> *@
                        </div>
                    </div>
                }
            }
            else
            {
                <p>Please wait whilst we get all Applicants</p>
            }
        </div>
    </div>
    <div class="jobs-section">
        <!-- table-->
        @if (FocusApplicant != null)
        {
            <span class="this-personal-detail">Job Applications </span>
            <span>@($"{FocusApplicant.FirstName} {FocusApplicant.LastName}")</span>
            List<ApplicationPhaseHelper> assPhaseHelpers = _map[FocusApplicant];
            ApplicationPhaseHelper cstPhaseHelper = assPhaseHelpers.Find(p => (p.ApplicationPhaseId == (int) PhaseEnum.Testing || p.ApplicationPhase.PhaseEnum == PhaseEnum.Testing || p.ApplicationPhase.Description.ToLower().Contains("test")));
            if (cstPhaseHelper == null)
            {
                cstPhaseHelper = new ApplicationPhaseHelper
                {
                    Rating = -1,
                    Comments = "N/A - no test submitted",
                    ApplicationPhase = new AppPhase {Description = "N/A - no test submitted"},
                    TimeMoved = DateTime.Now,
                    ApplicationId = (int) PhaseEnum.Testing
                };
            }
            ApplicationPhaseHelper intPhaseHelper = assPhaseHelpers.Find(p => (p.ApplicationPhaseId == (int) PhaseEnum.InterviewHr || p.ApplicationPhase.PhaseEnum == PhaseEnum.InterviewHr || p.ApplicationPhase.Description.ToLower().Contains("inter")));
            if (intPhaseHelper == null)
            {
                intPhaseHelper = new ApplicationPhaseHelper
                {
                    Id = -1,
                    Rating = -1,
                    Comments = "N/A - no interview",
                    ApplicationPhase = new AppPhase {Description = "N/A - no interview"},
                    TimeMoved = DateTime.Now
                };
            }
            //KeyValuePair<Applicant, List<ApplicationPhaseHelper>> entry = GetEntry(map, FocusApplicant);
            <table id="example" class="table table-striped bg-white">
                <thead style="background: #00bcae;">
                <tr style="color:#fff;" class="col-12">
                    <th>#</th>
                    <th>Job</th>
                    <th>Current Phase</th>
                    <th>CST Mark</th>
                    <th>CST Comment</th>
                    <th>Int. Rating</th>
                    <th>Int. Rating</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @for (var index = 0; index < assPhaseHelpers.Count; index++)
                {
                    var applicationPhaseHelper = assPhaseHelpers[index];

                    <tr class="col-12">
                        <td>@index</td>
                        <td>@applicationPhaseHelper.Application.Job.Title</td>
                        <td>@cstPhaseHelper.Rating</td>
                        <td>@cstPhaseHelper.Comments</td>


                        @if (helperToChange.Application.Id != applicationPhaseHelper.Application.Job.Id)
                        {
                            <td>@applicationPhaseHelper.ApplicationPhase.Description</td>
                            <td>@(intPhaseHelper.Rating)%</td>
                            <td>@(intPhaseHelper.Comments)</td>
                        }
                        else
                        {
                            <td >
                                @* <input type="text" class="form-control" @bind="newHelper.Phase"> *@
                                <select @bind=@applicationPhaseHelper.ApplicationPhaseId>
                                    @foreach (int phaseId in Enum.GetValues(typeof(PhaseEnum)))
                                    {
                                        <option value="@phaseId">@_phaseDataService.GeApplicationPhaseById(phaseId).Description</option>
                                    }
                                </select>
                            </td>
                            <td >
                                <input type="number" class="form-control" @bind=@applicationPhaseHelper.Rating>
                            </td>
                            <td >
                                <input type="text" class="form-control" @bind=@applicationPhaseHelper.Comments>
                            </td>
                        }
                        <td>
                            @if (applicationPhaseHelper != helperToChange)
                            {
                                <button type="button" class="btn btn-primary btn-xs dt-edit" style="margin-right:16px;" @onclick="() => Edit(applicationPhaseHelper, intPhaseHelper, cstPhaseHelper)">
                                    <i class="fas fa-pen"></i>
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-primary btn-xs dt-edit" style="margin-right:16px;" @onclick="() => Save(applicationPhaseHelper)">
                                    <i class="fas fa-save"></i>
                                </button>
                                <button type="button" class="btn btn-primary btn-xs dt-edit" style="margin-right:16px;" @onclick="CancelEdit">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
    <div class="profile-section">
        <ApplicantProfile Applicant=@FocusApplicant></ApplicantProfile>
    </div>
</div>


@code {
    Dictionary<Applicant, List<ApplicationPhaseHelper>> _map = new();
    List<Applicant> _applicants;
    public HttpClient altClient;
    public KeyValuePair<Applicant, List<ApplicationPhaseHelper>> focusPair = new();
    public Applicant FocusApplicant { get; set; }
    public List<AppPhase> _appPhases;
    public List<AppStatus> _statues;
    public List<ApplicationPhaseHelper> FocuApplicationPhaseHelpers { get; set; }
    ApplicationPhaseHelper helperToChange = new ApplicationPhaseHelper
    {
        Application = new Services.Models.Application()
    };

    protected override async Task OnInitializedAsync()
    {
        //Console.WriteLine($">>>>>>>>Applicant Portal OnInitialized");
        _applicants = (await _applicantDataService.GetAllApplicants()).OrderBy(a => a.Id).ToList();

        if (_applicants != null)
        {
            if (_applicants.Any())
            {
                Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = setting focus applicant");
                FocusApplicant = _applicants[0];
            }
            Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = Associating map");
            _map = AssociateApplicantsToJobs(_applicants);
            if (_map != null)
            {
                Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = Associating map > Done!!!");
                Console.WriteLine();
                Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = Creating Focus Value pair");
                focusPair = _map.FirstOrDefault(a => _applicants.FirstOrDefault(a => a.Id > -1) == a.Key);
                Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = Creating Focus Value pair> Done!!!");
                Console.WriteLine();
            }
        }
            
            _appPhases = _phaseDataService.GetApplicationPhases().OrderBy(p => p.Id).ToList();
            _statues = _statusDataService.GetAllStatuses().Result.OrderBy(s => s.Id).ToList();
        }

        public  Dictionary<Applicant, List<ApplicationPhaseHelper>> AssociateApplicantsToJobs(List<Applicant> applicants)
        {
            Dictionary<Applicant, List<ApplicationPhaseHelper>> tempMap = new Dictionary<Applicant, List<ApplicationPhaseHelper>>();

            foreach (var app in applicants)
            {
                List<ApplicationPhaseHelper> temp = _phaseHelperDataService.GetAssApplicationPhaseHelpers(app, _applicants);
                tempMap.Add(app, temp);
            }
            return tempMap;
        }

        public void ShowApplicant(KeyValuePair<Applicant, List<ApplicationPhaseHelper>> applicantPair)
        {
            focusPair = applicantPair;
            FocusApplicant = focusPair.Key;
        }

        public void Edit(ApplicationPhaseHelper applicationPhaseHelper, ApplicationPhaseHelper intPhaseHelper, ApplicationPhaseHelper cstPhaseHelper)
        {
            helperToChange = applicationPhaseHelper;
            if (intPhaseHelper.Id == -1 && applicationPhaseHelper.ApplicationPhase.Description.ToLower().Contains("int"))
            {
    //Todo
            }
            else if (intPhaseHelper.Id == -1 && !applicationPhaseHelper.ApplicationPhase.Description.ToLower().Contains("int"))
            {
    //todo
            }
        }

        public void Save(ApplicationPhaseHelper applicationPhaseHelper)
        {
            throw new NotImplementedException();
        }

        void CancelEdit()
        {
            throw new NotImplementedException();
        }
    }

}