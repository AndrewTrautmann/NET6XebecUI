@page "/applicantportal"
@using XebecPortal.UI.Services.Models
@using XebecPortal.UI.Interfaces
@using Bogus
@using XebecPortal.UI.Pages.Applicant
@using XebecPortal.UI.Service_Interfaces
@using XebecPortal.UI.Services.MockServices
@inject IApplicantDataService _applicantDataService
@inject IMyJobListDataService _myJobListDataService
@inject IApplicationPhaseHelperDataService _phaseHelperDataService
@inject IPhaseDataService _phaseDataService
@inject IStatusDataService _statusDataService
@inject HttpClient _httpClient

<style>
     
*{
    font-family: 'Open Sans', sans-serif;
}
.container-main {
     width: 100vw;
     min-height: calc(90vh - 20px);
     margin: 0;
     display: grid;
     grid-template-columns: 1fr 0.2fr 1.8fr 1fr;
     grid-template-rows: repeat(2, 1fr);
     grid-auto-flow: row;
     grid-gap: 10px;
     padding: 5px;
     overflow: auto;
     /*background: #dde1eb;*/
     
 }

 .container-main > div {
    background: #fff;
    border-radius: 10px;
    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;
 }

 .candidate-section {
     display: grid;
     grid-template-columns: 1fr;
     grid-template-rows: 10% 1fr;
     grid-auto-flow: row;
     grid-area: 1 / 1 / 3 / 3;
     grid-gap: 10px;
     padding: 5px;
     background: transparent !important;
 }

 .candidate-section > div {
     background: #fff;
     border-radius: 10px;
 }

 /*filter plane styling - start*/
 .filter-plane {
     display: grid;
     grid-template-columns: repeat(1, 1fr);
     grid-template-rows: repeat(1, 1fr);
     grid-auto-flow: row;
 }

 .filter-plane-heading {
     grid-area: 1 / 1 /  span 1/ span 1;
     text-align: center;
     font-weight: 900;
 }

 /*.filter-plane-search-bar {*/
 /*    grid-area: 2 / 1 / span 1 / span 2;*/
 /*}*/

 /*filter plane styling - end*/

 /*Candidate list styling - start*/
 .candidate-list {
     grid-area: 2 / 1 / 3 / 2;
     display: grid;
     grid-auto-rows: 15%;
     grid-template-columns: 1fr;
     grid-gap: 10px;
     overflow-y: auto;
     /*background: transparent !important;*/
 }


 .candidate-list > div {
     box-shadow: rgba(60, 64, 67, 0.3) 0 1px 2px 0, rgba(60, 64, 67, 0.15) 0 1px 3px 1px; 
     background: white !important;
 }


 .candidate-card {
     display: grid;
     grid-template-columns: 28% 69%;
     grid-template-rows: 1fr;
     grid-column-gap: 2px;
     cursor: pointer;
 }

 .candidate-card .profile-picture {
     border: none !important;
     border-radius: 0 !important;
     grid-area: 1 / 1 / 2 / 2;
     display: flex;
     align-items: center;
     justify-content: center;
 }

 .candidate-card .profile-picture img {
     height: 7vh;
     width: 7vh;
     border-radius: 50%;
     box-shadow: rgba(6, 24, 44, 0.4) 0 0 0 2px, rgba(6, 24, 44, 0.65) 0 4px 6px -1px, rgba(255, 255, 255, 0.08) 0 1px 0 inset;
 }

 .candidate-card .candidate-details {
     grid-area: 1 / 2 / 2 / 3;
     height: 100%;
     width: calc(100% - 16px);
     padding: 5px;
     
 }

.candidate-card .candidate-details .name{
    font-weight: 800;
    line-height: 3vh;
    font-size: 3vh;

}
.candidate-card .candidate-details .job{
    line-height: 2vh;
    font-size: 1.5vh;
    font-weight: 400;
}
.candidate-card .candidate-details .phase{
    line-height: 1vh;
    font-size: 1vh;
    font-weight: 500;
}

 /*Candidate list styling - start*/

 /*Jobs Section Start*/
 .jobs-section tbody {
        display: block;
        height: 30vh !important;
        overflow: auto;
    }
  .jobs-section  thead, tbody tr {
        display: table;
        width: 100%;
        table-layout: fixed;
        border-radius: 0 0 10px 10px;
    }
   
 .jobs-section  thead{
      border-radius: 10px 10px 0 0;
   }
 .jobs-section  tbody{
      border-radius: 0;
   }
 .jobs-section  th:hover{
     cursor: pointer;
   }
 .jobs-section  .btn-primary{
     background: #00bcae;
   }
   /*Jobs Section end*/

 .profile-section {
     grid-area: 1 / 3 / 4 / 5;
     padding: 10px;
 }
 
 .col-1 {
         max-width: 8.33%;
     }
 
     .col-2 {
         max-width: 16.67%;
     }
 
     .col-3 {
         min-width: 25%;
         max-width: 25%;
     }
 
     .col-12 {
         min-width: 100%;
     }
 
     .col-small {
         width: 4.5%;
     }
     /* Chrome, Safari, Edge, Opera */
     input[type=number]::-webkit-outer-spin-button,
     input[type=number]::-webkit-inner-spin-button {
       -webkit-appearance: none;
       margin: 0;
     }
     
     /* Firefox */
     input[type=number] {
       -moz-appearance: textfield;
     }
</style>

<link rel="stylesheet" href="style.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" rel="stylesheet">
<div class="container-main">
    <div class="candidate-section">
        <div class="filter-plane">
            <h1 class="filter-plane-heading">
                Candidates
            </h1>
        </div>
        <div class="candidate-list">
            @if (_applicants != null && _map != null)
            {
                //todo remove
                Random r = new Random();

                //Console.WriteLine("We have applicants");
                foreach (var applicant in _applicants)
                {
                    var applicationPhaseHelpers = _map[applicant];
                    // Console.WriteLine($">>>>>>>> line 204 Applicant Portal : applicant id:{applicant.Id} has {applicationPhaseHelpers.Count} phase helpers!");
                    //var applicationPhaseHelpers = _httpClient.GetFromJsonAsync<List<ApplicationPhaseHelper>>($"https://xebecapi.azurewebsites.net/api/ApplicationPhaseHelper/UserId={FocusApplicant.Id}").Result;
                    //Todo: application must not be null && get the last job
                    //var lastJob = new JobModel(){ Title = "N/A no application",Department = "N/A no application"};
                    var lastHelper = GetLatestHelper(_map[applicant]);
                    if (lastHelper == null)
                    {
                        lastHelper = _phaseHelperDataService.GetEmptyHelper();
                    }
                    KeyValuePair<Applicant, List<ApplicationPhaseHelper>> applicantPair = new KeyValuePair<Applicant, List<ApplicationPhaseHelper>>(applicant, applicationPhaseHelpers);
                    var phase = _phaseDataService.GeApplicationPhaseById(lastHelper.ApplicationPhaseId);

                    <div class="candidate-card" @onclick="() => ShowApplicant(applicantPair)" style="@(GetStyle(applicant))">
                        <div class="profile-picture">
                            <img src="@applicant.Avatar" alt="Avatar">
                        </div>
                        <div class="candidate-details">
                            <span class="name">@($"{applicant.FirstName} {applicant.LastName}")</span>
                            <br>
                            
                            @if ((lastHelper != null) && (lastHelper.Application == null || lastHelper.Id == -1 || lastHelper.Application.Job == null))
                            {
                                //Console.WriteLine("Sila");
                                <span class="job">Db error: applicant has no associated job</span>
                                <br>
                                //<span class="phase-pill" style="@(GetColor(lastHelper.ApplicationPhase.Description))">@lastHelper.ApplicationPhase.Description</span>
                            }
                            else if((lastHelper != null) )
                            {
                                Console.WriteLine("Sila");
                                <span class="job">@lastHelper.Application.Job.Title</span>
                                <br>
                                <span class="phase-pill" style="@(GetColor(phase.Description))">@phase.Description</span>
                            }
                            @* <br> *@
                            @* <span class="phase-pill" style="@(GetColor(applicant.Phase))">@lastJob.JobPhases</span> *@


                        </div>
                    </div>
                }
            }
            else
            {
                <p>Please wait whilst we get all Applicants</p>
            }
        </div>
    </div>
    
    <div class="profile-section">
        <ApplicantProfile Applicant=@FocusApplicant></ApplicantProfile>
    </div>
</div>


@code {
    Dictionary<Applicant, List<ApplicationPhaseHelper>> _map = new();
    List<Applicant> _applicants;
    public HttpClient altClient;
    public KeyValuePair<Applicant, List<ApplicationPhaseHelper>> focusPair = new();
    public Applicant FocusApplicant { get; set; }
    public List<AppPhase> _appPhases;
    public List<AppStatus> _statues;
    public List<ApplicationPhaseHelper> FocuApplicationPhaseHelpers { get; set; }

    ApplicationPhaseHelper helperToChange = new();

    protected override async Task OnInitializedAsync()
    {
    //Console.WriteLine($">>>>>>>>Applicant Portal OnInitialized");
        _applicants = (await _applicantDataService.GetAllApplicants()).OrderBy(a => a.Id).ToList();

        if (_applicants != null)
        {
            if (_applicants.Any())
            {
    //Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = setting focus applicant");
                FocusApplicant = _applicants[0];
            }
    //Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = Associating map");
            _map = await AssociateApplicantsToJobs(_applicants);
            if (_map != null)
            {
    //Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = Associating map > Done!!!");
    //Console.WriteLine();
    //Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = Creating Focus Value pair");
                focusPair = _map.FirstOrDefault(a => _applicants.FirstOrDefault(a => a.Id > -1) == a.Key);
    //Console.WriteLine($">>>>>>>>Applicant Portal :OnInitialized = Creating Focus Value pair> Done!!!");
    //Console.WriteLine();
            }
            Task.WaitAll();
        }

        _appPhases = _phaseDataService.GetApplicationPhases().OrderBy(p => p.Id).ToList();
        _statues = _statusDataService.GetAllStatuses().Result.OrderBy(s => s.Id).ToList();
    }

    public async Task<Dictionary<Applicant, List<ApplicationPhaseHelper>>> AssociateApplicantsToJobs(List<Applicant> applicants)
    {
        Dictionary<Applicant, List<ApplicationPhaseHelper>> tempMap = new Dictionary<Applicant, List<ApplicationPhaseHelper>>();

        foreach (var app in applicants)
        {
            List<ApplicationPhaseHelper> temp = (await _phaseHelperDataService.GetAssApplicationPhaseHelpers(app, _applicants));
            //Console.WriteLine($">>>>>>>>Applicant Portal :AssociateApplicantsToJobs = tempMap.Add({app.Id}, count: {temp.Count});");
            tempMap.Add(app, temp);
        }
        return tempMap;
    }

    public void ShowApplicant(KeyValuePair<Applicant, List<ApplicationPhaseHelper>> applicantPair)
    {
        focusPair = applicantPair;
        FocusApplicant = focusPair.Key;
    }

    public void Save(ApplicationPhaseHelper applicationPhaseHelper, ApplicationPhaseHelper intPhaseHelper, ApplicationPhaseHelper cstPhaseHelper)
    {
    //if current helper is null or (ass helper is null or empty)
    //.add Method
    //..1 in backend helpers a new helper
    //..2 get updated list

    //current phase == new phase (phase helper.Application.Phase
    //.put phase changes
    //..1 find phase 
    //..2 change properties
    }

    private void Edit(ApplicationPhaseHelper applicationPhaseHelper)
    {
        Console.WriteLine("Inside Edit");

        if (applicationPhaseHelper == null)
        {
            Console.WriteLine("application helper is null.");
            applicationPhaseHelper = new ApplicationPhaseHelper();
        }
        helperToChange = applicationPhaseHelper;
    }

    private ApplicationPhaseHelper GetLatestHelper(List<ApplicationPhaseHelper> helpers)
    {
        var date = DateTime.MinValue;
        var tempHelper = helpers.FirstOrDefault();
        foreach (var helper in helpers)
        {
            if (date < helper.TimeMoved)
            {
                date = helper.TimeMoved;
                tempHelper = helper;
            }
        }
        return tempHelper;
    }

    private void Cancel()
    {
        Console.WriteLine("canceling");
        helperToChange = new ApplicationPhaseHelper();
    }

    private string GetColor(string applicationPhase)
    {
        string bg_colour;
        string text_colour;

        if (Enum.GetName(PhaseEnum.Application).Equals(applicationPhase))
        {
            bg_colour = "rgba(9, 71, 111, 0.22)";
            text_colour = "rgba(9, 71, 111, 1)";
        }
        else if (Enum.GetName(PhaseEnum.Testing).Equals(applicationPhase))
        {
            bg_colour = "rgba(11, 28, 72, 0.22)";
            text_colour = "rgba(11, 28, 72, 1)";
        }
        else if (Enum.GetName(PhaseEnum.InterviewStaff).Equals(applicationPhase, StringComparison.OrdinalIgnoreCase))
        {
            bg_colour = "rgba(0, 155, 174, 0.22)";
            text_colour = "rgba(0, 155, 174, 1)";
        }
    // ReSharper disable once PossibleNullReferenceException
        else if (Enum.GetName(PhaseEnum.InterviewHr).Equals(applicationPhase))
        {
            bg_colour = "rgba(131, 97, 67, 0.22)";
            text_colour = "rgba(131, 97, 67, 1)";
        }
        else if (Enum.GetName(PhaseEnum.InterviewCeo).Equals(applicationPhase))
        {
            bg_colour = "rgba(224, 213, 204, 0.22)";
            text_colour = "rgba(131, 97, 67, 1)";
        }
        else if (Enum.GetName(PhaseEnum.Offer).Equals(applicationPhase))
        {
            bg_colour = "rgba(0, 188, 80, 0.22)";
            text_colour = "rgba(0, 188, 80, 1)";
        }
        else if (Enum.GetName(PhaseEnum.Screening).Equals(applicationPhase))
        {
            bg_colour = "rgba(0, 108, 188, 0.22)";
            text_colour = "rgba(0, 108, 188, 1)";
        }
        else if (applicationPhase.ToLower().Contains("error"))
        {
            bg_colour = "rgba(255, 37, 17, 1)";
            text_colour = "rgba(47, 36, 64, 1)";
        }
        else
        {
            bg_colour = "rgba(94,93,240,0.22)";
            text_colour = "rgba(94,93,240,1)";
        }
        return $"background: {bg_colour}; color: {text_colour}; box-shadow: {text_colour} 0 10px 20px -10px;";
    }

    private object GetStyle(Applicant applicant)
    {
        if (focusPair.Key == applicant)
            return "border-left: 5px solid #00bcae;";
        return "";
    }

}

}