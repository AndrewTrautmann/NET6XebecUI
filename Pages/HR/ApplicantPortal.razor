@page "/applicantportal"
@using XebecPortal.UI.Services.Models
@inject HttpClient httpClient
@inject HrJobState hrJobState
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>

    .page-top {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 15px;
    }

    .table-applicants-container {
        display: flex;
        align-items: center;
        flex-direction: column;
        height: 60vh;
    }

        .table-applicants-container td {
            text-align: center;
        }

        .table-applicants-container table {
            width: 95%;
        }

        .table-applicants-container thead tr {
            height: 7vh;
            background: #00bcae;
            color: white;
            font-weight: 800;
            font-family: opensans-condensed-bold;
            font-size: 1em;
        }

        .table-applicants-container tbody tr {
            border-bottom: 1px solid #e2e2e2;
            height: 9vh;
            background: #fff;
        }

        .table-applicants-container tbody {
            display: block;
            height: 53vh;
            overflow: auto;
        }

        .table-applicants-container thead, tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

        .table-applicants-container tr:first-child td:first-child {
            border-top-left-radius: 10px;
        }

        .table-applicants-container tr:first-child td:last-child {
            border-top-right-radius: 10px;
        }

        .table-applicants-container img {
            height: 7vh;
            width: 7vh;
        }

    .dimmed {
        background: rgb(0 0 0 / 0.20);
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-frame {
        width: 35%;
        height: 48%;
        border-radius: 15px;
        background: white;
        position: relative;
        /*overflow-y: auto;*/
    }

        .modal-frame thead, tbody tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }

    .close-modal {
        font-size: 30px;
        font-weight: bold;
        color: white;
        text-align: right;
        padding-bottom: 10px;
        padding-right: 30px;
        width: 20px;
        overflow: hidden !important;
    }

        .close-modal:hover {
            color: #d35bc9;
            cursor: pointer;
        }

    .title-column {
        font-weight: 600;
    }

    .title-modal {
        font-size: 20px;
    }

    .modal-frame thead td {
        font-weight: bold;
        background: #00bcae;
        color: white;
    }

        .modal-frame thead td:first-child {
            border-top-left-radius: 15px;
        }

        .modal-frame thead td:last-child {
            border-top-right-radius: 15px;
        }

    .modal-frame td {
        margin-bottom: 5px;
        margin-top: 5px;
        padding-left: 10px;
        overflow-x: auto;
    }

    .info-empty {
        color: #ec0f0f;
    }

    .modal-frame tbody {
        display: block;
        height: 38vh;
        overflow-y: auto;
        overflow-x: hidden;
        padding-right: 10px;
        padding-bottom: 5px;
    }

    .show-more-td {
        font-weight: 600;
    }

        .show-more-td:hover {
            cursor: pointer;
            color: #d35bc9;
        }


    .work-history-card {
        height: 20vh !important;
        width: 65vh;
        background: white;
        border-radius: 15px;
        box-shadow: 0 0 5px 5px #dddddd;
        margin-top: 10px;
        margin-left: 35px;
    }

    .work-references-card {
        height: 10vh !important;
        width: 65vh;
        background: white;
        border-radius: 15px;
        box-shadow: 0 0 5px 5px #dddddd;
        margin-top: 10px;
        margin-left: 35px;
        overflow: hidden;
    }

    .work-history-company-name {
        grid-area: companyName;
        font-weight: bold;
        text-align: left;
    }

    .work-history-job-title {
        grid-area: jobTitle;
        text-align: left;
        font-weight: 600;
        color: #414141
    }

    .work-history-date {
        grid-area: date;
        text-align: right;
        color: #d35bc9;
    }

    .work-history-description {
        grid-area: description;
    }

    .grid-container {
        display: grid;
        height: 100%;
        grid-template-areas:
            'companyName companyName companyName companyName'
            'jobTitle jobTitle jobTitle jobTitle'
            'description description description description'
            'date date date date';
        padding: 10px;
    }

    .ref-name {
        grid-area: name;
        font-weight: bold;
    }

    .ref-lastname {
        grid-area: lastname;
    }

    .ref-phone {
        grid-area: phone;
    }

    .ref-email {
        grid-area: email;
        text-align: right;
    }

    .ref-relationship {
        grid-area: relationship;
        text-align: right;
        font-weight: bold;
    }

    .grid-container-references {
        display: grid;
        grid-template-areas:
            'name name relationship relationship'
            'phone phone email email';
        padding: 10px;
    }

    .total-match-pill {
        margin-top: 30px;
        width: 50px;
        height: 20px;
        border-radius: 1em;
        font-weight: bold;
        border-color: #2f2f2f;
        text-align: center;
    }

    .loading-icon {
        margin-top: 150px;
    }

    .btn-view-documents {
        height: 7vh;
        width: 70%;
        border-radius: 2em;
        border: none;
        color: white;
        background-color: #00BCAE;
        font-weight: 700;
        font-weight: bold;
    }

    .btn-view-document {
        height: 5%;
        width: 10%;
        border-radius: 2em;
        border: none;
        color: white;
        background-color: #00BCAE;
        font-weight: 700;
        font-weight: bold;
    }

    .modal-frame-documents {
        height: 85%;
        width: 65%;
        border-radius: 1em;
        background-color: white;
        display: flex;
        justify-content: space-evenly;
        align-content: space-evenly;
        flex-direction: column;
    }

    .modal-frame-documents-rows {
        display: flex;
        justify-content: space-evenly;
        align-content: space-evenly;
    }

        .modal-frame-documents-rows .mini-modal-frame-documents img {
            height: 80%;
            width: 80%;
            margin-top: 10px;
        }

    .mini-modal-frame-documents {
        height: 25vh;
        width: 16vw;
        border-radius: 1em;
        background-color: white;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

        .mini-modal-frame-documents:hover {
            height: 25vh;
            width: 16vw;
            border-radius: 1em;
            background-color: white;
            box-shadow: 0 4px 8px 0 #00bcae, 0 6px 20px 0 #00bcae;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            cursor: pointer;
        }

    .img-document-profile {
        height: 80px;
        width: 80px;
    }

    .img-document {
        height: 60%;
        width: 90%;
    }

    .modal-document-header {
        display: flex;
        justify-content: right;
    }

    .modal-document-profile {
        display: flex;
        flex-direction: column;
        margin-right: 4%;
    }

        .modal-document-profile img {
            width: 90px;
            height: 90px;
        }


    a:hover {
        cursor: pointer;
    }

    .img-magnified {
        height: 90vh;
        width: 40vw;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background: white;
        border-radius: 1em;
    }

        .img-magnified img {
            width: 90%;
            height: 90%;
        }

    .myjob-search-bar {
        width: 40%;
        height: 5vh;
        margin-bottom: 2.5vh;
        margin-top: 2.5vh;
        margin-left: 30%;
        margin-right: 30%;
    }

    .search-image {
        padding-left: 2em;
        background: url(/Img/search.svg) no-repeat left;
        background-size: 30px;
    }

    .hr-job-search-bar-input {
        padding-left: 3em;
        background-color: white;
        height: 6vh;
        width: 100%;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,0.2), 0 2px 10px 0 rgba(0,0,0,0.2);
        border: white solid 0.1em;
        border-radius: 1.5em;
    }

</style>

<div class="myjob-search-bar">
    <input class="search-image hr-job-search-bar-input" style="padding-left: 2.5em;" type="text" placeholder="Search For Applicants" @oninput="SearchApplicants" />
</div>


<div class="table-applicants-container">

    @if (candidates != null && candidates.Count != 0)
    {
        <table>
            <thead>
                <tr>
                    <td></td>
                    <td>Personal Information</td>
                    <td>Total Match</td>
                    <td>Position</td>
                    <td>Application Phase</td>
                    <td>Application Date</td>
                    <td></td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @foreach (var application in applications)
                {
                    AppUser user = new AppUser();

                    //Shows users according to search
                    @if (usersFiltered == null || searchCandidate == "" || searchCandidate == " ")
                    {
                        user = users.Where(x => x.id == application.AppUserId).FirstOrDefault();
                    }
                    else if (usersFiltered.Where(x => x.id == application.AppUserId).FirstOrDefault() != null)
                    {
                        user = usersFiltered.Where(x => x.id == application.AppUserId).FirstOrDefault();
                    }

                    @if (JobId == application.JobId && application.AppUserId == user.id)
                    {
                        double match = 0;
                        @if (candidates.Where(x => x.AppUserId == user.id).FirstOrDefault() != null)
                        {
                            match = Math.Round(candidates.Where(x => x.AppUserId == user.id).FirstOrDefault().TotalMatch,2);
                        }
                        
                        string jobTitle = jobs.Where(x => x.Id == JobId).FirstOrDefault().Title;
                        string img;
                        //Checks that the profile picture exists
                        if (personalInformation.Where(x => x.AppUserId == user.id).FirstOrDefault() != null)
                        {
                            if (personalInformation.Where(x => x.AppUserId == user.id).FirstOrDefault().ImageUrl != null)
                            {
                                img = personalInformation.Where(x => x.AppUserId == user.id).FirstOrDefault().ImageUrl;
                            }
                            else
                            {
                                img = "https://xebecstorage.blob.core.windows.net/profile-images/0";
                            }
                        }
                        else
                        {
                            img = "https://xebecstorage.blob.core.windows.net/profile-images/0";
                        }

                        <tr>
                            <td><img src="@img" alt="Avatar"></td>
                            <td style="font-size: 1.2em; font-family: opensans-condensed-bold">@user.name @empty @user.surname</td>
                            <td style="display: flex; justify-content: center"><div class="total-match-pill" style="@setMatch(match)">@match</div></td>
                            <td>@jobTitle</td>
                            <td>
                                <select @onblur="() => setApplication(application.Id)" @onchange="updatePhase">
                                    <option selected>@FindCurrentPhase(@user.id, JobId)</option>

                                    @foreach (var phase in phases)
                                    {
                                        <option>@phase.description</option>
                                    }
                                </select>
                            </td>
                            <td style="font-weight: 400; font-family: opensans-condensed-bold; font-size: 1em; color: #d35bc9">@($"{application.TimeApplied:dd MMM yyyy}")</td>
                            <td style="text-decoration: underline; font-family: opensans-condensed-bold"><a @onclick="() => toggleApplicationForm(user, JobId)">View Application Form</a></td>
                            <td><input type="button" class="btn-view-documents" value="View Documents" @onclick="() => toggleDocuments(user)" /></td>
                        </tr>

                    }
                }


                @if (candidates == null || candidates.Count == 0)
                {
                    <p style="text-align: center">No applicants for this job.</p>
                }

            </tbody>
        </table>
    }
    else
    {
        <MudProgressCircular Class="loading-icon" Size="Size.Large" Indeterminate="true" />
    }

</div>


@if (showDocuments)
{
    string img;
    if (personalInformation.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault() != null)
    {
        if (personalInformation.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault().ImageUrl != null)
        {
            img = personalInformation.Where(x => x.AppUserId == selectedUser.id).FirstOrDefault().ImageUrl;
        }
        else
        {
            img = "https://xebecstorage.blob.core.windows.net/profile-images/0";
        }
    }
    else
    {
        img = "https://xebecstorage.blob.core.windows.net/profile-images/0";
    }



    <div class="dimmed">

        <div class="modal-frame-documents">
            <div class="modal-document-header">
                <div class="modal-document-profile">
                    <div class="modal-frame-documents-rows"><img src="@img" alt="Avatar"></div>
                    <div class="modal-frame-documents-rows" style="color: #004393; font-family: opensans-condensed-bold">@selectedUser.name @empty @selectedUser.surname @empty Documents </div>
                </div>
                <input type="button" class="btn-view-documents" style="width: 100px; margin-right: 25px; margin-left:245px" value="Close" @onclick="toggleDocuments" />
            </div>
            <div class="modal-frame-documents-rows">
                <div class="mini-modal-frame-documents" @onclick='() => toggleMagnifiedDocument("linkedincv")'>
                    <img src="https://xebecstorage.blob.core.windows.net/linkedincv/@selectedUser.id" alt="Avatar">
                    <div style="color: #00bcae; font-family: opensans-condensed-bold">
                        CV
                    </div>
                </div>
                <div class="mini-modal-frame-documents" @onclick='() => toggleMagnifiedDocument("matric-certificates")'>
                    <img src="https://xebecstorage.blob.core.windows.net/matric-certificates/@selectedUser.id" alt="Avatar">
                    <div style="color: #00bcae; font-family: opensans-condensed-bold">
                        Matric Certificate
                    </div>
                </div>
                <div class="mini-modal-frame-documents" @onclick='() => toggleMagnifiedDocument("transcripts")'>
                    <img src="https://xebecstorage.blob.core.windows.net/transcripts/@selectedUser.id" alt="Avatar">
                    <div style="color: #00bcae; font-family: opensans-condensed-bold">
                        Academic Transcript
                    </div>
                </div>
            </div>
            <div class="modal-frame-documents-rows">
                <div class="mini-modal-frame-documents" @onclick='() => toggleMagnifiedDocument("additional-documents-1")'>
                    <img src="https://xebecstorage.blob.core.windows.net/additional-documents-1/@selectedUser.id" alt="Avatar">
                    <div style="color: #00bcae; font-family: opensans-condensed-bold">
                        Certificate A
                    </div>
                </div>
                <div class="mini-modal-frame-documents" @onclick='() => toggleMagnifiedDocument("additional-documents-2")'>
                    <img src="https://xebecstorage.blob.core.windows.net/additional-documents-2/@selectedUser.id" alt="Avatar">
                    <div style="color: #00bcae; font-family: opensans-condensed-bold">
                        Certificate B
                    </div>
                </div>
                <div class="mini-modal-frame-documents" @onclick='() => toggleMagnifiedDocument("additional-documents-3")'>
                    <img src="https://xebecstorage.blob.core.windows.net/additional-documents-3/@selectedUser.id" alt="Avatar">
                    <div style="color: #00bcae; font-family: opensans-condensed-bold">
                        Certificate C
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<!--Magnified Document-->
@if (showMagnifiedDocument)
{
    <div class="dimmed">
        <div class="img-magnified">
            <input type="button" class="btn-view-document" style="margin-left:85%; margin-bottom: 2%;" value="Close" @onclick='() => toggleMagnifiedDocument("")' />
            <img src="https://xebecstorage.blob.core.windows.net/@selectedDocument/@selectedUser.id" />
        </div>
    </div>
}


<!--ApplicationForm Modal-->
@if (showApplicationForm)
{
    @if (AnswerList != null && QuestionList != null && selectedCandidate != null)
    {
        <div class="dimmed">
            <div class="modal-frame">
                <table>
                    <thead>
                        <tr>
                            <td class="title-modal">Application Form: </td>
                            <td class="close-modal" @onclick="toggleApplicationForm">x</td>
                        </tr>
                        <tr></tr>
                    </thead>
                    <tbody>
                        @foreach (var answer in AnswerList)
                        {
                            @if (answer.appUserId == selectedUser.id)
                            {
                                FormQuestion question = QuestionList.Where(x => x.id == answer.questionnaireHRFormId && answer.appUserId == selectedUser.id).FirstOrDefault();
                                @if (question.jobId == JobId)
                                {
                                    @if (answer.applicantAnswer == "" || answer.applicantAnswer == " " || answer.applicantAnswer == null)
                                    {
                                        <tr>
                                            <td class="form-label" for="last-name">@question.question</td>
                                            <td id="last-name" class="form-control name" style="color: red">Not answered</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr>
                                            <td class="form-label" for="last-name">@question.question</td>
                                            <td id="last-name" class="form-control name">@answer.applicantAnswer</td>
                                        </tr>
                                    }
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="dimmed">
            <div class="modal-frame">
                <table>
                    <thead>
                        <tr>
                            <td class="title-modal">Application Form: </td>
                            <td class="close-modal" @onclick="toggleApplicationForm">x</td>
                        </tr>
                        <tr></tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="info-empty">No information saved.</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
}

@code {
    @using XebecPortal.UI.Utils.Handlers;
    @using System.Net.Http.Headers;

    string empty = "  ";
    string phaseDescription = "";
    string phaseEdit = "";
    string savePhase = "";
    bool showApplicationForm = false;
    bool showDocuments = false;
    bool showMagnifiedDocument = false;

    string currentPhase;
    int phaseId;
    int applicationId;

    private List<FormQuestion> QuestionList = new List<FormQuestion>();
    private List<ApplicantAnswer> AnswerList = new List<ApplicantAnswer>();
    private ApplicationModel tempApplication;
    private IList<ApplicationPhaseHelper> tempPhaseHelper;
    private int tempRank;
    private string tempJobTitle;
    private string searchCandidate;
    private ApplicationPhase phaseFinal;
    private string selectedJob = "";
    private string selectedDocument = "";
    private string searchTerm = "";
    private CandidateRecommender selectedCandidate;
    private AppUser selectedUser;
    private IList<AppUser> usersFiltered = null;
    private IList<Job> jobs = new List<Job>();
    private IList<CandidateRecommender> candidates = null;
    private IList<AppUser> users = new List<AppUser>();
    private IList<ApplicationPhaseHelper> phasesHelpers = new List<ApplicationPhaseHelper>();
    private IList<ApplicationModel> applications = new List<ApplicationModel>();
    private IList<Application> Applications = new List<Application>();
    private IList<ApplicationPhase> phases = new List<ApplicationPhase>();
    private IList<PersonalInformation> personalInformation = new List<PersonalInformation>();

    private currentPhase phase { get; set; }
    [Parameter] public int JobId { get; set; }

    string token;
    protected override async Task OnInitializedAsync()
    {
        token = await localStorage.GetItemAsync<string>("jwt_token");

        jobs = await httpClient.GetListJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/Job", new AuthenticationHeaderValue("Bearer", token));
        candidates = await httpClient.GetListJsonAsync<List<CandidateRecommender>>("https://xebecapi.azurewebsites.net/api/candidaterecommender", new AuthenticationHeaderValue("Bearer", token));
        Applications = await httpClient.GetListJsonAsync<List<Application>>("https://xebecapi.azurewebsites.net/api/application", new AuthenticationHeaderValue("Bearer", token));
        AnswerList = await httpClient.GetListJsonAsync<List<ApplicantAnswer>>("https://xebecapi.azurewebsites.net/api/ApplicantQuestionnaire", new AuthenticationHeaderValue("Bearer", token));
        QuestionList = await httpClient.GetListJsonAsync<List<FormQuestion>>("https://xebecapi.azurewebsites.net/api/Questionnaire", new AuthenticationHeaderValue("Bearer", token));

        users = await httpClient.GetListJsonAsync<List<AppUser>>("https://xebecapi.azurewebsites.net/api/user", new AuthenticationHeaderValue("Bearer", token));
        phasesHelpers = await httpClient.GetListJsonAsync<List<ApplicationPhaseHelper>>("https://xebecapi.azurewebsites.net/api/ApplicationPhaseHelper", new AuthenticationHeaderValue("Bearer", token));
        applications = await httpClient.GetListJsonAsync<List<ApplicationModel>>("https://xebecapi.azurewebsites.net/api/Application", new AuthenticationHeaderValue("Bearer", token));
        phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/ApplicationPhase", new AuthenticationHeaderValue("Bearer", token));
        personalInformation = await httpClient.GetListJsonAsync<List<PersonalInformation>>("https://xebecapi.azurewebsites.net/api/PersonalInformation", new AuthenticationHeaderValue("Bearer", token));
    }

    private async Task setApplication(int id)
    {
        applicationId = id;

        Application temp = new Application();

        temp = Applications.FirstOrDefault(i => i.Id == applicationId);
        temp.ApplicationPhaseId = phaseId;

        await httpClient.PutJsonAsync<Application>($"https://xebecapi.azurewebsites.net/api/application/{applicationId}", temp, new AuthenticationHeaderValue("Bearer", token));

        ApplicationPhasesHelper tempHelper = new ApplicationPhasesHelper();
        tempHelper.ApplicationId = applicationId;
        tempHelper.ApplicationPhaseId = phaseId;
        tempHelper.TimeMoved = DateTime.Now;

        await httpClient.PostJsonAsync<ApplicationPhasesHelper>("https://xebecapi.azurewebsites.net/api/applicationphasehelper", tempHelper, new AuthenticationHeaderValue("Bearer", token));
    }

    private void updatePhase(ChangeEventArgs e)
    {
        phaseId = phases.FirstOrDefault(x => x.description.ToLower() == e.Value.ToString().ToLower()).id;
    }

    private void toggleMagnifiedDocument(string documentType)
    {
        showMagnifiedDocument = !showMagnifiedDocument;
        selectedDocument = documentType;
    }

    private void toggleDocuments(AppUser user)
    {
        Console.WriteLine(user.id);
        showDocuments = !showDocuments;
        SetSelectedCandidate(user);
    }

    private void toggleDocuments()
    {
        showDocuments = !showDocuments;
    }

    private void toggleApplicationForm(AppUser user, int jobId)
    {
        showApplicationForm = !showApplicationForm;
        SetSelectedCandidate(user);
    }

    private void toggleApplicationForm()
    {
        showApplicationForm = !showApplicationForm;
    }

    private string FindCurrentPhase(int candidateId, int jobId)
    {
        try
        {
            string phaseDescription = "";

            int applicationId = applications.Where(x => x.JobId == jobId && x.AppUserId == candidateId).FirstOrDefault().Id;

            List<ApplicationPhaseHelper> phases_ = phasesHelpers.Where(x => x.ApplicationId == applicationId).ToList();
            phases_ = phases_.OrderByDescending(x => x.TimeMoved).ToList();

            ApplicationPhaseHelper currentPhase = phases_.FirstOrDefault();

            phaseDescription = phases.Where(x => x.id == currentPhase.ApplicationPhaseId).FirstOrDefault().description;

            return phaseDescription;
        }
        catch (NullReferenceException nr)
        {
            return "No Phase";
        }
    }

    private void SetSelectedCandidate(AppUser user)
    {
        if (user != null)
            selectedUser = user;
    }

    private void SearchApplicants(ChangeEventArgs e)
    {
        searchCandidate = e.Value.ToString();

        usersFiltered = new List<AppUser>();
        usersFiltered.Clear();

        if (users != null)
        {
            foreach (var user in users)
            {
                if (user.name != null)
                {
                    if (user.name.ToLower().Contains(searchCandidate.ToLower()))
                    {
                        usersFiltered.Add(user);
                    }
                }
            }
        }
    }

    private string setMatch(double match)
    {
        if (match < 30)
        {
            return "background: red";
        }
        else if (match <= 40)
        {
            return "background: #FF4C25";
        }
        else if (match <= 50)
        {
            return "background: #FFB65A";
        }
        else if (match <= 60)
        {
            return "background: #FFDF5A";
        }
        else if (match <= 70)
        {
            return "background: #E0FF5A";
        }
        else if (match <= 80)
        {
            return "background: #CCFF5A";
        }
        else
        {
            return "background: #CCFF5A";
        }
    }

}