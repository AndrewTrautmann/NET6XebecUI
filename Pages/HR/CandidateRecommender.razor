@page "/candidaterecommender"
@using XebecPortal.UI.Services.Models
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager nav

<style>

    thead {
        border-bottom: solid black 0.05em
    }

    .table-container {
        overflow: auto;
        overflow-x: hidden;
        height: 65vh;
        background-color: white;
        padding: 10px;
    }

</style>

<div class="container col-11" style="height: 75vh;margin-top:5vh;">
    @*hidden="@Cand"*@
    @if (candidates == null)
    {
        <div>
            Loading...
        </div>
    }
    else
    {
        <div style="width: 100%">

            <!--Select-Job-Dropdown-->
            <div class="row" style="height:5vh">
                <div class="col-12">
                    <div class="input-group d-flex justify-content-center">
                        <select @bind="@selectedJob">
                            @foreach (var job in jobs)
                            {
                                <option>@job.Title</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <!--Search-Box-->
            <div class="row" style="height:5vh">
                <div class="col-12">
                    <div class="input-group d-flex justify-content-center">
                        <input class="form-control job-search-bar" type="text" placeholder="Search for a candidate" @bind="@searchTerm" />
                        <span class="input-group-text job-search-icon-div" @onclick="() => FilterCandidates(searchTerm)">
                            <i class="fa fa-search job-search-icon"></i>
                        </span>
                    </div>
                </div>
            </div>
            <br />

            <!--Table-Recommended-Candidates-->

            <div class="table-container">
                <div class="col-12">
                    <div class="row d-flex justify-content-center" style="padding: 15px; padding-top: 0">
                        <table>
                            <thead>
                                <tr>
                                    <td>Ranking</td>
                                    <td>Candidate</td>
                                    <td>Rating %</td>
                                    <td>Phase</td>
                                    <td>Action</td>
                                </tr>
                            </thead>
                            @foreach (var candidate in candidates)
                            {



                                @for (int i = 0; i < candidatesFiltered.Count; i++)
                                {
                                    @if (candidatesFiltered[i].id == candidate.AppUserId)
                                    {
                                        AdjustRank(candidates.IndexOf(candidate));
                                        <tr style="height: 50px; border-bottom: solid lightgray 0.05em">

                                            <td>@tempRank</td>

                                            <td>@candidatesFiltered[i].name @candidatesFiltered[i].surname</td>


                                            <td>@candidate.TotalMatch.ToString() %</td>


                                            <td></td>





                                            <td style="font-weight: bold; font-size: large">...</td>
                                        </tr>
                                    }
                                }


                            }
                        </table>
                    </div>
                </div>
            </div>

        </div>
    }
</div>

@code {

    private ApplicationModel tempApplication;
    private IList<ApplicationPhaseHelper> tempPhaseHelper;
    private int tempRank;
    private ApplicationPhase phaseFinal;
    private string selectedJob = "";
    private string searchTerm = "";
    private IList<Job> jobs = new List<Job>();
    private IList<CandidateRecommender> candidates = null;
    private IList<AppUser> users = new List<AppUser>();
    private IList<ApplicationPhaseHelper> phasesHelpers = new List<ApplicationPhaseHelper>();
    private IList<ApplicationModel> applications = new List<ApplicationModel>();
    private IList<ApplicationPhase> phases = new List<ApplicationPhase>();
    List<AppUser> candidatesFiltered;

    protected override async Task OnInitializedAsync()
    {
        jobs = await httpClient.GetFromJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/Job");
        candidates = await httpClient.GetFromJsonAsync<List<CandidateRecommender>>("https://xebecapi.azurewebsites.net/api/candidaterecommender");

        candidates = candidates.OrderByDescending(o => o.TotalMatch).ToList();


        users = await httpClient.GetFromJsonAsync<List<AppUser>>("https://xebecapi.azurewebsites.net/api/user");
        phasesHelpers = await httpClient.GetFromJsonAsync<List<ApplicationPhaseHelper>>("https://xebecapi.azurewebsites.net/api/ApplicationPhaseHelper");
        applications = await httpClient.GetFromJsonAsync<List<ApplicationModel>>("https://xebecapi.azurewebsites.net/api/Application");
        phases = await httpClient.GetFromJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/ApplicationPhase");
        candidatesFiltered = await httpClient.GetFromJsonAsync<List<AppUser>>("https://xebecapi.azurewebsites.net/api/user");
    }

    private void AdjustRank(int rank)
    {
        tempRank = rank + 1;
    }

    private void FilterCandidates(string searchString)
    {
        candidatesFiltered = users.Where(i => $"{i.name} {i.surname} ".Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void AssignApplication(ApplicationModel application)
    {
        tempApplication = application;
    }

    private string FindCurrentPhase(CandidateRecommender candidate)
    {
        ApplicationPhaseHelper currentPhase;

        Console.WriteLine("intial massive for loop");

        @for (int i = 0; i < applications.Count; i++)
        {
            @if (candidate.AppUserId == applications[i].AppUserId)
            {
                AssignApplication(applications[i]);
                @for (int j = 0; j < phasesHelpers.Count; j++)
                {
                    @if (phasesHelpers[j].ApplicationId == tempApplication.Id)
                    {
                        tempPhaseHelper.Add(phasesHelpers[j]);
                        Console.WriteLine(phasesHelpers[j].ApplicationPhaseId + "first massive for loop");
                    }

                }
            }
        }

        tempPhaseHelper = tempPhaseHelper.OrderByDescending(o => o.TimeMoved).ToList();
        currentPhase = tempPhaseHelper.FirstOrDefault();
        Console.WriteLine("This is currentphase" + currentPhase.ApplicationPhaseId);

        for (int j = 0; j < phases.Count; j++)
        {
            if (currentPhase.ApplicationPhaseId == phases[j].id)
            {
                phaseFinal = phases[j];
                Console.WriteLine("the phase final assignment" + phaseFinal.description);
            }
        }

        return phaseFinal.description;

    }
}
