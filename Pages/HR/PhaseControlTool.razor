@page "/phasecontrol"
@inject HttpClient httpClient
@inject IJSRuntime jsr
@inject NavigationManager NavigationManager

<style>
    * {
        margin: 0;
        padding: 0;
    }

    .container-phasecontrol {
        display: flex;
        width: 100%;
        height: 60vh;
    }

    .center {
        align-items: center;
        justify-content: center;
        display: flex;
    }

    .select-phase {
        justify-content: center;
        text-align: center;
        height: 100%;
        width: 45%;
        margin-left: 5%;
        margin-right: 5%;
        background-color: transparent;
        box-shadow: rgba(0, 0, 0, 0.8) 0px 5px 15px;
        border-radius: 2em;
    }

    .select-phase-content {
        justify-content: center;
        text-align: center;
        width: 100%;
        height: 100%;
        margin-left: 0px;
    }

    .phase-order {
        justify-content: center;
        text-align: center;
        height: 100%;
        width: 45%;
        margin-right: 5%;
        background-color: transparent;
        border-radius: 2em;
        box-shadow: rgba(0, 0, 0, 0.8) 0px 5px 15px;
    }

    .phase-order-content {
        justify-content: center;
        text-align: center;
        width: 95%;
        height: 100%;
        margin-left: 2.5%;
        margin-right: 2.5%;
    }

    .button {
        margin-top: 10px;
    }

    .button-content {
        background-color: lightseagreen;
        font-weight: bold;
        color: white;
        border: none;
        border-radius: 3px;
    }

    .modal-content {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 30%;
        height: 30%;
        margin-top: 10%;
    }

    .close {
        position: absolute;
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        padding-right: 10px;
        top: 0px;
        right: 0px;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

    .close-phase {
        color: #aaaaaa;
        font-size: 35px;
        font-weight: bold;
    }

        .close-phase:hover,
        .close-phase:focus {
            color: lightseagreen;
            text-decoration: none;
            cursor: pointer;
        }

    .modalbox {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
    }

    td:hover {
        color: lightseagreen;
        text-decoration: none;
        cursor: pointer;
    }

    input {
        width: 100%;
        height: 50%;
    }

    .select-phase-header {
        font-family: opensans-condensed-bold;
        font-weight: 700;
        color: white;
        background-color: #00bcae;
        text-align: center;
        font-size: 1.5em;
        border-top-right-radius: 2em;
        border-top-left-radius: 2em;
        width: 100%;
        text-transform: uppercase;
    }
</style>


<div class="container-phasecontrol">
    <div class="select-phase">

        <div class="select-phase-header">Phase Selection</div>

        <div class="select-phase-content row overflow-auto">

            <table style="background-color:transparent">

                <colgroup>
                    <col style="width: 90%;">
                    <col style="width: 10%;">
                </colgroup>

                <tbody>

                    @foreach (var phase in phases)
                    {
                        <tr>
                            <td style="font-weight: bold; font-size: 15px" @onclick="() => AddPhase(phase)">@phase.description</td>
                            <td class="close-phase" @onclick="() => DeletePhase(phase)">&times;</td>
                        </tr>
                    }

                </tbody>

            </table>
        </div>
        <div class="button">
            <button @onclick="ToggleModalSubmitPhase" class="button-content">Add Phase</button>
        </div>
    </div>



    <div class="phase-order">

        <div class="select-phase-header">Phase Form</div>

        <div class="phase-order-content row overflow-auto">
            <table style=" background-color: transparent;">

                <colgroup>
                    <col style="width: 20%">
                    <col style="width: 70%">
                    <col style="width: 10%">
                </colgroup>

                <tbody style=" align-items: center">

                    @foreach (var phase in phasesAdded)
                    {
                        <tr>
                            <td class="text-left" style="font-weight: bold; font-size: 15px" colspan="2">@phase.description</td>
                            <td class="close-phase" @onclick="() => DeletePhaseOrderPhase(phase)">&times;</td>
                        </tr>

                    }


                </tbody>

            </table>
        </div>
        <div class="button">
            <button class="button-content" @onclick="AssignPhases">Assign Phases</button>
        </div>
    </div>
</div>

@if (showModalSubmitPhase)
{
    <div class="modalbox">
        <div class="modal-content">
            <span class="close" @onclick="ToggleModalSubmitPhase">&times;</span>
            <p>Phase:</p>
            <input type="text" @bind="@phaseValue.description" />
            <div class="button">
                <button type="submit" @onclick="AddPhase" class="button-content">Submit Phase</button>
            </div>
        </div>
    </div>
}


@code
{
    [Parameter]
    public CreateJobPost tempJob { get; set; }

    private IList<ApplicationPhase> phases = new List<ApplicationPhase>();
    private List<ApplicationPhase> phasesAdded = new List<ApplicationPhase>();
    private IList<Job> jobs = new List<Job>();
    ApplicationPhase phaseValue = new ApplicationPhase();

    private string developerAssigned = "";

    private int CurrentJobId;

    private MainModel mainmodel { get; set; } = new MainModel();

    private bool showModalSubmitPhase = false;

    protected override async Task OnInitializedAsync()
    {
        phases = await httpClient.GetFromJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase");

        jobs = await httpClient.GetFromJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/job");
        Job tempJob = jobs.LastOrDefault<Job>();

        CurrentJobId = tempJob.Id;
    }

    private void ToggleModalSubmitPhase()
    {
        showModalSubmitPhase = !showModalSubmitPhase;
    }

    private async Task DeletePhase(ApplicationPhase phase)
    {
        await httpClient.DeleteAsync($"https://xebecapi.azurewebsites.net/api/applicationphase/{phase.id}");
        phases = await httpClient.GetFromJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase");

        await jsr.InvokeVoidAsync("alert", "Deleted!");
    }

    private async Task AddPhase()
    {

        await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/applicationphase", phaseValue);

        phases = await httpClient.GetFromJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase");

        showModalSubmitPhase = !showModalSubmitPhase;
    }

    private async Task SubmitPhases()
    {
        @foreach (var phase in phasesAdded)
        {
            await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/jobapplicationphase", phaseValue);
        }

    }

    private void AddPhase(ApplicationPhase phase)
    {
        if (!phasesAdded.Contains(phase))
        {
            phasesAdded.Add(phase);
        }
    }

    private void DeletePhaseOrderPhase(ApplicationPhase phase)
    {
        phasesAdded.Remove(phase);
    }

    public async Task AssignPhases()
    {
        @*@foreach (var phase in phasesAdded)
            {
                JobApplicationModelPhase JobApplicationModelPhase_ = new JobApplicationModelPhase();
                JobApplicationModelPhase_.JobId = CurrentJobId;
                JobApplicationModelPhase_.ApplicationModelPhaseId = phase.id;

                await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/jobapplicationModelphase", JobApplicationModelPhase_);
            }*@

    tempJob.JobPhases = phasesAdded;

    await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/job", tempJob);

    //NavigationManager.NavigateTo("/");
}
}
