@page "/phasecontrol"
@inject HttpClient httpClient
@inject IJSRuntime jsr
@inject NavigationManager NavigationManager
@inject UserState _state
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogService Dialog

<style>

    .select-phase {
        text-align: center;
        height: 100%;
        width: 45%;
        margin-left: 5%;
        margin-right: 5%;
        background-color: transparent;
        box-shadow: rgba(0, 0, 0, 0.8) 0px 5px 15px;
        border-radius: 2em;
    }

    .select-phase-content {
        justify-content: center;
        text-align: center;
        width: 100%;
        height: 100%;
        margin-left: 0px;
    }

    .phase-order {
        justify-content: center;
        text-align: center;
        height: 100%;
        width: 45%;
        margin-right: 5%;
        background-color: transparent;
        border-radius: 2em;
        box-shadow: rgba(0, 0, 0, 0.8) 0px 5px 15px;
    }

    .phase-order-content {
        justify-content: center;
        text-align: center;
        width: 95%;
        height: 100%;
        margin-left: 2.5%;
        margin-right: 2.5%;
    }

    .button {
        margin-top: 10px;
    }

    .button-content {
        background-color: lightseagreen;
        font-weight: bold;
        color: white;
        border: none;
        border-radius: 3px;
    }

    .modal-content {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 30%;
        height: 30%;
        margin-top: 10%;
    }

    .close {
        position: absolute;
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        padding-right: 10px;
        top: 0px;
        right: 0px;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

    .close-phase {
        color: #aaaaaa;
        font-size: 35px;
        font-weight: bold;
    }

        .close-phase:hover,
        .close-phase:focus {
            color: lightseagreen;
            text-decoration: none;
            cursor: pointer;
        }

    .modalbox {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    td:hover {
        color: lightseagreen;
        text-decoration: none;
        cursor: pointer;
    }

    input {
        width: 100%;
        height: 50%;
    }

    .select-phase-header {
        font-family: opensans-condensed-bold;
        font-weight: 700;
        color: white;
        background-color: #00bcae;
        text-align: center;
        font-size: 1.5em;
        border-top-right-radius: 2em;
        border-top-left-radius: 2em;
        width: 100%;
        text-transform: uppercase;
    }

    .appform-container {
        height: 55vh;
        width: 70%;
        margin-left: 15%;
        margin-right: 15%;
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
        display: flex;
    }

    .appform-left-buttons {
        margin-top: 5vh;
        height: 5vh;
        width: 100%;
    }

    .appform-left-main {
        height: 35vh;
        overflow-y: auto;
        overflow-x: hidden;
        width: 100%;
        padding: 5px;
    }

    .appform-left-row {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px, rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;
        border-radius: 20px !important;
        min-height: 6vh;
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
        padding-right: 5px !important;
    }

    .appform-left-row-selected {
        border-radius: 20px !important;
        min-height: 7vh;
        color: #00bcae;
        !important;
        font-family: opensans-condensed-bold,serif;
        font-weight: 900;
        font-size: 1em;
        margin-bottom: 5px;
        background-color: rgb(243,242,242);
        min-width: 100%;
        transition: 0.1s;
    }

    .appform-left-row:hover {
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
        min-height: 9vh;
        color: white;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin-bottom: 5px;
        background-color: rgb(243,242,242);
        min-width: 100%;
        transition: 0.1s;
    }

    .appform-right-row {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px, rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;
        border-radius: 10px !important;
        min-height: 7vh;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
    }

    .appform-text {
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin: 0;
        padding: 0;
        width: 90%;
    }

    .question-select {
        width: 500px;
        height: 500px;
        background-color: #f2f2f2;
        border-radius: 5px;
        border: 2px solid grey;
    }

    .question-button {
        width: 80%;
        margin-left: 10%;
        height: 15%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .form-questions {
        height: 75%;
        overflow: auto;
    }

    .form-button {
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 350px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .delete-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 450px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .add-popup-header {
        width: 100%;
        height: 15%;
        display: flex;
        align-items: center;
    }

    .add-popup-body {
        width: 100%;
        height: 60%;
        display: flex;
        justify-content: center;
    }

    .add-popup-type {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup-button {
        width: 100%;
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .delete-popup-header {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .delete-popup-body {
        width: 100%;
        height: 90%;
        display: flex;
        justify-content: center;
        overflow-y: scroll;
        background-color: white;
    }

    .delete-popup-question {
        word-wrap: break-word;
        width: 450px;
    }

    .appform-close-button {
        width: 10%;
        text-align: end;
    }

    .form-preview-question {
        width: 100%;
        display: flex;
        height: 50%;
    }

    .form-preview-input {
        width: calc(100% - 10px);
        margin: 0;
        padding: 0;
        height: 50%;
    }

    @@keyframes fade-in {
        from {
            opacity: 0;
            top: 10%
        }

        to {
            opacity: 1;
            top: 18%
        }
    }

    .appform-main-button {
        height: 5vh;
        background-color: #00bcae;
        border: none;
        border-radius: 100px;
        color: white;
        text-align: center;
        font-family: opensans-bold;
        font-weight: 700;
    }

        .appform-main-button:hover {
            height: 5vh;
            background-color: #d35bc9;
            border: none;
            border-radius: 100px;
            color: white;
            text-align: center;
            font-family: opensans-bold;
            font-weight: 700;
        }

    .collaborators-left-main {
        padding: 10px;
    }

    .phase-div {
        display: flex;
        align-items: center;
    }

        .phase-div > .phase-name {
            font-size: 1.5rem;
        }

    .grid-container {
        display: grid;
        grid-template-columns: auto auto auto;
    }

    .grid-container-content {
        display: grid;
        grid-template-columns: auto auto auto;
    }

    .grid-item-content {
        height: stretch;
    }

    .grid-item {
        text-align: center;
    }

    .grid-item-summary {
        text-align: center;
        background-color: #00BCAE;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
        height: 37em;
    }

    .grid-item-empty {
        text-align: center;
        height: 37em;
    }

    .headings {
        color: navy
    }
</style>

<div class="form-container">
    <div class="inner-form-container">
        <div class="form-heading">
            <h4 class="form-subheading">PHASE FORM</h4>
        </div>
        <br />
        <div>
            <div class="grid-container">
                <div class="grid-item">
                    <select class="select-form" style="width: 15em">
                        <option selected disabled="disabled">Select Phase</option>
                        @foreach (var item in phases)
                        {
                            <option value="@item.id" @onclick="() => AddPhase(item)">@item.description</option>
                        }
                    </select>
                </div>
                <div class="grid-item">
                    <button class="btn rounded-3" style="background: #00bcae" @onclick="OpenAddPhaseDialog">Add Phase</button>
                </div>
                <div class="grid-item">
                    <button class="btn rounded-3" style="background: #00bcae" @onclick="OpenDeletePhaseDialog">Delete Phase</button>
                </div>
                <div class="grid-item d-flex justify-content-center">
                    <div class="overflow-auto" style="width: 15em; height: 22em">
                        @if (phasesAdded?.Any() == true)
                        {
                            foreach (var item in phasesAdded)
                            {
                                <br />
                                <div class="card" style="width: 14em">
                                    <div class="card-header d-flex justify-content-end">
                                        <button type="button" class="btn-close" @onclick="() => DeletePhaseOrderPhase(item)"></button>
                                    </div>
                                    <div class="card-body">
                                        <h5 class="card-title">@item.description</h5>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="summary-section">
        <div class="summary-heading">
            <h5>SUMMARY</h5>
        </div>

        <div class="collaborators-left-table">
        </div>
    </div>
</div>
<div class="nav-btns">
    <button class="down-button">Submit</button>
</div>

<MudDialog @bind-IsVisible="isDialogAddPhaseVisible" Options="closeButton">
    <TitleContent>
        <MudText Typo="Typo.h3">
            Add Phase
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="row">
            <div class="col-12">
                <input class="create-form-text" placeholder="Phase Name" @bind-value="addPhaseValue" />
            </div>
            <div class="col-12">
                <br />
            </div>
            <div class="col-12 d-flex justify-content-center">
                <button class="btn rounded-3" type="button" style="background: #00bcae" @onclick="AddPhase">ADD</button>
            </div>
        </div>
    </DialogContent>
</MudDialog>

<MudDialog @bind-IsVisible="isDialogDeletePhaseVisible" Options="closeButton">
    <TitleContent>
        <MudText Typo="Typo.h3">
            Delete Phase
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="row">
            <div class="col-12">
                <div class="grid-item d-flex justify-content-center">
                    <div class="overflow-auto" style="height: 22em">
                        @if (phases?.Any() == true)
                        {
                            foreach (var item in phases)
                            {
                                <br />
                                <div class="card">
                                    <div class="card-header d-flex justify-content-end">
                                        <button type="button" class="btn-close" @onclick="() => DeletePhase(item)"></button>
                                    </div>
                                    <div class="card-body">
                                        <h5 class="card-title">@item.description</h5>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </DialogContent>
</MudDialog>

@*
    <div class="collaborators-container">
        <div class="collaborators-left">
            <div class="collaborators-heading">
                <h2 class="collaborators-heading-text">Select Phases</h2>
            </div>
            <div class="appform-left-main">
                <div class="collaborators-left-table">
                    @if (phases == null)
                    {
                        <div>Loading...</div>
                    }
                    else
                    {
                        @if (phases != null)
                        {
                            foreach (var phase in phases)
                            {
                                <div class="@PhaseCardClass(phase) pl-2 phase-div" @onclick="() => AddPhase(phase)">
                                    <p class="phase-name">@phase.description</p>
                                    @* <span class="phase-pill" @GetPillStyle(phase)></span>
                            </div>
                        }
                    }
                }
*@
@*
        </div>
    </div>
*@
@*
            @if (string.Equals("super admin", _state.Role, StringComparison.OrdinalIgnoreCase))
            {
                <div class="appform-left-buttons">
                    <div class="question-button">
                        <button class="btn appform-main-button" @onclick="ToggleModalSubmitPhase">Add Phase</button>
                        <button class="btn appform-main-button" @onclick="ToggleModalDeletePhase">Delete Phase</button>
                    </div>
                </div>
            }
        </div>
        <div class="collaborators-right">
            <div class="collaborators-heading">
                <h2 class="collaborators-heading-text">Chosen Phases</h2>
            </div>
            <div class="appform-left-main">
                <div class="collaborators-left-table">
                    @if (phases == null)
                    {
                        <div>Loading...</div>
                    }
                    else
                    {
                        @if (phasesAdded != null)
                        {
                            foreach (var phase in phasesAdded)
                            {
                                <div class="right-list-item-preview">
                                    <div class="close-item-panel">
                                        <span @onclick="() => DeletePhaseOrderPhase(phase)">
                                            <i class="fas fa-times"></i>
                                        </span>
                                    </div>
                                    <div class="preview-item-body">
                                        <div class="preview-item-description">
                                            <p class="">@phase.description</p>
                                        </div>
                                        @if (phase.description.ToLower().Contains("interview"))
                                        {
                                            <div class="preview-item-control">
                                                <p type="email" class="form-control" style="width: 100%">Interviewer : @developerAssigned</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    @if (showModalSubmitPhase)
    {
        <div class="modalbox">
            <div class="modal-content">
                <span class="close" @onclick="ToggleModalSubmitPhase">&times;</span>
                <p>Phase:</p>
                <input type="text" @bind="@phaseValue.description" />
                <div class="button">
                    <button type="submit" @onclick="AddPhase" class="button-content">Submit Phase</button>
                </div>
            </div>
        </div>
    }

    @if (showModalDeletePhase)
    {
        <div class="modalbox p-1">

            <div class="card" style="height: 50vh; width: 40vw;">

                <div class="card-header">
                    <span class="text-dark">Delete a Phase</span>
                    <span class="close" @onclick="ToggleModalDeletePhase">
                        <i class="fas fa-times"></i>
                    </span>
                </div>
                <div style="overflow: auto;" class="card-body">

                    @foreach (var phase in phases)
                    {
                        <p type="email" class="form-control modal-delete-phase" style="width: 100%">
                            <span class="lead"><strong>@phase.description</strong></span>
                            <br>
                            <a class="btn btn-danger" @onclick="() => DeletePhase(phase)">Delete Phase <i class="fa fa-trash" aria-hidden="true"></i></a>
                            <br>
                            <small class="text-muted">Please Note: this process cannot be undone</small>
                        </p>
                    }
                </div>
            </div>
        </div>
    }
    <input type="button" value="Submit" class="createjob-bottom-main-button" @onclick="Submit" />
*@
@code
{
    @using XebecPortal.UI.Utils.Handlers;
    @using System.Net.Http.Headers;

    [Parameter]
    public CreateJobPost TempJob { get; set; }

    [Parameter]
    public EventCallback<CreateJobPost> TempJobChanged { get; set; }

    private IList<ApplicationPhase> phases = new List<ApplicationPhase>();
    private List<ApplicationPhase> phasesAdded = new List<ApplicationPhase>();
    private IList<Job> jobs = new List<Job>();
    ApplicationPhase phaseValue = new ApplicationPhase();
    ApplicationPhase tempPhaseValue = new ApplicationPhase();
    private string developerAssigned = "";
    private string token;
    private string addPhaseValue;
    private bool showModalSubmitPhase = false;
    private bool showModalDeletePhase = false;
    private bool isDialogAddPhaseVisible;
    private bool isDialogDeletePhaseVisible;
    MudBlazor.DialogOptions closeButton = new MudBlazor.DialogOptions() { CloseButton = true, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = false };

    protected override async Task OnInitializedAsync()
    {
        token = await localStorage.GetItemAsync<string>("jwt_token");

        phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase", new AuthenticationHeaderValue("Bearer", token));

        jobs = await httpClient.GetListJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/job", new AuthenticationHeaderValue("Bearer", token));
        //Todo get developer
    }

    private void ToggleModalSubmitPhase()
    {
        showModalSubmitPhase = !showModalSubmitPhase;
    }

    private void ToggleModalDeletePhase()
    {
        showModalDeletePhase = !showModalDeletePhase;
    }

    private async Task DeletePhase(ApplicationPhase phase)
    {
        phases.Remove(phase);
        /*await httpClient.DeleteJsonAsync($"https://xebecapi.azurewebsites.net/api/applicationphase/{phase.id}", new AuthenticationHeaderValue("Bearer", token));
        phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase", new AuthenticationHeaderValue("Bearer", token));*/
        //await jsr.InvokeVoidAsync("alert", "Deleted!");
    }

    private async Task AddPhase()
    {
        Console.WriteLine(1);
        if (string.IsNullOrWhiteSpace(addPhaseValue) == false)
        {
            tempPhaseValue = new() { description = addPhaseValue };
            /*await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/applicationphase", tempPhaseValue);
            phases = await httpClient.GetListJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase", new AuthenticationHeaderValue("Bearer", token));*/
            phases.Add(tempPhaseValue);
            addPhaseValue = "";
            //showModalSubmitPhase = !showModalSubmitPhase;
        }
        isDialogAddPhaseVisible = true;
    }

    private async Task SubmitPhases()
    {
        foreach (var phase in phasesAdded)
        {
            await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/jobapplicationphase", phaseValue);
        }
    }

    private void AddPhase(ApplicationPhase phase)
    {
        if (!phasesAdded.Contains(phase))
        {
            phasesAdded.Add(phase);
        }
    }

    private void DeletePhaseOrderPhase(ApplicationPhase phase)
    {
        phasesAdded.Remove(phase);
    }

    private async Task Submit()
    {
        TempJob.JobPhases = phasesAdded;
        await TempJobChanged.InvokeAsync(TempJob);

        //Job page post
        Job job = new Job();
        job.MinimumExperience = null;

        job.Title = TempJob.Title;
        job.Description = TempJob.Description;
        job.Company = TempJob.Company;
        job.Location = TempJob.Location;
        //job.Department = TempJob.Department;
        job.DueDate = TempJob.DueDate;
        job.CreationDate = TempJob.CreationDate;

        Console.WriteLine(job.Title);
        Console.WriteLine(job.Description);
        Console.WriteLine(job.Company);
        Console.WriteLine(job.Location);
        //Console.WriteLine(job.Department);
        Console.WriteLine(job.DueDate);
        Console.WriteLine(job.CreationDate);

        await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/job", job);
        job = null;

        job = await GetJob();

        SubmitRest(job);
    }

    private async Task<Job> GetJob()
    {
        List<Job> ListOfJobs = await httpClient.GetListJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/job", new AuthenticationHeaderValue("Bearer", token));
        return ListOfJobs.LastOrDefault(x => x.Title == TempJob.Title);
    }

    private async Task SubmitRest(Job job)
    {
        //Add Job type to JobTypeHelpers
        JobTypeHelper jobTypeHelper = new JobTypeHelper();
        jobTypeHelper.JobId = job.Id;
        jobTypeHelper.JobTypeId = TempJob.JobType.Id;

        Console.WriteLine("JobType that should post.");
        Console.WriteLine("JobTypeHelper ID: " + job.Id);
        Console.WriteLine("JobTypeHelper JobTypeId: " + TempJob.JobType.Id);

        await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/jobtypehelper", jobTypeHelper);

        //Add selected platforms to JobPlatformHelpers
        foreach (var platform in TempJob.JobPlatforms)
        {
            JobPlatformHelper jobPlatformHelper = new JobPlatformHelper();
            jobPlatformHelper.JobId = job.Id;
            jobPlatformHelper.JobPlatformId = platform.id;

            await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/jobplatformhelper", jobPlatformHelper);
        }

        //Add collaborators to CollaboratorsAssigned
        foreach (var Collaborator in TempJob.Collaborators)
        {
            Collaborator collaborator = new Collaborator();
            collaborator.Name = Collaborator.name;
            collaborator.JobId = job.Id;
            collaborator.AppUserId = Collaborator.id;

            await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/collaboratorsassigned", collaborator);
        }

        //Add form questions
        foreach (var formQuestion in TempJob.formQuestions)
        {
            formQuestion.jobId = job.Id;
        }
        await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/Questionnaire/lst", TempJob.formQuestions);

        //Add Application Phases
        foreach (var phase in phasesAdded)
        {
            Console.WriteLine("Phases that should post.");
            JobApplicationPhase JobApplicationPhase_ = new JobApplicationPhase();
            JobApplicationPhase_.JobId = job.Id;
            JobApplicationPhase_.ApplicationPhaseId = phase.id;

            Console.WriteLine(JobApplicationPhase_.Id);
            Console.WriteLine(JobApplicationPhase_.JobId);
            Console.WriteLine(JobApplicationPhase_.ApplicationPhaseId);
            await httpClient.PostAsJsonAsync($"https://xebecapi.azurewebsites.net/api/jobapplicationphase/{job.Id}", JobApplicationPhase_);
        }

        await TempJobChanged.InvokeAsync(TempJob);
    }

    private string PhaseCardClass(ApplicationPhase phase)
    {
        if (phasesAdded.FindAll(d => d.id == phase.id).Count() > 0)
            return "appform-left-row-selected";
        return "appform-left-row";
    }

    private string GetPillStyle(ApplicationPhase phase)
    {
        var thisPhase = phase.description.ToLower();
        if (thisPhase.Contains("application") || thisPhase.Contains("applied"))
            return "background: #ff5201; color: rgba(0, 0, 0, 0.35)";
        else if (thisPhase.Contains("screen"))
            return "background: #ff9d01 ; color: rgba(0, 0, 0, 0.35)";
        else if (thisPhase.Contains("screen"))
            return "background: #ffbc01; color: rgba(0, 0, 0, 0.35)";
        else if (thisPhase.Contains("screen"))
            return "background: #ffbc01; color: rgba(0, 0, 0, 0.35)";
        else if (thisPhase.Contains("screen"))
            return "background: #ffd401; color: rgba(0, 0, 0, 0.35)";
        else if (thisPhase.Contains("screen"))
            return "background: #ebff01; color: rgba(0, 0, 0, 0.35);";
        else if (thisPhase.Contains("screen"))
            return "background: #baff01; color: rgba(0, 0, 0, 0.35)";
        else if (thisPhase.Contains("screen"))
            return "background: #05ff01; color: rgba(0, 0, 0, 0.35)";

        return "";
    }

    private void OpenAddPhaseDialog() => isDialogAddPhaseVisible = true;
    private void OpenDeletePhaseDialog() => isDialogDeletePhaseVisible = true;
}