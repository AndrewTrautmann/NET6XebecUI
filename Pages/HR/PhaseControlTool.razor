@page "/phasecontrol"
@inject HttpClient httpClient
@inject IJSRuntime jsr
@inject NavigationManager NavigationManager

<style>

    .select-phase {
        justify-content: center;
        text-align: center;
        height: 100%;
        width: 45%;
        margin-left: 5%;
        margin-right: 5%;
        background-color: transparent;
        box-shadow: rgba(0, 0, 0, 0.8) 0px 5px 15px;
        border-radius: 2em;
    }

    .select-phase-content {
        justify-content: center;
        text-align: center;
        width: 100%;
        height: 100%;
        margin-left: 0px;
    }

    .phase-order {
        justify-content: center;
        text-align: center;
        height: 100%;
        width: 45%;
        margin-right: 5%;
        background-color: transparent;
        border-radius: 2em;
        box-shadow: rgba(0, 0, 0, 0.8) 0px 5px 15px;
    }

    .phase-order-content {
        justify-content: center;
        text-align: center;
        width: 95%;
        height: 100%;
        margin-left: 2.5%;
        margin-right: 2.5%;
    }

    .button {
        margin-top: 10px;
    }

    .button-content {
        background-color: lightseagreen;
        font-weight: bold;
        color: white;
        border: none;
        border-radius: 3px;
    }

    .modal-content {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 30%;
        height: 30%;
        margin-top: 10%;
    }

    .close {
        position: absolute;
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        padding-right: 10px;
        top: 0px;
        right: 0px;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

    .close-phase {
        color: #aaaaaa;
        font-size: 35px;
        font-weight: bold;
    }

        .close-phase:hover,
        .close-phase:focus {
            color: lightseagreen;
            text-decoration: none;
            cursor: pointer;
        }

    .modalbox {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
    }

    td:hover {
        color: lightseagreen;
        text-decoration: none;
        cursor: pointer;
    }

    input {
        width: 100%;
        height: 50%;
    }

    .select-phase-header {
        font-family: opensans-condensed-bold;
        font-weight: 700;
        color: white;
        background-color: #00bcae;
        text-align: center;
        font-size: 1.5em;
        border-top-right-radius: 2em;
        border-top-left-radius: 2em;
        width: 100%;
        text-transform: uppercase;
    }
</style>


<div class="collaborators-container">
    <div class="collaborators-left">
        <div class="collaborators-heading">
            <h2 class="collaborators-heading-text">Select Phases</h2>
        </div>
        <div class="appform-left-main">
            <table class="collaborators-left-table">
                @if (phases == null)
                {
                    <div>Loading...</div>
                }
                else
                {
                    <tbody>
                        @if (phases != null)
                        {
                            @foreach (var phase in phases)
                            {
                                <tr class="collaborators-left-row" @onclick="() => AddPhase(phase)">
                                    <td class="collaborators-left-td">@phase.description</td>
                                </tr>
                            }
                        }
                    </tbody>
                }
            </table>
        </div>
        <div class="appform-left-buttons">
            <div class="question-button">
                <button class="btn appform-main-button" @onclick="ToggleModalDeletePhase">Delete phase</button>
                <button class="btn appform-main-button" @onclick="ToggleModalSubmitPhase">Add phase</button>
            </div>
        </div>
    </div>
    <div class="collaborators-right">
        <div class="collaborators-heading">
            <h2 class="collaborators-heading-text">Chosen Phases</h2>
        </div>
        <div class="appform-left-main">
            <table class="collaborators-left-table">
                @if (phases == null)
                {
                    <div>Loading...</div>
                }
                else
                {
                    <tbody>
                        @if (phases != null)
                        {
                            @foreach (var phase in phasesAdded)
                            {

                                <tr class="collaborators-left-row">
                                    <td class="collaborators-left-td">@phase.description</td>
                                    <td class="collaborators-left-td" @onclick="() => DeletePhaseOrderPhase(phase)">&times;</td>
                                </tr>

                            }
                        }
                    </tbody>
                }
            </table>
        </div>
    </div>
</div>

@if (showModalSubmitPhase)
{
    <div class="modalbox">
        <div class="modal-content">
            <span class="close" @onclick="ToggleModalSubmitPhase">&times;</span>
            <p>Phase:</p>
            <input type="text" @bind="@phaseValue.description" />
            <div class="button">
                <button type="submit" @onclick="AddPhase" class="button-content">Submit Phase</button>
            </div>
        </div>
    </div>
}

@if (showModalDeletePhase)
{
    <div class="modalbox">
        <div class="modal-content" style="height: 250px">
            <span class="close" @onclick="ToggleModalDeletePhase">&times;</span>
            <p>Delete phase:</p>
            <div style="overflow: auto">
                <table>
                    @foreach (var phase in phases)
                    {
                        <tr class="collaborators-left-row">
                            <td class="collaborators-left-td">@phase.description</td>
                            <td class="collaborators-left-td" @onclick="() => DeletePhase(phase)">&times;</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
}
<input type="button" value="Submit" class="createjob-bottom-main-button" @onclick="Submit" />

@code
{
    [Parameter]
    public CreateJobPost TempJob { get; set; }
    [Parameter]
    public EventCallback<CreateJobPost> TempJobChanged { get; set; }

    private IList<ApplicationPhase> phases = new List<ApplicationPhase>();
    private List<ApplicationPhase> phasesAdded = new List<ApplicationPhase>();
    private IList<Job> jobs = new List<Job>();
    ApplicationPhase phaseValue = new ApplicationPhase();


    private MainModel mainmodel { get; set; } = new MainModel();

    private bool showModalSubmitPhase = false;
    private bool showModalDeletePhase = false;

    protected override async Task OnInitializedAsync()
    {
        phases = await httpClient.GetFromJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase");

        jobs = await httpClient.GetFromJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/job");
    }

    private void ToggleModalSubmitPhase()
    {
        showModalSubmitPhase = !showModalSubmitPhase;
    }

    private void ToggleModalDeletePhase()
    {
        showModalDeletePhase = !showModalDeletePhase;
    }

    private async Task DeletePhase(ApplicationPhase phase)
    {
        await httpClient.DeleteAsync($"https://xebecapi.azurewebsites.net/api/applicationphase/{phase.id}");
        phases = await httpClient.GetFromJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase");

        await jsr.InvokeVoidAsync("alert", "Deleted!");
    }

    private async Task AddPhase()
    {

        await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/applicationphase", phaseValue);

        phases = await httpClient.GetFromJsonAsync<List<ApplicationPhase>>("https://xebecapi.azurewebsites.net/api/applicationphase");

        showModalSubmitPhase = !showModalSubmitPhase;
    }

    private async Task SubmitPhases()
    {
        foreach (var phase in phasesAdded)
        {
            await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/jobapplicationphase", phaseValue);
        }

    }

    private void AddPhase(ApplicationPhase phase)
    {
        if (!phasesAdded.Contains(phase))
        {
            phasesAdded.Add(phase);
        }
    }

    private void DeletePhaseOrderPhase(ApplicationPhase phase)
    {
        phasesAdded.Remove(phase);
    }

    private async Task Submit()
    {
        TempJob.JobPhases = phasesAdded;
        await TempJobChanged.InvokeAsync(TempJob);

        //Job page post
        Job job = new Job();
        job.MinimumExperience = null;

        job.Title = TempJob.Title;
        job.Description = TempJob.Description;
        job.Company = TempJob.Company;
        job.Location = TempJob.Location;
        job.Department = TempJob.Department;
        job.DueDate = TempJob.DueDate;
        job.CreationDate = TempJob.CreationDate;

        Console.WriteLine(job.Title);
        Console.WriteLine(job.Description);
        Console.WriteLine(job.Company);
        Console.WriteLine(job.Location);
        Console.WriteLine(job.Department);
        Console.WriteLine(job.DueDate);
        Console.WriteLine(job.CreationDate);

        await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/job", job);
        job = null;



        job = await GetJob();

        SubmitRest(job);


    }

    private async Task<Job> GetJob()
    {
        List<Job> ListOfJobs = await httpClient.GetFromJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/job");
        return ListOfJobs.LastOrDefault(x => x.Title == TempJob.Title);
    }

    private async Task SubmitRest(Job job)
    {
        //Add Job type to JobTypeHelpers
        JobTypeHelper jobTypeHelper = new JobTypeHelper();
        jobTypeHelper.JobId = job.Id;
        jobTypeHelper.JobTypeId = TempJob.JobType.Id;

        Console.WriteLine("JobType that should post.");
        Console.WriteLine("JobTypeHelper ID: " + job.Id);
        Console.WriteLine("JobTypeHelper JobTypeId: " + TempJob.JobType.Id);

        await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/jobtypehelper", jobTypeHelper);


        //Add selected platforms to JobPlatformHelpers
        foreach (var platform in TempJob.JobPlatforms)
        {
            JobPlatformHelper jobPlatformHelper = new JobPlatformHelper();
            jobPlatformHelper.JobId = job.Id;
            jobPlatformHelper.JobPlatformId = platform.id;

            await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/jobplatformhelper", jobPlatformHelper);
        }


        //Add collaborators to CollaboratorsAssigned
        foreach (var Collaborator in TempJob.Collaborators)
        {
            Collaborator collaborator = new Collaborator();
            collaborator.Name = Collaborator.name;
            collaborator.JobId = job.Id;
            collaborator.AppUserId = Collaborator.id;

            await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/collaboratorsassigned", collaborator);
        }


        //Add form questions
        foreach (var formQuestion in TempJob.formQuestions)
        {
            formQuestion.jobId = job.Id;
        }
        await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/Questionnaire/lst", TempJob.formQuestions);


        //Add Application Phases
        List<JobApplicationPhase> lstJobApplicationPhase = new List<JobApplicationPhase>();

        foreach (var phase in phasesAdded)
        {
            Console.WriteLine("Phases that should post.");
            JobApplicationPhase JobApplicationPhase_ = new JobApplicationPhase();
            JobApplicationPhase_.JobId = job.Id;
            JobApplicationPhase_.ApplicationPhaseId = phase.id;

            lstJobApplicationPhase.Add(JobApplicationPhase_);
        }
        await httpClient.PostAsJsonAsync($"https://xebecapi.azurewebsites.net/api/jobapplicationphase/list", lstJobApplicationPhase);

        await TempJobChanged.InvokeAsync(TempJob);
    }
}
