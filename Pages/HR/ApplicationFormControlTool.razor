@page "/applicationformcontroltool"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;
@inject UserState _state;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@using XebecPortal.UI.Utils.Handlers;
@using System.Net.Http.Headers;
<head>

</head>
<style>

    .appform-container {
        height: 100%;
        width: 100%;
        margin-left: 15%;
        margin-right: 15%;
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
        font-family: opensans-condensed-bold,serif;
    }

    ::-webkit-scrollbar-button:single-button:vertical:decrement {
        border-width: 0 8px 8px 8px;
        border-color: transparent transparent #555555 transparent;
    }

        ::-webkit-scrollbar-button:single-button:vertical:decrement:hover {
            border-color: transparent transparent #777777 transparent;
        }

    /* ::-webkit-scrollbar-button:single-button {
        background-color: #bbbbbb;
        display: block;
        border-style: solid;
        height: 12px;
        width: 12px;
    }*/

    ::-webkit-scrollbar-button:single-button:vertical:increment {
        border-width: 8px 8px 0 8px;
        border-color: #555555 transparent transparent transparent;
    }

    ::-webkit-scrollbar-button:vertical:single-button:increment:hover {
        border-color: #777777 transparent transparent transparent;
    }

    

    .appform-left-buttons {
        margin-top: 5vh;
        height: 5vh;
        width: 100%;
    }

    .appform-left-main {
        height: 35vh;
        overflow-y: hidden;
        overflow-x: hidden;
        width: 100%;
        padding: 55px;
    }





    .appform-left-row {
        border-radius: 20px !important;
        height: 6vh;
        color: black;
        font-family: opensans-condensed-bold,serif;
        font-weight: 900;
        font-size: 1em;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
        padding-right: 5px !important;
    }

    .appform-left-row-selected {
        border-radius: 20px !important;
        min-height: 9vh;
        color: #00bcae;
        font-family: opensans-condensed-bold,sans-serif;
        font-weight: 900;
        font-size: 1em;
        margin-bottom: 5px;
        background-color: rgb(243,242,242);
        min-width: 100%;
        transition: 0.1s;
        padding: 3px 5px;
    }



    .appform-right-row {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px, rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;
        border-radius: 10px !important;
        min-height: 7vh !important;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
    }

    .appform-text {
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin: 0;
        padding: 0;
        width: 90%;
    }

    .question-select {
        width: 500px;
        height: 500px;
        background-color: #f2f2f2;
        border-radius: 5px;
        border: 2px solid grey;
    }

    .question-button {
        width: 80%;
        margin-left: 10%;
        height: 15%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .form-questions {
        height: 75%;
        overflow: auto;
    }

    .form-button {
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }




    .appform-close-button {
        width: 10%;
        text-align: end;
    }

    .form-preview-question {
        width: 100%;
        display: flex;
        height: 50%;
    }

    .form-preview-input {
        width: calc(100% - 10px);
        margin: 0;
        padding: 0;
        height: 50%;
    }

    @@keyframes fade-in {
        from {
            opacity: 0;
            top: 10%
        }

        to {
            opacity: 1;
            top: 18%
        }
    }

    .appform-main-button {
        height: 5vh;
        background-color: #00bcae;
        border: none;
        border-radius: 100px;
        color: white;
        text-align: center;
        font-family: opensans-bold;
        font-weight: 700;
    }

        .appform-main-button:hover {
            height: 5vh;
            background-color: #d35bc9;
            border: none;
            border-radius: 100px;
            color: white;
            text-align: center;
            font-family: opensans-bold;
            font-weight: 700;
        }

    .collaborators-left-main {
        padding: 10px;
    }

    .question-div {
        display: flex;
        align-items: center;
    }

        .question-div:hover {
            color: black !important;
            height: 6vh !important;
        }

    .seven {
        flex-direction: column;
    }

    .right-list-item-preview {
        min-height: 5rem;
        color: black;
        font-size: 1em;
        min-width: 100%;
        margin-bottom: 5px;
    }



    .close-item-panel {
       
        display: flex;
        justify-content: end;
        font-size: 1.5vh;
    }

        .close-item-panel > span {
            border-left: #888888;
            padding: 1px 1vw;
            border-radius: 0 5px 0 0;
            -moz-border-radius-topright: 5px;
        }

            .close-item-panel > span:hover {
                background: red;
                color: white;
                cursor: pointer;
            }

    .preview-item-body {
        padding: 2px 5px;
    }

    .preview-item-description {
        font-size: 2vh;
        display: flex;
        justify-content: space-between;
        align-items: end;
    }

    .preview-item-control {
        display: flex;
        justify-content: space-between;
    }

    .delete-btn:hover {
        background: red;
        color: white !important;
    }
    /*New Css*/
    .form-container {
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
    }

    .inner-form-container {
        width: 75%;
        height: 100%;
        background-color: white;
        margin-right: 15px;
    }

    .form-heading {
        text-align: center;
    }

    .form-subheading {
        color: #004392;
        font-weight: bold;
    }

    .form-main {
        display: flex;
        padding: 10px 20px;
        justify-content: space-between;
        height: 90%;
    }

    .form-right {
        width: 50%;
        height: 95%;
    }

    .form-left {
        width: 45%;
    }

    .summary-section {
        background-color: #00968B;
        width: 25%;
        height: 100%;
        margin-left: 20px;
        font-weight: bold;
    }

    .left-inner {
        display: flex;
        justify-content: space-around;
    }

    .select-heading {
        font-weight: 600;
    }

    .select-form {
        padding: 2px 0px 5px 5px;
        border: solid #00968B;
        border-radius: 5px;
    }

    .answer-heading {
        font-weight: 600;
        margin-top: 10px;
    }

    .answer-options {
        width: 100%;
        border: solid #00968B;
        border-width: 0.5px;
        border-radius: 5px;
    }

    .answers-left-table {
        height: 84%;
        overflow-y: scroll;
    }

    .answers-left-main {
        height: 79%;
        width: 90%;
    }

    .nav-btns {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 70%;
        margin-top: 20px;
    }

    .down-button {
        height: 5vh;
        background-color: #00bcae;
        border: none;
        border-radius: 100px;
        color: white;
        text-align: center;
        font-family: opensans-bold;
        font-weight: 700;
        margin-left: 20px;
        width: 22%;
    }

        .down-button:hover {
            height: 5vh;
            background-color: #d35bc9;
            border: none;
            border-radius: 100px;
            color: white;
            text-align: center;
            font-family: opensans-bold;
            font-weight: 700;
        }

    .summary-heading {
        color: #004392;
        font-weight: 700;
        text-align: center;
        width: 100%;
    }
    .add-question{
        text-align:center;
    }
    .add-question-header {
        display: flex;
        justify-content: space-between;
        
        align-content: center;
        align-items: center;
    }
    .add-question-heading-text {
        font-family: opensans-condensed-bold;
        font-weight: 800;
        font-size: 1.5em;
        color: #00bcae ;
    }
    .add-question-type{
        display:flex;
        justify-content:center;
    }
    .collaborators-left-table{
        overflow-y:scroll;
    }
    .delete-question-header{
        display:flex;
        justify-content:space-around;
        align-items:center;
    }
    .delete-questions-left-table{
        
    }
    table {
        border-spacing: 30px;
    }
    
</style>

<div class="form-container">
    <div class="inner-form-container">
        <div class="form-heading">
            <h4 class="form-subheading">APPLICATION FORM</h4>
        </div>
        <div class="form-main">
            <div class="form-right">

                <div class="options">
                    <div class="question-select-div">
                        <p class="select-heading">Question Selection</p>
                    </div>
                    <select @onchange="AddToForm" class="select-form">
                        <option>Select Question</option>
                        @foreach (var question in Questions)
                        {
                            <option> @question.questionDescription</option>
                            

                        }

                    </select>

                </div>

                <div class="answers-left-main">
                    <div class="model-answers-div">
                        <p class="answer-heading">Model Answers</p>
                    </div>
                    <div class="answers-left-table">

                        @if (Questions != null)
                        {
                            foreach (var formQuestion in FormQuestions)
                            {
                                <div class="right-list-item-preview">

                                    <div class="preview-item-body">
                                        <div class="preview-item-description">
                                            <p class="-form-preview-question">
                                                @formQuestion.question

                                            </p>
                                            <span @onclick="() => DeleteFormQuestion(formQuestion)">
                                                <i class="fas fa-times"></i>
                                            </span>
                                        </div>
                                        <div class="preview-item-control">
                                            @{
                                                var placeholder = "Expected answer";
                                            }
                                            @switch (formQuestion.answerTypeId)
                                            {
                                                case 1:
                                                    <input type="number" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                                    break;
                                                case 2:
                                                    <textarea type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer"></textarea>
                                                    break;
                                                case 3:
                                                    <input type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                                    break;
                                                case 4:
                                                    <input type="date" id="test" class="form-input" placeholder="@placeholder" style="width: 100%" @onchange="(e) => { formQuestion.answer = e.Value.ToString(); }">
                                                    break;
                                                case 5:
                                                    <select class="answer-options" @bind="formQuestion.answer">
                                                        <option value="yes" selected>Yes</option>
                                                        <option value="no">No</option>
                                                    </select>
                                                    break;
                                                <small class="text-muted text-small">(Select expected answer)</small>
                                                case 6:
                                                    <input type="file" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                                    break;

                                                case 7:
                                                    <input type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                                    break;
                                            }

                                        </div>
                                    </div>
                                </div>
                            }
                        }

                    </div>
                </div>

            </div>
            <div class="form-left">
                @if (string.Equals("super admin", _state.Role, StringComparison.OrdinalIgnoreCase))
                {


                    @if (ShowManage)
                    {
                        <div>
                            <button class="btn appform-main-button" @onclick="OpenButtons">Manage Questions</button>
                        </div>
                    }

                    @if (ShowAddDeleteButtons)
                    {

                        <div class="left-inner">
                            <div class="add-btn">
                                <button class="btn appform-main-button" @onclick="OpenAddPopup">Add question</button>
                            </div>
                            <div class="delete-button">
                                <button class="btn appform-main-button" @onclick="OpenDeletePopup">Delete questions</button>
                            </div>

                            <div class="delete-button">
                                <button class="btn-close" @onclick="ShowmanageButton"></button>
                            </div>

                        </div>

                    }

                    @if (ShowAddPopup)
                    {
                        <div class="add-question">
                            <div class="add-question-header">
                                <h4 class="add-question-heading-text">Add Question</h4>
                                <button class="btn-close"  @onclick="CloseAddPopup"></button>

                            </div>
                            <div class="add-question-body">
                                <textarea @bind="tempQuestion.questionDescription" style="width: 80%; border: 2px solid grey; height: 180px; background-color: white; border-radius: 5px;"></textarea>
                            </div>
                            <div class="add-question-type">
                                <p>select type:</p>
                                <select style="height:20px;" @bind="tempType">
                                    
                                    @foreach (var option in Types)
                                    {
                                        <option selected value="@option.Type">@option.Type</option>
                                    }
                                </select>
                            </div>
                            <div class="add-question-button">
                                <button class="btn appform-main-button" @onclick="AddQuestion">Submit question</button>
                            </div>
                        </div>
                    }
                    @if (ShowDeletePopup)
                    {
                        <div class="delete-question">
                            <div class="delete-question-header">
                                <h4 class="collaborators-heading-text">Delete Questions:</h4>
                                <button class="btn-close"  @onclick="CloseDeletePopup"></button>
                            </div>
                            <div class="delete-question-body">
                                <div class="delete-questions-left-table">
                                    <table class="questions">
                                        @if (Questions != null)
                                        {
                                            foreach (var question in Questions)
                                            {

                                                <tr>
                                                    <td class="collaborators-left-td appform-text pl-2">@question.questionDescription</td>


                                                    <td class="btn-close delete-btn" @onclick="() => DeleteQuestion(question)"></td>

                                                </tr>
                                                

                                                
                                                 
                                            }
                                        }
                                    </table>
                                </div>
                            </div>
                        </div>
                    }




                }

            </div>
            

        </div>


    </div>
    <div class="summary-section">
        <div class="summary-heading">
            <h5>SUMMARY</h5>
        </div>

        <div class="collaborators-left-table">
            @if (Questions != null)
            {
                foreach (var formQuestion in FormQuestions)
                {
                    <div class="right-list-item-preview">
                        <div class="close-item-panel">
                            <span @onclick="() => DeleteFormQuestion(formQuestion)">
                                <i class="fas fa-times"></i>
                            </span>
                        </div>
                        <div class="preview-item-body" style="padding:10px 10px;">
                            <div class="preview-item-description">
                                <p>@formQuestion.question</p>
                            </div>
                            <div class="preview-item-control">
                                @{
                                    var placeholder = "Expected answer";
                                }
                                @switch (formQuestion.answerTypeId)
                                {
                                    case 1:
                                        <input type="number" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                        break;
                                    case 2:
                                        <textarea type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer"></textarea>
                                        break;
                                    case 3:
                                        <input type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                        break;
                                    case 4:
                                        <input type="date" id="test" class="form-input" placeholder="@placeholder" style="width: 100%" @onchange="(e) => { formQuestion.answer = e.Value.ToString(); }">
                                        break;
                                    case 5:
                                        <select @bind="formQuestion.answer">
                                            <option value="yes" selected>Yes</option>
                                            <option value="no">No</option>
                                        </select>
                                        break;
                                    <small class="text-muted text-small">(Select expected answer)</small>
                                    case 6:
                                        <input type="file" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                        break;

                                    case 7:
                                        <input type="text" class="form-input" placeholder="@placeholder" style="width: 100%" @bind="formQuestion.answer">
                                        break;
                                }

                            </div>
                        </div>
                    </div>
                }
            }

        </div>


    </div>


</div>
<div class="nav-btns">
    <button class="down-button">Prev: Create a Job</button>
    <button class="down-button">Save</button>
    <button class="down-button">Next: Select Collaborators</button>
</div>

@code {
    string token;

    public List<FormQuestion> FormQuestions = new() ;

   
    public EventCallback<List<FormQuestion>> FormQuestionsChanged { get; set; }

    [Parameter]
    public CreateJobPost TempJob { get; set; }

    [Parameter]
    public EventCallback<CreateJobPost> TempJobChanged { get; set; }

    [Parameter]
    public int jobId { get; set; }

    [Parameter]
    public EventCallback<int> jobIdChanged { get; set; }

    string tempString = "";

    List<CustomQuestion> Questions = new List<CustomQuestion>();

    List<QuestionType> Types = new List<QuestionType>();
    string tempType = null;
    //temporary
    List<Job> Jobs = null;
    int CurrentJobId = 0;
    string CurrentJobDescription = null;
    bool ShowAddPopup = false;
    bool ShowAddDeleteButtons = false;
    bool ShowDeletePopup = false;
    bool ShowManage = true;
    public CustomQuestion tempQuestion = new CustomQuestion();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("JobID passed: " + jobId);
        token = await localStorage.GetItemAsync<string>("jwt_token");
        if (FormQuestions == null)
            FormQuestions = new();

        Questions = await httpClient.GetListJsonAsync<List<CustomQuestion>>("https://xebecapi.azurewebsites.net/api/question", new AuthenticationHeaderValue("Bearer", token));
        Jobs = await httpClient.GetListJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/job", new AuthenticationHeaderValue("Bearer", token));
        Types = await httpClient.GetListJsonAsync<List<QuestionType>>("https://xebecapi.azurewebsites.net/api/answertype", new AuthenticationHeaderValue("Bearer", token));
    }



    public async Task AddToForm(ChangeEventArgs e)
    {
        CustomQuestion question = new CustomQuestion();
        question = Questions.FirstOrDefault(x => e.Value.ToString() == x.questionDescription);


        FormQuestion temp = new FormQuestion();
        temp.id = question.Id;
        temp.question = question.questionDescription + " " + tempString;
        temp.answerTypeId = question.answerTypeId;
        temp.jobId = jobId;
        if (!FormQuestions.FindAll(z => z.id == question.Id).Any())
        {
            FormQuestions.Add(temp);
            await FormQuestionsChanged.InvokeAsync(FormQuestions);
        }
    }

    public async Task DeleteQuestion(CustomQuestion q)
    {

        await httpClient.DeleteJsonAsync($"https://xebecapi.azurewebsites.net/api/question/{q.Id}", new AuthenticationHeaderValue("Bearer", token));
        await OnInitializedAsync();
    }
    public void OpenButtons()
    {
        ShowAddDeleteButtons = !ShowAddDeleteButtons;
        ShowManage = !ShowManage;

    }
    public void OpenAddPopup()
    {
        ShowAddPopup = !ShowAddPopup;
        ShowDeletePopup = false;
        ShowAddDeleteButtons = false;
    }

    public void OpenDeletePopup()
    {
        ShowDeletePopup = !ShowDeletePopup;
        ShowAddPopup = false;
        ShowAddDeleteButtons = false;
    }

    private void ShowmanageButton()
    {
        ShowAddDeleteButtons = !ShowAddDeleteButtons;
        ShowManage = true;
    }

    public async Task AddQuestion()
    {

        if (tempQuestion.questionDescription != "")
        {

            tempQuestion.answerTypeId = Types.FirstOrDefault(q => q.Type == tempType).Id;
            await httpClient.PostJsonAsync("https://xebecapi.azurewebsites.net/api/question", tempQuestion, new AuthenticationHeaderValue("Bearer", token));
            await OnInitializedAsync();
        }
    }

    public void CloseAddPopup()
    {
        ShowAddPopup = !ShowAddPopup;
        ShowAddDeleteButtons = true;
    }

    public void CloseDeletePopup()
    {
        ShowDeletePopup = !ShowDeletePopup;
        ShowAddDeleteButtons = true;
    }

    public async Task DeleteFormQuestion(FormQuestion question)
    {
        FormQuestions.RemoveAll(q => q.id == question.id);
        await FormQuestionsChanged.InvokeAsync(FormQuestions);
    }

    private async Task Save()
    {
        TempJob.formQuestions = FormQuestions;
        Console.WriteLine("Questions Added");
        await TempJobChanged.InvokeAsync(TempJob);
    }

    private string QuestionCardClass(CustomQuestion question)
    {
        if (FormQuestions.FindAll(q => q.id == question.Id).Any())
            return "appform-left-row-selected";
        return "appform-left-row";
    }
    private void Prev()
    {
        NavigationManager.NavigateTo("");
    }

}


