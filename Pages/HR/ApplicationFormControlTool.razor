@page "/applicationformcontroltool"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime


<style>
    .wrapper {
        margin-left: 10%;
        width: 80%;
        height: 78vh;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .question-select {
        width: 500px;
        height: 500px;
        background-color: #f2f2f2;
        border-radius: 5px;
        border: 2px solid grey;
    }

    .form-preview {
        width: 500px;
        height: 500px;
        background-color: #f2f2f2;
        border-radius: 5px;
        border: 2px solid grey;
    }

    .form-title {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 10%;
    }

    .question-area-title {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 20px;
    }

    .question-area {
        width: 100%;
        height: 75%;
        overflow: hidden;
        overflow-y: auto;
    }

    .question-button {
        width: 80%;
        margin-left: 10%;
        height: 15%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .form-questions {
        height: 75%;
        overflow: auto;
    }

    .form-button {
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 350px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .delete-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 450px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .add-popup-header {
        width: 100%;
        height: 15%;
        display: flex;
        align-items: center;
    }

    .add-popup-body {
        width: 100%;
        height: 60%;
        display: flex;
        justify-content: center;
    }

    .add-popup-type {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup-button {
        width: 100%;
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .delete-popup-header {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .delete-popup-body {
        width: 100%;
        height: 90%;
        display: flex;
        justify-content: center;
        overflow-y: scroll;
        background-color: white;
    }

    .delete-popup-question {
        word-wrap: break-word;
        width: 450px;
    }

    .form-preview-question {
        width: 100%;
    }

    .question-description {
        word-wrap: break-word;
        width: 350px;
    }

    .form-question-description {
        word-wrap: break-word;
        max-width: 370px;
    }

    @@keyframes fade-in {
        from {
            opacity: 0;
            top: 10%
        }

        to {
            opacity: 1;
            top: 18%
        }
    }

</style>

<div class="wrapper">
    <div class="question-select scrollbar-winter-neva">
        <div class="question-area-title">
            Select Questions
        </div>
        <div class="question-area">
            <table class="table" style="border-radius: 5px;">
                @if (Questions == null)
                {
                    <div>Loading...</div>
                }
                else
                {

                    <tbody>
                        @if (Questions != null)
                        {
                            @foreach (var question in Questions)
                            {
                        <tr>
                            <td class="question-description" style="font-size: 15px;">@question.questionDescription</td>
                            <td style="font-size: 12px; width: 60px;">
                                <div>
                                    @Types.FirstOrDefault(q => q.Id == question.answerTypeId).Type
                                </div>
                            </td>
                            <td style="max-width: 20%">
                                <button class="btn btn-small" style="background-color: #00BCAE; color: white;" @onclick="() => AddToForm(question.questionDescription, question.answerTypeId)">Add</button>
                            </td>
                        </tr>
                            }
                        }
                    </tbody>
                }
            </table>
        </div>
        <div class="question-button">
            <button class="btn" style="background-color: #00BCAE; color:white;" @onclick="OpenDeletePopup">Delete questions</button>
            <button class="btn" style="background-color: #00BCAE; color:white;" @onclick="OpenAddPopup">Add question</button>
        </div>
    </div>

    <div class="form-preview">
        <div class="form-title">
            <div style="font-size: 20px; color: #003340">Application Form</div>
        </div>
        <div class="form-questions">
            <table class="table">
                <tbody>
                    @if (Questions != null)
                    {
                        @foreach (var formquestion in FormQuestions)
                        {
                            <tr>
                                <td class="form-question-description">
                                    <div class="form-preview-question">
                                        <h6 class="form-text text-muted" style="font-size: 14px;">@formquestion.question</h6>

                                        @switch (formquestion.answerTypeId)
                                        {
                                            case 1:
                                                <input type="number" class="form-control" style="width: 80%" @bind="formquestion.answer">
                                                break;
                                            case 2:
                                                <textarea type="text" class="form-control" placeholder="Answer..." style="width: 80%" @bind="formquestion.answer"></textarea>
                                                break;
                                            case 3:
                                                <input type="text" class="form-control" placeholder="Answer..." style="width: 80%" @bind="formquestion.answer">
                                                break;
                                            case 4:
                                            <input type="date" id="test" class="form-control" style="width: 80%"  @onchange="(e) => { formquestion.answer = e.Value.ToString(); }">
                                                break;
                                            case 5:
                                                <select @bind="formquestion.answer">
                                                    <option value="yes" selected>Yes</option>
                                                    <option value="no">No</option>
                                                </select>
                                                break;
                                            case 6:
                                                <input type="file" class="form-control" style="width: 80%" @bind="formquestion.answer">
                                                break;
                                        }
                                    </div>
                                </td>
                                <td style="width: 10%;">
                                    <button class="btn-close" @onclick="() => DeleteFormQuestion(formquestion.question)"></button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="form-button">
            <button class="btn" style="background-color: #00BCAE; color: white;" @onclick="CompileForm">Compile form</button>
        </div>
    </div>



    @if (ShowAddPopup)
    {
        <div class="add-popup">
            <div class="add-popup-header">
                <h4 style="margin-left: 20px; font-size: 20px;">Add Question:</h4>
                <button class="btn-close" style="margin-left: 68%" @onclick="CloseAddPopup"></button>
            </div>
            <div class="add-popup-body">
                <textarea style="width: 80%; border: 2px solid grey" @bind="tempQuestion.questionDescription"></textarea>
            </div>
            <div class="add-popup-type">
                <select @bind="tempType">
                    @foreach(var option in Types)
                    {
                    <option value="@option.Type">@option.Type</option>
                    }
                </select>
            </div>
            <div class="add-popup-button">
                <button class="btn" style="background-color: #00BCAE; color:white;" @onclick="AddQuestion">Submit question</button>
            </div>
        </div>
    }
    @if (ShowDeletePopup)
    {
        <div class="delete-popup">
            <div class="delete-popup-header">
                <h4 style="margin-left: 20px; font-size: 20px;">Delete Questions:</h4>
                <button class="btn-close" style="margin-left: 57%" @onclick="CloseDeletePopup"></button>
            </div>
            <div class="delete-popup-body">
                <table class="table">
                    <tbody>
                        @if (Questions != null)
                        {
                            @foreach (var question in Questions)
                            {
                                <tr>
                                    <td class="delete-popup-question" style="font-size: 15px;">@question.questionDescription</td>
                                    <td style="max-width: 10%">
                                        <button class="btn-close" @onclick="() => DeleteQuestion(question)"></button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>


@code {

    [Parameter]
    public CreateJobPost tempJob { get; set; }

    List<CustomQuestion> Questions = new List<CustomQuestion>();
    List<FormQuestion> FormQuestions = new List<FormQuestion>();
    List<QuestionType> Types = new List<QuestionType>();

    string tempType = null;

    //temporary
    List<Job> Jobs = null;

    int CurrentJobId = 0;
    string CurrentJobDescription = null;

    bool ShowAddPopup = false;
    bool ShowDeletePopup = false;

    public CustomQuestion tempQuestion = new CustomQuestion();

    protected override async Task OnInitializedAsync()
    {

        Questions = await httpClient.GetFromJsonAsync<List<CustomQuestion>>("https://xebecapi.azurewebsites.net/api/question");

        Jobs = await httpClient.GetFromJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/job");

        Job tempJob = Jobs.LastOrDefault<Job>();

        Types = await httpClient.GetFromJsonAsync<List<QuestionType>>("https://xebecapi.azurewebsites.net/api/answertype");

        CurrentJobId = tempJob.Id;
        CurrentJobDescription = tempJob.Description;
        //use parameter in future
    }

    public void AddToForm(string QuestionString, int TypeId)
    {
        if (FormQuestions.FindIndex(q => q.question == QuestionString) == -1)
        {
            FormQuestion temp = new FormQuestion();
            temp.question = QuestionString;
            temp.answerTypeId = TypeId;
            temp.jobId = CurrentJobId;

            FormQuestions.Add(temp);
        }
    }

    public async Task DeleteQuestion(CustomQuestion q)
    {
        await httpClient.DeleteAsync($"https://xebecapi.azurewebsites.net/api/question/{q.Id}");

        await OnInitializedAsync();
    }

    public void OpenAddPopup()
    {
        ShowAddPopup = !ShowAddPopup;
        ShowDeletePopup = false;
    }

    public void OpenDeletePopup()
    {
        ShowDeletePopup = !ShowDeletePopup;
        ShowAddPopup = false;
    }

    public async Task AddQuestion()
    {
        if (tempQuestion.questionDescription != "")
        {
            ShowAddPopup = !ShowAddPopup;

            tempQuestion.answerTypeId = Types.FirstOrDefault(q => q.Type == tempType).Id;

            await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/question", tempQuestion);

            await OnInitializedAsync();
        }
    }

    public void CloseAddPopup()
    {
        ShowAddPopup = !ShowAddPopup;
    }

    public void CloseDeletePopup()
    {
        ShowDeletePopup = !ShowDeletePopup;
    }

    public void DeleteFormQuestion(string QuestionString)
    {
        FormQuestions.RemoveAll(q => q.question == QuestionString);
    }

    public async Task CompileForm()
    {
        //await httpClient.PostAsJsonAsync<List<FormQuestion>>("https://xebecapi.azurewebsites.net/api/questionnaire/lst", FormQuestions);

        tempJob.formQuestions = FormQuestions;

        NavigationManager.NavigateTo($"/phasecontrol/{tempJob}");
    }

}