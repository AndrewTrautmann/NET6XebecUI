@page "/applicationformcontroltool"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;
<style>
    .appform-container {
        height: 55vh;
        width: 70%;
        margin-left: 15%;
        margin-right: 15%;
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
        display: flex;
    }

    .appform-left-buttons {
        margin-top: 5vh;
        height: 5vh;
        width: 100%;
    }

    .appform-left-main {
        height: 35vh;
        overflow-y: auto;
        overflow-x: hidden;
        width: 100%;
    }

        .appform-left-main::-webkit-scrollbar {
            background-color: transparent;
            border-radius: 1em;
            width: 1vw;
        }

        .appform-left-main::-webkit-scrollbar-thumb {
            background-color: white;
            border-radius: 1em;
        }

    .appform-left-row {
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.4), 0 2px 10px 0 rgba(0,0,0,0.4);
        min-height: 20vh;
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
    }

        .appform-left-row:hover {
            box-shadow: 0 2px 5px 0 rgba(0,0,0,1), 0 2px 10px 0 rgba(0,0,0,1);
            min-height: 20vh;
            color: white;
            font-family: opensans-condensed-bold;
            font-weight: 900;
            font-size: 1em;
            margin-bottom: 5px;
            background-color: black;
            min-width: 100%;
        }

    .appform-right-row {
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.4), 0 2px 10px 0 rgba(0,0,0,0.4);
        min-height: 20vh;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
    }

    .appform-text {
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin: 0;
        padding: 0;
        width: 90%;
    }

    .question-select {
        width: 500px;
        height: 500px;
        background-color: #f2f2f2;
        border-radius: 5px;
        border: 2px solid grey;
    }

    .question-button {
        width: 80%;
        margin-left: 10%;
        height: 15%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .form-questions {
        height: 75%;
        overflow: auto;
    }

    .form-button {
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 350px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .delete-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 450px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .add-popup-header {
        width: 100%;
        height: 15%;
        display: flex;
        align-items: center;
    }

    .add-popup-body {
        width: 100%;
        height: 60%;
        display: flex;
        justify-content: center;
    }

    .add-popup-type {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup-button {
        width: 100%;
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .delete-popup-header {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .delete-popup-body {
        width: 100%;
        height: 90%;
        display: flex;
        justify-content: center;
        overflow-y: scroll;
        background-color: white;
    }

    .delete-popup-question {
        word-wrap: break-word;
        width: 450px;
    }

    .appform-close-button {
        width: 10%;
        text-align: end;
    }

    .form-preview-question {
        width: 100%;
        display: flex;
        height: 50%;
    }

    .form-preview-input {
        width: 100%;
        margin: 0;
        padding: 0;
        height: 50%;
    }

    @@keyframes fade-in {
        from {
            opacity: 0;
            top: 10%
        }

        to {
            opacity: 1;
            top: 18%
        }
    }

    .appform-main-button {
        height: 5vh;
        background-color: #00bcae;
        border: none;
        border-radius: 100px;
        color: white;
        text-align: center;
        font-family: opensans-bold;
        font-weight: 700;
    }

        .appform-main-button:hover {
            height: 5vh;
            background-color: #d35bc9;
            border: none;
            border-radius: 100px;
            color: white;
            text-align: center;
            font-family: opensans-bold;
            font-weight: 700;
        }
</style>
<div class="appform-container">
    <div class="collaborators-left">
        <div class="collaborators-heading">
            <h2 class="collaborators-heading-text">Select Questions</h2>
        </div>
        <div class="appform-left-main">
            <table class="collaborators-left-table">
                @if (Questions == null)
                {
                    <div>Loading...</div>
                }
                else
                {
                    <tbody>
                        @if (Questions != null)
                        {
                            @foreach (var question in Questions)
                            {
                                <tr class="appform-left-row" @onclick="() => AddToForm(question)">
                                    <td class="collaborators-left-td">@question.questionDescription</td>
                                </tr>
                            }
                        }
                    </tbody>
                }
            </table>
        </div>
        <div class="appform-left-buttons">
            <div class="question-button">
                <button class="btn appform-main-button" @onclick="OpenDeletePopup">Delete questions</button>
                <button class="btn appform-main-button" @onclick="OpenAddPopup">Add question</button>
            </div>
        </div>
    </div>
    <div class="collaborators-right">
        <div class="collaborators-heading">
            <h2 class="collaborators-heading-text">Chosen Questions</h2>
        </div>
        <div class="collaborators-left-main">
            <table class="collaborators-left-table">
                <tbody>
                    @if (Questions != null)
                    {
                        @foreach (var formquestion in FormQuestions)
                        {
                            <tr class="appform-right-row">
                                <td class="collaborators-left-td">
                                    <div class="form-preview-question">
                                        <h3 class="appform-text">@formquestion.question</h3>
                                        <button class="btn-close appform-close-button" @onclick="() => DeleteFormQuestion(formquestion.question)"></button>
                                    </div>
                                    <div class="form-preview-input">
                                        @switch (formquestion.answerTypeId)
                                        {
                                            case 1:
                                                <input type="number" class="form-control" style="width: 100%" @bind="formquestion.answer">
                                                break;
                                            case 2:
                                                <textarea type="text" class="form-control" placeholder="Answer..." style="width: 100%" @bind="formquestion.answer"></textarea>
                                                break;
                                            case 3:
                                                <input type="text" class="form-control" placeholder="Answer..." style="width: 100%" @bind="formquestion.answer">
                                                break;
                                            case 4:
                                                <input type="date" id="test" class="form-control" style="width: 100%" @onchange="(e) => { formquestion.answer = e.Value.ToString(); }">
                                                break;
                                            case 5:
                                                <select @bind="formquestion.answer">
                                                    <option value="yes" selected>Yes</option>
                                                    <option value="no">No</option>
                                                </select>
                                                break;
                                            case 6:
                                                <input type="file" class="form-control" style="width: 100%" @bind="formquestion.answer">
                                                break;
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
    @if (ShowAddPopup)
    {
        <div class="add-popup">
            <div class="add-popup-header">
                <h4 style="margin-left: 20px; font-size: 20px;">Add Question:</h4>
                <button class="btn-close" style="margin-left: 68%" @onclick="CloseAddPopup"></button>
            </div>
            <div class="add-popup-body">
                <textarea style="width: 80%; border: 2px solid grey" @bind="tempQuestion.questionDescription"></textarea>
            </div>
            <div class="add-popup-type">
                <select @bind="tempType">
                    @foreach (var option in Types)
                    {
                        <option value="@option.Type">@option.Type</option>
                    }
                </select>
            </div>
            <div class="add-popup-button">
                <button class="btn" style="background-color: #00BCAE; color:white;" @onclick="AddQuestion">Submit question</button>
            </div>
        </div>
    }
    @if (ShowDeletePopup)
    {
        <div class="delete-popup">
            <div class="delete-popup-header">
                <h4 style="margin-left: 20px; font-size: 20px;">Delete Questions:</h4>
                <button class="btn-close" style="margin-left: 57%" @onclick="CloseDeletePopup"></button>
            </div>
            <div class="delete-popup-body">
                <table class="table">
                    <tbody>
                        @if (Questions != null)
                        {
                            @foreach (var question in Questions)
                            {
                                <tr>
                                    <td class="delete-popup-question" style="font-size: 15px;">@question.questionDescription</td>
                                    <td style="max-width: 10%">
                                        <button class="btn-close" @onclick="() => DeleteQuestion(question)"></button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>
<input type="button" value="Save" class="createjob-bottom-main-button" @onclick="Save" />

@code {
    [Parameter]
    public CreateJobPost TempJob { get; set; }
    [Parameter]
    public EventCallback<CreateJobPost> TempJobChanged { get; set; }


    List<CustomQuestion> Questions = new List<CustomQuestion>();
    List<FormQuestion> FormQuestions = new List<FormQuestion>();
    List<QuestionType> Types = new List<QuestionType>();
    string tempType = null;
    //temporary
    List<Job> Jobs = null;
    int CurrentJobId = 0;
    string CurrentJobDescription = null;
    bool ShowAddPopup = false;
    bool ShowDeletePopup = false;
    public CustomQuestion tempQuestion = new CustomQuestion();
    protected override async Task OnInitializedAsync()
    {
        Questions = await httpClient.GetFromJsonAsync<List<CustomQuestion>>("https://xebecapi.azurewebsites.net/api/question");
        Jobs = await httpClient.GetFromJsonAsync<List<Job>>("https://xebecapi.azurewebsites.net/api/job");
        Types = await httpClient.GetFromJsonAsync<List<QuestionType>>("https://xebecapi.azurewebsites.net/api/answertype");
    }
    public void AddToForm(CustomQuestion question)
    {

        FormQuestion temp = new FormQuestion();
        temp.question = question.questionDescription;
        temp.answerTypeId = question.answerTypeId;
        temp.jobId = TempJob.Id;
        if (!FormQuestions.Contains(temp))
        {
            FormQuestions.Add(temp);
        }


    }
    public async Task DeleteQuestion(CustomQuestion q)
    {
        await httpClient.DeleteAsync($"https://xebecapi.azurewebsites.net/api/question/{q.Id}");
        await OnInitializedAsync();
    }
    public void OpenAddPopup()
    {
        ShowAddPopup = !ShowAddPopup;
        ShowDeletePopup = false;
    }
    public void OpenDeletePopup()
    {
        ShowDeletePopup = !ShowDeletePopup;
        ShowAddPopup = false;
    }
    public async Task AddQuestion()
    {
        if (tempQuestion.questionDescription != "")
        {
            ShowAddPopup = !ShowAddPopup;
            tempQuestion.answerTypeId = Types.FirstOrDefault(q => q.Type == tempType).Id;
            await httpClient.PostAsJsonAsync("https://xebecapi.azurewebsites.net/api/question", tempQuestion);
            await OnInitializedAsync();
        }
    }
    public void CloseAddPopup()
    {
        ShowAddPopup = !ShowAddPopup;
    }
    public void CloseDeletePopup()
    {
        ShowDeletePopup = !ShowDeletePopup;
    }
    public void DeleteFormQuestion(string QuestionString)
    {
        FormQuestions.RemoveAll(q => q.question == QuestionString);
    }

    private async Task Save()
    {
        TempJob.formQuestions = FormQuestions;
        Console.WriteLine("Questions Added");
        await TempJobChanged.InvokeAsync(TempJob);
    }
}