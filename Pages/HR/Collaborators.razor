@using Bogus
@using XebecPortal.UI.Services.Models
@using System.Text
@using XebecPortal.UI.Utils.Handlers;
@using System.Net.Http.Headers;
@inject HttpClient HttpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>

    .collaborators-appform-container {
        height: 55vh;
        width: 70%;
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
    }

    .collaborators-form {
        width: 100%;
        height: 100%;
    }

    .collaborators-form-title {
        height: 15%;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        font-family: opensans-condensed-bold;
        font-size: 2em;
        font-weight: 900;
        color: #004393;
        margin-top: 0.5vh;
        text-transform: uppercase;
    }

    .collaborators-main-container {
        height: 55vh;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 30px;
    }

    .summary {
        background-color: teal;
        height: 100%;
        width: 30%;
        overflow-y: scroll;
    }

    .select-container {
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .selected-collaborators {
        margin-top: 20px;
        height: 70%;
        display: flex;
        flex-wrap: wrap;
        width: 100%;
        gap: 10px;
        justify-content: flex-start;
        padding: 0 25px 0 25px;
        overflow-y: scroll;
        /*display: grid;
        grid-template-columns: repeat(auto-fill,minmax(30%, 1fr));*/
    }

        .selected-collaborators > * {
            flex: 0 0 32%;
        }

    .inner-selected-collaborators {
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgb(0 0 0 / 20%), 0 2px 10px 0 rgb(0 0 0 / 10%);
        border-radius: 5px;
        height: 78px;
    }

    .collaborator-details {
        display: flex;
        justify-content: space-around;
        height: 35%;
    }

    .collaborator-select {
        padding: 2px 0px 5px 5px;
        border: solid #00968B;
        border-radius: 5px;
    }

    .crown {
        display: flex;
        justify-content: flex-end;
    }

    .colab-image {
        width: 40px;
        height: 40px;
        border-radius: 50%;
    }

    .colab-name {
        width: 70px;
        color: #004392;
        font-weight: 700;
        display: flex;
        justify-content: space-around;
    }

    .collab-remove {
        display: flex;
        justify-content: flex-end;
    }

    .bottom-buttons {
        margin-top: 3vh;
        margin-left: 20%;
        position: absolute;
        bottom: 5vh;
    }

    .button-functions {
        margin-top: 3vh;
        height: 5vh;
        width: 10vh;
        border: none;
        border-radius: 1em;
        background-color: rgba(0, 188, 174,1); /*#00bcae;*/
        color: white;
        /*font-family: opensans-bold;*/
        font-weight: 500;
        padding-left: 0.2em;
        padding-right: 0.2em;
    }

        .button-functions:hover {
            background-color: #d35bc9;
        }

    .summary-section {
        color: #004392;
        font-weight: bold;
        text-align: center;
        width: 100%;
    }

    .hiring-lead {
        padding: 10px;
        text-align: center;
    }

    .hiring-lead-heading {
        font-weight: 600;
    }

    .lead-heading-details {
        display: flex;
        justify-content: space-evenly;
        color: #FFFFFF;
    }

    .collaborators-list {
        padding: 10px;
        text-align: center;
    }

    .collab-list-heading {
        font-weight: 600;
    }

    .list-of-collabs {
        display: flex;
        justify-content: space-evenly;
        color: #FFFFFF;
    }
</style>

<div class="top-Image-thing">
        <div class="progressed-circle"></div>
        <div class="progressed-circle"></div>
        <div class="progressed-circle"></div>
        <div class="progressed-circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
 </div>
    <div class="selected-rod-selected-collaborators-page"></div>
    <div class="progress-rod-page-4"></div>
    <div class="NumberDisplay">
        <div>1</div>
        <div>2</div>
        <div>3</div>
        <div>4</div>
        <div>5</div>
        <div>6</div>
        <div>7</div>
    </div>
    <div class="TextDisplay">
        <div class="selected-create-a-job-text">Create A Job</div>
        <div class="selected-application-form-text">Build Application Form</div>
        <div class="selected-phases-text">Select Phases</div>
        <div class="selected-collaboration-text">Select Collaboration</div>
        <div class="collaboration-text-part-2">Select Collaboration Part 2</div>        
        <div class="post-a-job-text">Post Job</div>
        <div class="summary-text">Summary</div>
    </div>
<!--Tables of developers/HR-->
@if (!prevPage && !nextPage)
{
    <div class="create-job-summary">
        <div class="page-title">Summary</div>

        <div class="summary-details">
            <div class="hiring-lead">
                <p class="hiring-lead-heading">Hiring Lead</p>

                <p class="lead-heading-details">@hiringLead</p>
            </div>
            <div class="collaborators-list">
                <p class="collab-list-heading">Collaborators</p>
                <ul>
                    @foreach (var collab in ListOfCollaborators)
                    {
                        <li class="list-of-collabs">@collab.name  @collab.surname</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="createjob-form-container">
        <div>
            <div>

                <div class="collaborators-form-title">
                    Select Collaborators
                </div>
                <div class="select-container">
                    <div class="collaborators-select">

                        <select class="collaborator-select" @onchange="AddToCollaborator">
                            <option>Select collaborator</option>
                            @foreach (var colab in AppUserList)
                            {
                                <option>@colab.name</option>
                            }
                        </select>
                    </div>
                    <div class="hiring-lead-select">
                        <select @onchange="TestClick" class="collaborator-select">
                            <option>Select Hiring Lead</option>
                            @foreach (var lead in ListOfCollaborators)
                            {
                                <option>@lead.name  @lead.surname </option>
                            }
                        </select>
                    </div>
                </div>
                <div class="selected-collaborators">
                    @foreach (var collab in ListOfCollaborators)
                    {
                        <div class="inner-selected-collaborators">
                            <div class="crown"><i class="fa-solid fa-crown"></i></div>
                            <div class="collaborator-details">
                                <img src="@collab.imageUrl" alt="avator" class="colab-image" />
                                <div class="colab-name">
                                    <p>@collab.name</p><p>@collab.surname</p>
                                </div>
                            </div>
                            <div class="collab-remove">
                                <input type="button" value="Remove" class="button-functions" @onclick="() => RemoveCollab(collab)" style="margin-top:0px; height:23px;" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @*<div class="collaborators-main-container">
            <div class="collaborators-appform-container">
                <div class="collaborators-form">

                    <div class="collaborators-form-title">
                        Select Collaborators
                    </div>
                    <div class="select-container">
                        <div class="collaborators-select">

                            <select class="collaborator-select"  @onchange="AddToCollaborator">
                                <option >Select collaborator</option>
                                @foreach (var colab in AppUserList)
                                {
                                    <option>@colab.name</option>
                                }
                            </select>
                        </div>
                        <div class="hiring-lead-select">
                            <select @onchange="TestClick" class="collaborator-select">
                                <option>Select Hiring Lead</option>
                                @foreach(var lead in ListOfCollaborators)
                                {
                                    <option>@lead.name  @lead.surname </option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="selected-collaborators">
                        @foreach(var collab in ListOfCollaborators)
                    {
                        <div class="inner-selected-collaborators">
                            <div class="crown"><i class="fa-solid fa-crown"></i></div>
                            <div class="collaborator-details">
                                <img src="@collab.imageUrl" alt="avator" class="colab-image" />
                                <div  class="colab-name">
                                    <p>@collab.name</p><p>@collab.surname</p>
                                </div>
                            </div>
                            <div class="collab-remove">
                                <input type="button" value="Remove" class="button-functions" @onclick="() => RemoveCollab(collab)" style="margin-top:0px; height:23px;" />
                            </div>
                        </div>
                    }
                    </div>
                </div>
            </div>
            <div class="summary">
                <div class="summary-heading">
                    <h3>SUMMARY</h3>
                </div>
                <div class="summary-details">
                    <div class="hiring-lead">
                        <p class="hiring-lead-heading">Hiring Lead</p>

                            <p class="lead-heading-details">@hiringLead</p>
                    </div>
                    <div class="collaborators-list">
                        <p class="collab-list-heading">Collaborators</p>
                        <ul>
                            @foreach(var collab in ListOfCollaborators)
                            {
                                <li class="list-of-collabs">@collab.name  @collab.surname</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    *@

    <div class="bottom-buttons">
        <input type="button" value="Prev" class="button-functions" @onclick="Prev" />
        <input type="button" value="Save" class="button-functions" @onclick="Save" />
        <input type="button" value="Next" class="button-functions" @onclick="Next" />
    </div>
}
else if (nextPage)
{
    <XebecPortal.UI.Pages.HR.Collaborators2 ChosenQuestions="ChosenQuestions" ListOfCollaborators="ListOfCollaborators" />
}
else if (prevPage)
{
    <XebecPortal.UI.Pages.HR.ApplicationFormControlTool />
}

@code {

    private string CurrentItem;
    private List<AppUser> AppUserList = new List<AppUser>();
    private List<CollaboratorsAssigned> collaborators = new List<CollaboratorsAssigned>();
    AppUser HiringLead = new();
    Func<AppUser, string> converter = x => x?.name;

    List<AppUser> ListOfCollaborators = new List<AppUser>();
    List<AppUser> HiringLeads = new List<AppUser>();

    private List<AppUser> collaborator = new List<AppUser>();
    private List<string> SelectedUsers = new List<string>();
    public Dictionary<FormQuestion, List<AppUser>> QuestionsDictionary = new Dictionary<FormQuestion, List<AppUser>>();

    public List<AppUser> selected = new List<AppUser>();

    bool nextPage;
    bool prevPage;

    public List<CollaboratorQuestion> CollabQuestions = new List<CollaboratorQuestion>();

    public EventCallback<List<AppUser>> CollaboratorChanged { get; set; }

    //int JobId = 1;

    [Parameter]
    public int JobId { get; set; }

    [Parameter]
    public EventCallback<int> JobIdChanged { get; set; }

    //our questions
    [Parameter]
    public List<FormQuestion> ChosenQuestions { get; set; }

    [Parameter]
    public EventCallback<List<FormQuestion>> ChosenQuestionsChanged { get; set; }

    string token;

    string hiringLead;

    protected override async Task OnInitializedAsync()
    {
        nextPage = false;
        prevPage = false;

        token = await localStorage.GetItemAsync<string>("jwt_token");

        AppUserList = await HttpClient.GetListJsonAsync<List<AppUser>>("https://xebecapi.azurewebsites.net/api/user", new AuthenticationHeaderValue("Bearer", token));
        AppUserList = AppUserList.Where(x => x.role != "Candidate").ToList();

        collaborator = await HttpClient.GetListJsonAsync<List<AppUser>>("https://xebecapi.azurewebsites.net/api/collaboratorsassigned", new AuthenticationHeaderValue("Bearer", token));
        collaborator = collaborator.Where(x => x.role == "Collaborator").ToList();

        collaborators = await HttpClient.GetListJsonAsync<List<CollaboratorsAssigned>>("https://xebecapi.azurewebsites.net/api/collaboratorsassigned", new AuthenticationHeaderValue("Bearer", token));

        CollabQuestions = await HttpClient.GetListJsonAsync<List<CollaboratorQuestion>>("https://xebecapi.azurewebsites.net/api/collaboratorquestion", new AuthenticationHeaderValue("Bearer", token));

        //check for hiring lead, if it exists, load it
        try
        {
            HiringLead = AppUserList.Find(y => y.id == collaborators.Find(x => x.JobId == JobId && x.Name == "Hiring Manager").AppUserId);
        }
        catch
        {
            Console.WriteLine("No hiring lead for this job");
        }

        //same for collaborators
        try
        {
            foreach (var collab in collaborators.Where(x => x.JobId == JobId && x.Name == "Collaborator"))
            {
                ListOfCollaborators.Add(AppUserList.Find(x => x.id == collab.AppUserId));
            }
        }
        catch
        {
            Console.WriteLine("No collaborators");

        }

        //questions and their collabs

        try
        {
            foreach (var question in ChosenQuestions)
            {
                QuestionsDictionary.Add(question, new List<AppUser>());

                foreach (var k in CollabQuestions.Where(x => x.FormQuestionId == question.id))
                {
                    QuestionsDictionary[question].Add(AppUserList.FirstOrDefault(x => x.id == k.AppUserId));
                }
            }
        }
        catch
        {
            Console.WriteLine("Problem loading questions");
        }

    }

    private async Task Save()
    {
        //needs to first check what exists, and update accordingly.. yikes

        //if (HiringLead != "")
        //{
        //    CollaboratorsAssigned lead = new CollaboratorsAssigned();
        //    lead.Name = "Hiring Manager";
        //    lead.AppUserId = AppUserList.FirstOrDefault(x => HiringLead.Contains(x.name) && HiringLead.Contains(x.surname)).id;
        //    lead.JobId = JobId;

        //    await HttpClient.PostJsonAsync<CollaboratorsAssigned>("https://xebecapi.azurewebsites.net/api/collaboratorsassigned", lead, new AuthenticationHeaderValue("Bearer", token));
        //}

        //if (SelectedUsers.Count != 0)
        //{
        //    foreach (var collab in SelectedUsers)
        //    {
        //        CollaboratorsAssigned collaborator = new CollaboratorsAssigned();
        //        collaborator.Name = "Collaborator";
        //        collaborator.AppUserId = AppUserList.FirstOrDefault(x => collab.Contains(x.name) && HiringLead.Contains(x.surname)).id;
        //        collaborator.JobId = JobId;

        //        await HttpClient.PostJsonAsync<CollaboratorsAssigned>("https://xebecapi.azurewebsites.net/api/collaboratorsassigned", collaborator, new AuthenticationHeaderValue("Bearer", token));
        //    }
        //}

        //if (QuestionsDictionary.Count != 0)
        //{
        //    foreach (var collab in QuestionsDictionary)
        //    {
        //        //<formquestion, appuser>

        //        CollaboratorQuestion cq = new CollaboratorQuestion();
        //        cq.FormQuestionId = collab.Key.id;
        //        cq.AppUserId = AppUserList.FirstOrDefault(x => collab.Value.Contains(x.name) && HiringLead.Contains(x.surname)).id;

        //        await HttpClient.PostJsonAsync<CollaboratorQuestion>("https://xebecapi.azurewebsites.net/api/collaboratorquestion", cq, new AuthenticationHeaderValue("Bearer", token));
        //    }
        //}

    }

    private async Task testfunc(IEnumerable<AppUser> value)
    {
        //SelectedUsers = value;
    }

    public async Task AddToCollab(AppUser user)
    {
        //AppUser ques = new CustomQuestion();
        //ListOf .FirstOrDefault(x => e.Value.ToString() == x.questionDescription);

        ListOfCollaborators.Add(user);

    }

    private async Task TestClick(ChangeEventArgs e)
    {
        hiringLead = e.Value.ToString();

    }

    private void Prev()
    {
        prevPage = true;
    }

    private void Next()
    {
        //this should probably also save, or alert the user that changes are not saved
        nextPage = true;
    }

    public async Task AddToCollaborator(ChangeEventArgs e)
    {
        AppUser collab = new AppUser();
        collab = AppUserList.FirstOrDefault(x => e.Value.ToString() == x.name);
        //string x = e.Value.ToString();
        //Console.WriteLine(x);

        AppUser temp = new AppUser();
        temp.id = collab.id;
        temp.email = collab.email;
        temp.role = collab.role;
        temp.passwordhash = collab.passwordhash;
        temp.name = collab.name;
        temp.surname = collab.surname;
        temp.registered = collab.registered;
        temp.linkVisits = collab.linkVisits;
        temp.imageUrl = collab.imageUrl;

        ListOfCollaborators.Add(temp);
        await CollaboratorChanged.InvokeAsync(AppUserList);

        Console.WriteLine("Check");

    }

    public async Task AddHiringLead(ChangeEventArgs e)
    {
        AppUser Lead = new AppUser();
        Lead = AppUserList.FirstOrDefault(x => e.Value.ToString() == x.name);

        AppUser temp = new AppUser();
        temp.id = Lead.id;
        temp.email = Lead.email;
        temp.role = Lead.role;
        temp.passwordhash = Lead.passwordhash;
        temp.name = Lead.name;
        temp.surname = Lead.surname;
        temp.registered = Lead.registered;
        temp.linkVisits = Lead.linkVisits;
        temp.imageUrl = Lead.imageUrl;

        HiringLeads.Add(temp);
        await CollaboratorChanged.InvokeAsync(AppUserList);

        //if(HiringLeads.Count >= 1)
        //{
        //    await jsRuntime.InvokeAsync<string>("alert", "You can only select 1 hiring lead");
        //}

    }

    private void RemoveCollab(AppUser user)
    {
        ListOfCollaborators.RemoveAll(q => q.id == user.id);
        Console.WriteLine("Removed");

    }

    public async Task ChangeColor(ChangeEventArgs e)
    {
        string color = "crown";

    }

}