@using Bogus
@using XebecPortal.UI.Services.Models
@using System.Text
@using XebecPortal.UI.Utils.Handlers;
@using System.Net.Http.Headers;
@inject HttpClient HttpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .collaborators-container {
        height: 55vh;
        width: 50%;
        margin-left: 25%;
        margin-right: 25%;
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
        display: flex;
        justify-content: center;
    }

    .collaborators-left::-webkit-scrollbar {
        width: 12px !important;
        background-color: white !important;
    }

    .collaborators-left::-webkit-scrollbar-track {
        background: white !important;
    }

    .collaborators-left::-webkit-scrollbar-thumb {
        /* background: #f7f7f7 !important;*/
        background-color: #666666 !important;
    }

        .collaborators-left::-webkit-scrollbar-thumb:hover {
            background-color: #666666 !important;
            cursor: pointer !important;
        }

    .collaborators-left {
        height: 55vh;
        width: 50%;
    }

    .collaborators-right {
        height: 55vh;
        width: 50%;
        border-left: black 0.1em solid;
    }

    .collaborators-heading {
        height: 5vh;
        margin-top: 2.5vh;
        margin-bottom: 2.5vh;
        width: 100%;
        text-align: center;
    }

    .collaborators-heading-text {
        font-family: opensans-condensed-bold;
        font-weight: 800;
        font-size: 1.5em;
        color: #00bcae !important;
    }

    .collaborators-left-main {
        height: 40vh;
        overflow-y: auto;
        width: 100%;
        margin-bottom: 5vh;
    }


    .collaborators-left-table {
        height: 45vh;
        width: 80%;
        margin-left: 10%;
        margin-right: 10%;
    }

    .collaborators-left-row {
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.4), 0 2px 10px 0 rgba(0,0,0,0.4);
        height: 8vh;
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
    }

        .collaborators-left-row:hover {
            box-shadow: 0 2px 5px 0 rgba(0,0,0,1), 0 2px 10px 0 rgba(0,0,0,1);
            color: white;
            font-family: opensans-condensed-bold;
            font-weight: 900;
            font-size: 1em;
            margin-bottom: 5px;
            background-color: black;
            cursor: pointer;
        }

    .appform-container {
        height: 55vh;
        width: 70%;
        margin-left: 15%;
        margin-right: 15%;
        background-color: rgba(255,255,255,1);
        border: solid white 0.1em;
        box-shadow: 0 2px 5px 0 rgba(0,0,0, 0.2), 0 2px 10px 0 rgba(0,0,0,0.1);
        display: flex;
    }

    .appform-left-buttons {
        margin-top: 5vh;
        height: 5vh;
        width: 100%;
    }

    .appform-left-main {
        height: 35vh;
        overflow-y: auto;
        overflow-x: hidden;
        width: 100%;
        padding: 5px;
    }

    .appform-left-row {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px, rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;
        border-radius: 20px !important;
        min-height: 5vh;
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
        padding: 5px !important;
    }

    .appform-left-row-selected {
        border-radius: 20px !important;
        min-height: 9vh;
        color: #00bcae;
        !important;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin-bottom: 5px;
        background-color: rgb(243,242,242);
        min-width: 100%;
        transition: 0.1s;
        padding: 5px !important;
        overflow: hidden !important;
        cursor: pointer;
    }

    .appform-left-row:hover {
        box-shadow: 0 2px 5px 0 rgba(0,0,0,1), 0 2px 10px 0 rgba(0,0,0,1);
        color: black !important;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin-bottom: 5px;
        background-color: rgb(243,242,242);
        min-width: 100%;
        transition: 0.1s;
        cursor: pointer;
    }

    .appform-right-row {
        box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px, rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;
        border-radius: 10px !important;
        min-height: 7vh;
        min-width: 100%;
        margin-bottom: 5px;
        background-color: rgba(255,255,255,1);
    }

    .appform-text {
        color: black;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        margin: 0;
        padding: 0;
        width: 90%;
    }

    .question-select {
        width: 500px;
        height: 500px;
        background-color: #f2f2f2;
        border-radius: 5px;
        border: 2px solid grey;
    }

    .question-button {
        width: 80%;
        margin-left: 10%;
        height: 15%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .form-questions {
        height: 75%;
        overflow: auto;
    }

    .form-button {
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 350px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .delete-popup {
        position: absolute;
        margin: 0 auto;
        top: 18%;
        width: 500px;
        height: 450px;
        background-color: #f2f2f2;
        border: 2px solid black;
        border-radius: 5px;
        animation-name: fade-in;
        animation-duration: 0.3s;
    }

    .add-popup-header {
        width: 100%;
        height: 15%;
        display: flex;
        align-items: center;
    }

    .add-popup-body {
        width: 100%;
        height: 60%;
        display: flex;
        justify-content: center;
    }

    .add-popup-type {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .add-popup-button {
        width: 100%;
        height: 15%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .delete-popup-header {
        width: 100%;
        height: 10%;
        display: flex;
        justify-content: space-around;
        align-items: center;
    }

    .delete-popup-body {
        width: 100%;
        height: 90%;
        display: flex;
        justify-content: center;
        overflow-y: scroll;
        background-color: white;
    }

    .delete-popup-question {
        word-wrap: break-word;
        width: 450px;
    }

    .appform-close-button {
        width: 10%;
        text-align: end;
    }

    .form-preview-question {
        width: 100%;
        display: flex;
        height: 50%;
    }

    .form-preview-input {
        width: calc(100% - 10px);
        margin: 0;
        padding: 0;
        height: 50%;
    }

    @@keyframes fade-in {
        from {
            opacity: 0;
            top: 10%
        }

        to {
            opacity: 1;
            top: 18%
        }
    }

    .appform-main-button {
        height: 5vh;
        background-color: #00bcae;
        border: none;
        border-radius: 100px;
        color: white;
        text-align: center;
        font-family: opensans-bold;
        font-weight: 700;
    }

        .appform-main-button:hover {
            background-color: #d35bc9;
            border: none;
            border-radius: 100px;
            color: white;
            text-align: center;
            font-family: opensans-bold;
            font-weight: 700;
        }

    .collaborators-left-main {
        padding: 10px;
    }

    .developer-profile-picture {
        height: 7vh;
        margin-right: 1vw;
    }

        .developer-profile-picture img {
            height: 100%;
            border-radius: 50%;
            box-shadow: rgba(6, 24, 44, 0.4) 0 0 0 2px, rgba(6, 24, 44, 0.65) 0 4px 6px -1px, rgba(255, 255, 255, 0.08) 0 1px 0 inset;
            object-fit: cover;
        }

    .collaborator-div {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .collaborator-name {
        font-size: 2rem;
    }

    .selected-question {
        background: red;
    }


    details > summary {
        list-style-type: '▶';
    }

    details[open] > summary {
        list-style-type: '🔽';
        color: black;
        display: inline-block;
    }

    .form-control:hover, .access-question:hover {
        cursor: pointer;
    }

    .btn-info-email {
        background-color: #d35bc9;
        color: whitesmoke;
    }

    .info-email {
        color: #d35bc9;
    }

    /*new styles*/
    .collaborators-form {
        width: 100%;
        height: 100%;
    }

    .collaborators-title {
        height: 8%;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .collaborators-title-text {
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: opensans-condensed-bold;
        color: #004393;
        background-color: transparent;
        font-size: 1.8em;
    }

    .collaborators-hiring-lead {
        width: 50%;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .hiring-lead-container {
        width: 100%;
        height: 6%;
        display: flex;
        justify-content: center;
    }

    .dropdown-container {
        width: 100%;
        height: 6%;
        display: flex;
        justify-content: center;
    }

    .collaborators-dropdown {
        width: 50%;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .hiring-lead-selected {
        width: 100%;
        height: 5%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .collaborators-tooltip {
        width: 100%;
        height: 5%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .collaborators-tooltip-text {
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: opensans-condensed-bold;
        color: black;
        background-color: transparent;
        font-size: 1em;
    }

    .collaborators-listed {
        width: 100%;
        height: 23%;
        display: flex;
        justify-content: center;
        align-items: center;
        padding-top: 5px;
    }

    .collaborators-listed-list {
        columns: 3;
        max-width: 100%;
        height: 100%;
        overflow-x: hidden;
    }

    .collaborators-questions-area {
        width: 100%;
        height: 40%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .collaborators-question-card {
        width: 160px;
        height: 150px;
        border-radius: 8px;
        background-color: lightgrey;
    }

    .collaborators-question-card-title {
        height: 20%;
        width: 100%;
        color: white;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
        padding-top: 2px;
    }

    .collaborators-question-card-body {
        height: 80%;
        width: 100%;
        display: flex;
        justify-content: center;
    }

    .collaborators-question-card-list {
        columns: 1;
    }

    .collaborators-appuser-item {
        color: #00BCAE;
        padding: 4px;
    }

    .collaborators-chosen-list {
        overflow-y: auto;
        max-height: 100%;
    }

    .question-appuser-item {
        width: 100px;
        height: 30px;
        word-break: break-word;
        border-radius: 10px;
        background-color: lightpink;
        color: #d35bc9;
    }
</style>
<!--Tables of developers/HR-->

@if (!prevPage && !nextPage)
{
    <div class="appform-container">
        <div class="collaborators-form">
            <div class="collaborators-title">
                <h2 class="collaborators-title-text">SELECT COLLABORATORS</h2>
            </div>
            <div class="hiring-lead-container">
                <div class="collaborators-hiring-lead">
                    Select the hiring lead for this job:
                    <select @onchange="SelectHiringLead">
                        <option selected disabled>
                            Select Collaborators
                        </option>
                        @foreach (var collaborator in collaborators)
                        {
                            <option>@collaborator.name @collaborator.surname</option>
                        }
                    </select>
                </div>
            </div>

            <div class="hiring-lead-selected">
                @if (HiringLead != "")
                {
                    <div class="collaborator-item-pill">
                        @HiringLead
                        <span @onclick="RemoveHiringLead">
                            <i class="fa fa-question-circle edit-icon"></i>
                        </span>
                    </div>
                }

            </div>
            <div class="dropdown-container">
                <div class="collaborators-dropdown">
                    Select collaborators:
                    <select @onchange="SelectCollaborator">
                        <option selected disabled>
                            Select Collaborators
                        </option>
                        @foreach (var collaborator in collaborators)
                        {
                            <option>@collaborator.name @collaborator.surname</option>
                        }
                    </select>
                </div>
            </div>

            <div class="collaborators-tooltip">
                <h3 class="collaborators-tooltip-text">
                    Drag Collaborators to allow them to view application form answers.
                </h3>
            </div>
            <div class="collaborators-listed">
                <ul class="collaborators-listed-list" ondragover="event.preventDefault();" ondragstart="event.dataTransfer.setData('', event.target.id);">
                    @foreach (var collaborator in SelectedUsers)
                    {
                        <li class="collaborators-appuser-item" draggable="true" @ondragstart="@(() => DragCollaborator(collaborator))">
                            @collaborator
                            <span @onclick="() => RemoveFromCollabs(collaborator)">
                                <i class="fa fa-question-circle edit-icon"></i>
                            </span>
                        </li>
                    }
                </ul>
            </div>





            <div class="collaborators-questions-area">
                @foreach (var q in QuestionsDictionary)
                {
                    <div class="collaborators-question-card" @ondrop="() => AddToList(q.Value)" ondragover="event.preventDefault();">
                        <div class="collaborators-question-card-title">
                            @q.Key.question
                        </div>
                        <br />
                        <div class="collaborators-question-card-body">
                            <ul class="collaborators-chosen-list">
                                @foreach (var user in q.Value)
                                {
                                    <li class="question-appuser-item" draggable="true" @ondragend="RemoveItem">
                                        <div>
                                            @user
                                        </div>
                                        <span @onclick="() => RemoveFromQuestion(user, q.Value)">
                                            <i class="fa fa-question-circle edit-icon"></i>
                                        </span>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>

    <input type="button" value="Save" class="createjob-bottom-main-button" @onclick="Save" />
    <input type="button" value="Next" class="createjob-bottom-main-button" @onclick="Next" />

}
else if (nextPage)
{
    <XebecPortal.UI.Pages.HR.PhaseControlTool />
}
else if (prevPage)
{
    <XebecPortal.UI.Pages.HR.ApplicationFormControlTool />
}


@*<input type="button" value="Prev" class="createjob-bottom-main-button" @onclick="Save" />
    <input type="button" value="Prev" class="createjob-bottom-main-button" @onclick="Save" />
    <input type="button" value="Prev" class="createjob-bottom-main-button" @onclick="Save" />*@






@code {

    private string CurrentItem;
    private List<AppUser> collaborators = new List<AppUser>();
    string HiringLead = "";
    private List<string> SelectedUsers = new List<string>();
    public Dictionary<FormQuestion, List<string>> QuestionsDictionary = new Dictionary<FormQuestion, List<string>>();

    bool nextPage;
    bool prevPage;

    public List<CollaboratorQuestion> CollabQuestions = new List<CollaboratorQuestion>();


    int JobId = 1;

    //[Parameter]
    //public int JobId { get; set; }

    //our questions
    [Parameter]
    public List<FormQuestion> ChosenQuestions { get; set; }

    string token;

    protected override async Task OnInitializedAsync()
    {
        nextPage = false;
        prevPage = false;

        token = await localStorage.GetItemAsync<string>("jwt_token");

        //this could be limited to non candidate roles
        collaborators = await HttpClient.GetListJsonAsync<List<AppUser>>("https://xebecapi.azurewebsites.net/api/user", new AuthenticationHeaderValue("Bearer", token));
        CollabQuestions = await HttpClient.GetListJsonAsync<List<CollaboratorQuestion>>("https://xebecapi.azurewebsites.net/api/collaboratorquestion", new AuthenticationHeaderValue("Bearer", token));


        if (ChosenQuestions != null)
        {
            foreach (var q in ChosenQuestions)
            {
                QuestionsDictionary.Add(q, new List<string>());

                foreach (var k in CollabQuestions.Where(x => x.FormQuestionId == q.id))
                {
                    QuestionsDictionary[q].Add(collaborators.FirstOrDefault(x => x.id == k.AppUserId).name);
                }
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {

    }


    private void DragCollaborator(string item)
    {
        CurrentItem = item;
    }

    private void AddToList(List<string> list)
    {
        if (!list.Exists(x => x == CurrentItem))
        {
            list.Add(CurrentItem);
        }
    }

    private void SelectCollaborator(ChangeEventArgs e)
    {
        if (SelectedUsers.Count == 0)
        {
            SelectedUsers.Add(e.Value.ToString());

        }
        else if (!SelectedUsers.Exists(q => q == e.Value.ToString()))
        {
            SelectedUsers.Add(e.Value.ToString());
        }
    }

    private void SelectHiringLead(ChangeEventArgs e)
    {
        HiringLead = e.Value.ToString();
    }

    private void RemoveItem(DragEventArgs e)
    {
        Console.WriteLine(e.DataTransfer.Items[0]);
    }

    private void RemoveHiringLead()
    {
        HiringLead = "";
    }

    private void RemoveFromCollabs(string user)
    {
        SelectedUsers.Remove(user);
    }

    private void RemoveFromQuestion(string user, List<string> list)
    {
        list.Remove(user);
    }

    private async Task Save()
    {
        if (HiringLead != "")
        {
            CollaboratorsAssigned lead = new CollaboratorsAssigned();
            lead.Name = "Hiring Manager";
            lead.AppUserId = collaborators.FirstOrDefault(x => HiringLead.Contains(x.name) && HiringLead.Contains(x.surname)).id;
            lead.JobId = JobId;

            await HttpClient.PostJsonAsync<CollaboratorsAssigned>("https://xebecapi.azurewebsites.net/api/collaboratorsassigned", lead, new AuthenticationHeaderValue("Bearer", token));
        }

        if (SelectedUsers.Count != 0)
        {
            foreach (var collab in SelectedUsers)
            {
                CollaboratorsAssigned collaborator = new CollaboratorsAssigned();
                collaborator.Name = "Collaborator";
                collaborator.AppUserId = collaborators.FirstOrDefault(x => collab.Contains(x.name) && HiringLead.Contains(x.surname)).id;
                collaborator.JobId = JobId;

                await HttpClient.PostJsonAsync<CollaboratorsAssigned>("https://xebecapi.azurewebsites.net/api/collaboratorsassigned", collaborator, new AuthenticationHeaderValue("Bearer", token));
            }
        }

        if (QuestionsDictionary.Count != 0)
        {
            foreach (var collab in QuestionsDictionary)
            {
                //<formquestion, appuser>

                CollaboratorQuestion cq = new CollaboratorQuestion();
                cq.FormQuestionId = collab.Key.id;
                cq.AppUserId = collaborators.FirstOrDefault(x => collab.Value.Contains(x.name) && HiringLead.Contains(x.surname)).id;

                await HttpClient.PostJsonAsync<CollaboratorQuestion>("https://xebecapi.azurewebsites.net/api/collaboratorquestion", cq, new AuthenticationHeaderValue("Bearer", token));
            }
        }


    }


    private void Prev()
    {
        prevPage = true;
    }

    private void Next()
    {
        nextPage = true;
    }

}

