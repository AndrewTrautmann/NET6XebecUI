@page "/myjobs"
@using XebecPortal.UI.Interfaces
@using XebecPortal.UI.Services.MockServices
@using XebecPortal.UI.Services.Models
@using JetBrains.Annotations
@using System.Globalization
@inject IJobDataService _jobDataService
@inject IApplicationDataService _applicationDataService
@inject IApplicationPhaseHelperDataService _applicationPhaseHelperDataService
@inject IMyJobListDataService _myJobListDataService
<style>
    .main-wrapper {
        background: transparent;
        width: 100%;
        min-height: 100%;
        overflow: hidden;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-template-rows: 10% auto;
        grid-gap: 10px;
        max-height: 100%;
        padding: 20px 10% 0 10%;
    }

    .search-panel, .heading, .line {
        grid-column: span 4;
        background: rgba(255,255,255,0.7);
        box-shadow: rgba(0, 0, 0, 0.1) 0 10px 15px -3px, rgba(0, 0, 0, 0.05) 0 4px 6px -2px;
    }

    .line {
        background: black;
    }

    .main-wrapper-child {
        border-radius: 10px;
        /* background: rgba(167,169,171,0.22);*/
        padding-top: 10px;
    }

    .job-cards {
        display: grid;
        grid-template-columns: repeat(2, fr);
        align-content: start;
        /*grid-template-columns: repeat(@@maxJobs, 1fr);*/
        background: rgba(167,169,171,0.22);
        overflow-y: auto;
        grid-row-gap: 1vh;
        padding: 5px;
    }

        .job-cards::-webkit-scrollbar-track {
            background: linear-gradient(#a7a9ab 0%, rgba(0,51,64,0.09) 30%);
            border-radius: 5px;
            transform: translateX(10vw);
        }

        .job-cards::-webkit-scrollbar {
            width: 0.09vw;
            background-color: rgba(0,51,64,0.6);
        }

        .job-cards::-webkit-scrollbar-thumb {
            background: linear-gradient(transparent 30%, #fff 30%);
        }

        .job-cards div {
            /*border: #003340 3px solid;*/
            border: none;
            border-left: rgba(0, 188, 174,1) 10px solid;
            border-radius: 10px;
            background: rgba(255,255,255,0.7);
            margin: 0 5px 0 3px;
        }

            .job-cards div:first-child {
                background: rgba(0, 188, 174,1);
                border-radius: 5px;
                margin: 0;
            }

    .card-header {
        position: sticky;
        top: -5px;
        box-sizing: border-box;
        height: fit-content;
        transition: 0.3s fade;
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
    }

    .job-card {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: repeat(4, fit-content());
        grid-row-gap: 0;
        height: fit-content;
        box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;
    }

    .position, .company {
        grid-column: span 2;
    }
    /* text and input: sizes and content placement*/
    .heading {
        width: fit-content;
        height: fit-content;
        justify-self: start;
        padding: 0 5%;
    }

        .heading h1 {
            color: #2d1c13;
            text-align: left;
            font-size: 3vw;
            font-weight: 900;
        }

        .heading small {
            color: rgba(0,0,0,0.39);
            text-transform: uppercase;
            font-size: 0.5vw;
        }

    

    .card-header {
        font-size: 1.5vw;
        text-align: center;
        color: white;
        margin-bottom: 3vh;
    }

    .job-card {
        padding: 3px 5px;
    }

        .position, .company, .job-card small {
            text-overflow: ellipsis;
            word-wrap: break-word;
            display: block;
        }

    .position {
        font-size: 1.3vw;
        font-weight: 700;
    }

    .company {
        font-size: 1vw;
        font-weight: 500;
    }

    .job-card small {
        font-size: 0.6vw;
    }

    .addition-details {
        margin-left: 3px;
    }

    .left-text {
        text-align: end;
        margin-right: 5px;
    }

    .rejection-card {
    }
</style>
@if (_allJobs != null)
{
    <div class="main-wrapper">
    <!--Search-Box-->
    <div class="row" style="height:5vh; grid-column: span 4;">
        <div class="col">
            <div class="input-group d-flex justify-content-center">
                <span class="input-group-text">
                    <i class="fa fa-search"></i>
                </span>
                <input class="form-control" style="max-width: 50%" type="text" placeholder="Search" value="@_keyword" @oninput="@OnKeywordChanged"/>
            </div>
        </div>
    </div>
    <div class="main-wrapper-child job-cards">
        <div class="card-header d-flex align-content-center justify-content-center ">
            <span>Applications</span>
        </div>
        @foreach (var application in _applications)
        {
            <div class="job-card">
                <span class="position">@application.Position</span>
                <span class="company">@application.Company</span>
                <small class="addition-details text-muted">@application.Location</small>
                <small class="phase left-text">@application.Phase</small>
                <small class="addition-details text-muted">Date Advertized: @application.LastMoved</small>
                <small class="addition-details left-text text-muted">Application Date : @application.ApplicationDate</small>
            </div>
        }
    </div>
    <div class="main-wrapper-child job-cards">
        <div class="card-header  d-flex align-content-center justify-content-center">
            <span>In Progress</span>
        </div>
        @foreach (var application in _inProgress)
        {
            <div class="job-card">
                <span class="position">@application.Position</span>
                <span class="company">@application.Company</span>
                <small class="addition-details text-muted">@application.Location</small>
                <small class="phase left-text">@application.Phase</small>
                <small class="addition-details text-muted">Date Advertized: @application.LastMoved</small>
                <small class="addition-details left-text text-muted">Application Date : @application.ApplicationDate</small>
            </div>
        }
    </div>
    <div class="main-wrapper-child job-cards">
        <div class="card-header  d-flex align-content-center justify-content-center">
            <span>Offers</span>
        </div>
        @foreach (var application in _offers)
        {
            <div class="job-card">
                <span class="position">@application.Position</span>
                <span class="company">@application.Company</span>
                <small class="addition-details text-muted">@application.Location</small>
                <small class="phase left-text">@application.Phase</small>
                <small class="addition-details text-muted">Date Advertized: @application.LastMoved</small>
                <small class="addition-details left-text text-muted">Application Date : @application.ApplicationDate</small>
            </div>
        }
    </div>
    <div class="main-wrapper-child job-cards rejection-card">
        <div class="card-header  d-flex align-content-center justify-content-center bg-danger border-0">
            <span>Rejections</span>
        </div>
        @foreach (var rejection in _rejections)
        {
            <div class="job-card border-left-1 border-danger p-2">
                <span class="position">@rejection.Position</span>
                <span class="company">@rejection.Company</span>
                <small class="addition-details">@rejection.Location</small>
                <small class="phase left-text">Last Phase : @rejection.Phase</small>
                <small class="addition-details">Date Advertized: @rejection.ApplicationDate</small>
                <small class="addition-details left-text">Date Closed : @rejection.LastMoved</small>
            </div>
        }
    </div>
</div>
}
else
{
    
    <button class="btn btn-primary" type="button" disabled>
        <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
        Getting Jobs....
    </button>
}

@code {
    List<MyJob> _allJobs;
    List<MyJob> _applications;
    List<MyJob> _rejections;
    List<MyJob> _inProgress;
    List<MyJob> _offers;

    private string _keyword = string.Empty;
    private List<MyJob> _initJobs;

    [Parameter]
    [CanBeNull]
    public string Keyword { get; set; }

    [Parameter]
    [CanBeNull]
    public EventCallback<string> KeywordChanged { get; set; }

    protected override void OnInitialized()
    {
         _allJobs = _myJobListDataService.GetAllJobs();
        //_allJobs = (await _myJobListDataService.GetAllJobsByAppUserId(3)).ToList();
        
        _initJobs = _allJobs;
        _applications = _allJobs.FindAll(
            match: a => a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Application)) && a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.InProgress)));
        _inProgress = _allJobs.FindAll(
            match: a => !(a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Application)) || a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Offer))) && a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.InProgress)));
        _offers = _allJobs.FindAll(
            match: a => (a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Offer))) && a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.InProgress)));
        _rejections = _allJobs.FindAll(
            match: a => a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.Rejected)));
    }

    private Task OnKeywordChanged(ChangeEventArgs e)
    {
        _keyword = e?.Value?.ToString();

        if (string.IsNullOrWhiteSpace(_keyword))
        {
            _allJobs = _initJobs;
            _applications = _allJobs.FindAll(
                match: a => a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Application)) && a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.InProgress)));
            _inProgress = _allJobs.FindAll(
                match: a => !(a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Application)) || a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Offer))) && a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.InProgress)));
            _offers = _allJobs.FindAll(
                match: a => (a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Offer))) && a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.InProgress)));
            _rejections = _allJobs.FindAll(
                match: a => a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.Rejected)));
            return Task.CompletedTask;
        }

        _allJobs = _initJobs.FindAll(a => a.Position.ToLower().Contains(_keyword.ToLower()) || a.Company.ToLower().Contains(_keyword.ToLower()) ||
                                          a.Location.ToLower().Contains(_keyword.ToLower()) || a.Phase.ToLower().Contains(_keyword.ToLower()) ||
                                          a.Status.ToLower().Contains(_keyword.ToLower()) ||
                                          a.LastMoved.ToString(CultureInfo.CurrentCulture).ToLower().Contains(_keyword.ToLower()) ||
                                          a.ApplicationDate.ToString(CultureInfo.CurrentCulture).ToLower().Contains(_keyword.ToLower()));

        _applications = _allJobs.FindAll(
            match: a => a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Application)) && a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.InProgress)));
        _inProgress = _allJobs.FindAll(
            match: a => !(a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Application)) || a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Offer))) && a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.InProgress)));
        _offers = _allJobs.FindAll(
            match: a => (a.Phase.Equals(Enum.GetName(MockMyJobListDataService.Phases.Offer))) && a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.InProgress)));
        _rejections = _allJobs.FindAll(
            match: a => a.Status.Equals(Enum.GetName(MockMyJobListDataService.Statuses.Rejected)));
        return KeywordChanged.InvokeAsync(_keyword);
    }

}