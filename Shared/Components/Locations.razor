@page "/loc"
@inject NavigationManager navmanager
@using System.Media
@using System.Linq;
@using XebecPortal.UI.Shared.Home.Models
@using System;
@using System.IO;
@using System.Threading.Tasks
@using Azure
@using Newtonsoft.Json.Linq
@using System.Net.Http.Headers;
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@inject IJSRuntime JS

<style>
    .locations-component-container {
        height: 20vw;
        width: 20vh;
        background-color: red;
    }

    input[type="text"] {
        height: 8vh;
        width: 10vw;
        border: #00bcae solid 1em;
        border-radius: 20%;
        color: black;
        font-family: opensans-condensed;
        font-size: 1em;
    }

    input::placeholder {
        line-height: 8vh;
        color: #666666;
        font-family: opensans-condensed;
        font-size: 1em;
    }

    .index-form-button {
        background-color: rgba(0, 188, 174,1);
        color: white;
        width: 100px;
        height: 5vh;
        border: none;
        text-align: center;
        font-size: 1em;
        font-weight: 700;
        font-family: opensans-condensed-bold;
        font-weight: 600;
        border: none;
        border-radius: 1em;
    }

        .index-form-button:hover {
            background-color: #d35bc9;
        }
</style>

<div class="locations-component-container">
    <input type="text" @bind-value="item" placeholder="Enter City, State or Country" />
    <input type="button" @onclick="Search" value="Search" />
</div>

@code {

    private string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfZW1haWwiOiJpdml3ZUBuZWJ1bGEuY28uemEiLCJhcGlfdG9rZW4iOiJHUTNDZkxTczVxSWZ2RldNcmtfWkREcTZNcXdGWUJPSHlJdzNuMGliNVBYbUFsUnFzcnR3TlhNRkFQeUVEemppMWxzIn0sImV4cCI6MTY1MjE3Nzg4MH0.Yy39UegTNrOmR4H72kSm19y_gx_VKSq3MfSg38HF6nk";
    private string item = "";
    
    private List<string> thesecities = new List<string>();
    private List<string> places = new List<string>();

    private List<string> provinces = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "https://localhost:44364/");
        client.DefaultRequestHeaders.Add("Access-Control-Allow-Methods", "GET");
        client.DefaultRequestHeaders.Add("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        client.DefaultRequestHeaders.Add("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfZW1haWwiOiJpdml3ZUBuZWJ1bGEuY28uemEiLCJhcGlfdG9rZW4iOiJHUTNDZkxTczVxSWZ2RldNcmtfWkREcTZNcXdGWUJPSHlJdzNuMGliNVBYbUFsUnFzcnR3TlhNRkFQeUVEemppMWxzIn0sImV4cCI6MTY1MjE3Nzg4MH0.Yy39UegTNrOmR4H72kSm19y_gx_VKSq3MfSg38HF6nk");
        client.DefaultRequestHeaders.Add("Accept", "application/json");
        string country = "South Africa";
        var res = await client.GetStringAsync("https://www.universal-tutorial.com/api/states/" + country);
        int start = 0;
        int end = 0;
        string line = "";

        while (end < res.Length - 2)
        {
            start = res.IndexOf('{', end);
            end = res.IndexOf('}', start);
            line = res.Substring(start+1, end - start-1);
            string[] objects = line.Split(':');
            provinces.Add(objects[1]);
            Console.WriteLine(objects[1]);
        }
    }

    private async Task<List<string>> SetCities(string state)
    {
        List<string> cities = new List<string>();
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "https://localhost:44364/");
        client.DefaultRequestHeaders.Add("Access-Control-Allow-Methods", "GET");
        client.DefaultRequestHeaders.Add("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        client.DefaultRequestHeaders.Add("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfZW1haWwiOiJpdml3ZUBuZWJ1bGEuY28uemEiLCJhcGlfdG9rZW4iOiJHUTNDZkxTczVxSWZ2RldNcmtfWkREcTZNcXdGWUJPSHlJdzNuMGliNVBYbUFsUnFzcnR3TlhNRkFQeUVEemppMWxzIn0sImV4cCI6MTY1MjE3Nzg4MH0.Yy39UegTNrOmR4H72kSm19y_gx_VKSq3MfSg38HF6nk");
        client.DefaultRequestHeaders.Add("Accept", "application/json");
        var res = await client.GetStringAsync("https://www.universal-tutorial.com/api/cities/" + state);
        Console.WriteLine(state);
        Console.WriteLine(res);
        int start = 0;
        int end = 0;
        string line = "";

        while (end < res.Length - 2)
        {
            start = res.IndexOf('{', end);
            end = res.IndexOf('}', start);
            line = res.Substring(start + 1, end - start - 1);
            string[] objects = line.Split(':');
            cities.Add(objects[1]);

        }
        for (int i = 0; i < cities.Count; i++)
        {
            Console.WriteLine(cities[i]);
        }
        return cities;
    }

    private async Task Search()
    {
        places = provinces.FindAll(x => x.Contains(item));

        for (int i = 0; i < provinces.Count; i++)
        {
            Console.WriteLine(provinces[i]);
            thesecities = await SetCities(provinces[i]);
            for (int j = 0; j < thesecities.Count; j++)
            {
                if (thesecities[j].Contains(item))
                {
                    Console.WriteLine(thesecities[j]);
                    places.Add(thesecities + ", " + provinces[i]);
                }
            }
        }

        foreach(string place in places)
        {
            Console.WriteLine(place);
        }
    }
}
