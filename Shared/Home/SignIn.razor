@page "/signin"
@inject NavigationManager navmanager
@inject HttpClient HttpClient
@using System.Linq;
@using XebecPortal.UI.Shared.Home.Models
@inject UserState state
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .overlay-login {
        height: auto;
        width: 100%;
    }

    .login-page {
        height: auto;
        width: 70%;
        display: flex;
        margin-left: 15%;
        margin-right: 15%;
    }

    .login-left {
        height: 70vh;
        width: 40%;
        margin-top: 10vh;
        background-color: white;
    }

    .login-right {
        height: 70vh;
        width: 60%;
        margin-top: 10vh;
        background-size: cover;
        background-position: center;
        background-image: linear-gradient(rgba(0, 188, 174,0.2),rgba(0, 188, 174,0.2)),url(/Img/pexels1.jpg);
    }

    .index-form-heading {
        width: 100%;
        font-family: opensans-condensed-bold;
        text-align: center;
        opacity: 1;
        background-color: transparent;
        height: 10vh;
        padding: 0;
        margin: 0;
    }

    .index-form-login {
        width: 90%;
        margin-left: 5%;
        margin-right: 5%;
        margin-top: 10vh;
        height: auto;
    }

    .index-form-heading-1 {
        font-size: 3em;
        font-weight: 800;
        height: 7vh;
        line-height: 10vh;
        color: #004393;
        font-family: opensans-condensed-bold;
    }

    .index-form-group {
        width: 100%;
        display: flex;
        height: 7vh;
    }


    .index-group {
        border: solid #00bcae 0.2em;
        background-color: transparent;
        height: 7vh;
        width: 100%;
        border-radius: 1em;
    }

    .index-form-icon {
        width: 10%;
        padding-left: 5%;
        text-align: left;
        background-color: transparent;
        color: #00bcae;
        font-size: 1.5em;
        height: 7vh;
        line-height: 7vh;
    }

    input[type="text"], input[type="email"], input[type="password"], select {
        background-color: transparent;
        width: 90%;
        height: 7vh;
        line-height: 7vh;
        font-size: 1em;
        border: none;
        font-weight: 800;
        color: black;
        font-family: opensans-condensed-light;
        padding: 1em 1em 1em 1em;
    }

        input:focus, textarea:focus, select:focus {
            outline: none;
        }

    ::placeholder {
        color: black;
        font-family: opensans-condensed-light;
        font-size: 1em;
        width: 100%;
        font-weight: 900;
    }

    .index-form-register {
        width: 90%;
        margin-left: 5%;
        margin-right: 5%;
        height: auto;
    }

    .index-form-heading-2 {
        font-size: 1.5em;
        font-weight: 700;
        color: #666666;
        height: 3vh;
    }

    .index-form-heading-3 {
        font-size: 0.8em;
        font-weight: 600;
        color: black;
        font-family: opensans-condensed-bold;
        height: 3vh;
    }


    .login-button-div {
        height: 5vh;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
    }

    .index-form-button {
        background-color: rgba(0, 188, 174,1);
        color: white;
        width: 100px;
        height: 5vh;
        border: none;
        text-align: center;
        font-size: 1em;
        font-weight: 700;
        font-family: opensans-condensed-bold;
        font-weight: 600;
        border: none;
        border-radius: 1em;
    }

        .index-form-button:hover {
            background-color: #d35bc9;
        }

    .index-form-or {
        text-align: center;
        height: 3vh;
    }

    .index-form-socials {
        width: 100%;
        display: flex;
        height: 5vh;
    }

    .index-socialmedia-div {
        color: #00bcae;
        font-size: 2em;
        width: 20%;
        height: 5vh;
        margin-left: 13%;
    }

        .index-socialmedia-div:hover {
            color: #d35bc9;
            font-size: 2em;
            width: 20%;
            height: 5vh;
            margin-top: 0vh;
            margin-left: 13%;
        }

    .key-input-group input[type="text"] {
        height: 15vh;
        width: 100%;
        margin-left: 3%;
        border-radius: 1em;
        border: #00bcae solid 0.2em;
        background-color: transparent;
        text-align: center;
        color: black;
        font-size: 1.8em;
        font-weight: 900;
        font-family: opensans-bold;
    }

    .forgot-password {
        display: flex;
        justify-content: flex-end;
    }

    .register-link {
        height: 5vh;
        display: flex;
        justify-content: center;
        padding-bottom: 2.5vh;
        align-items: center;
    }

    .forgotpassword {
        color: rgba(0, 188, 174,1);
        width: auto;
        text-align: right;
        height: 3vh;
        line-height: 3vh;
        font-size: 1em;
        margin-bottom: 0;
        padding-bottom: 0;
        cursor: pointer;
        font-family: 700;
        font-family: opensans-condensed-bold;
    }

        .forgotpassword:hover {
            color: #d35bc9;
            cursor: pointer;
        }
</style>

<div class="overlay-login" id="login">
    <div class="login-page">
        <div class="login-left">
            <form class="index-form-login">
                @if (LoginForm)
                {
                    <div class="form-group index-form-heading">
                        <h1 class="index-form-heading-1">SIGN IN</h1>
                        <h1 class="forgotpassword" style="text-align: center;" @onclick="GoToSignup">Don't have an account? Sign Up</h1>
                    </div>
                    <div class="register-link">

                    </div>

                    <div class="form-group index-form-group index-group">
                        <div class="index-form-icon">
                            <i class="fa fa-user"></i>
                        </div>
                        <input type="email" required placeholder="Email address" @bind="@Email" @ref="SignInElementInFocus" />
                    </div>
                    <div class="form-group index-form-group index-group">
                        <div class="index-form-icon">
                            <i class="fa fa-lock "></i>
                        </div>
                        <input type="password" placeholder="Password" @bind="@Password">
                    </div>
                    <div class="form-group forgot-password">
                        <h1 class="forgotpassword" @onclick="GoToEmail" style="margin-left: 45px;">Forgot Password?</h1>
                    </div>
                    <div class="form-group index-form-or">
                        @if (invalidCredentials)
                        {
                            <h1 class="index-form-heading-3">Invalid credentials</h1>
                        }
                        @if (successfullLogin)
                        {
                            <h1 class="index-form-heading-3">Successful login</h1>
                        }
                        @if (SubmitPressed)
                        {
                            <h1 class="index-form-heading-3">Submit pressed</h1>
                        }
                    </div>
                    <div class="form-group login-button-div">
                        <input type="button" class="index-form-button" @onclick="JWTLogin" value="Submit" />
                    </div>
                }

                @if (EmailForgotPasswordForm)
                {
                    <div class="form-group index-form-heading">
                        <h1 class="index-form-heading-1">ENTER EMAIL</h1>
                    </div>
                    <div class="form-group index-form-group index-group">
                        <div class="index-form-icon">
                            <i class="fa fa-user"></i>
                        </div>
                        <input type="email" required placeholder="Email address" @bind="@Email" @ref="EmailElementInFocus">
                    </div>
                    <div class="form-group forgot-password">
                        <h1 class="forgotpassword" @onclick="GoToLogin">Back</h1>
                    </div>
                    <div class="form-group index-form-or">
                        @if (invalidEmail)
                        {
                            <h1 class="index-form-heading-3">Invalid Email</h1>
                        }
                        @if (validEmail)
                        {
                            <h1 class="index-form-heading-3">Check your email for a confirmation key</h1>
                        }
                        @if (SubmitPressed)
                        {
                            <h1 class="index-form-heading-3">Submit Pressed</h1>
                        }
                    </div>

                    <div class="form-group login-button-div">
                        <input type="button" class="index-form-button" @onclick="SubmitEmail" value="Submit" />
                    </div>

                }

            </form>
        </div>
        <div class="login-right"></div>
    </div>
</div>

@code{

    // Sign In Form bind-values
    private string Email = "";
    private string Password = "";
    private string Password1 = "";
    private string Password2 = "";
    private string Key = "";

    // Validaion booleans
    private bool successfullLogin, invalidCredentials;
    private bool validEmail, invalidEmail;
    private bool validKey, invalidKey;
    private bool invalidPassword;
    private bool validReset, invalidReset;

    // View control booleans
    private bool LoginForm, EmailForgotPasswordForm, KeyForgotPasswordForm, ForgotPasswordForm;

    // Responses
    private bool SubmitPressed;
    private bool BackPressed;
    private string message = "";

    // Element References
    private ElementReference SignInElementInFocus;
    private ElementReference EmailElementInFocus;

    // Models
    private SignInModel signIn = new SignInModel();
    private SignInResult thisUser = new SignInResult();
    private ForgotPasswordModel forgot = new ForgotPasswordModel();

    protected override async Task OnInitializedAsync()
    {
        await GoToLogin();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (LoginForm)
        {
            await SignInElementInFocus.FocusAsync();
        }
        else if (EmailForgotPasswordForm)
        {
            await EmailElementInFocus.FocusAsync();
        }
    }

    string test;
    private async Task Login()
    {
        SubmitPressed = true;
        signIn.Email = Email;
        signIn.Password = Password;

        Console.WriteLine("Sign in email " + signIn.Email);
        Console.WriteLine("Sign In password " + signIn.Password);
        using (var msg = await HttpClient.PostAsJsonAsync<SignInModel>("https://xebecapi.azurewebsites.net/api/auth/loginnew", signIn)) // Checking to see if the user exists in our system
        {
            if (msg.IsSuccessStatusCode)
            {
                SignInResult result = await msg.Content.ReadFromJsonAsync<SignInResult>();

                state.AppUserId = result.AppUserId;
                state.Email = result.Email;
                state.Name = result.Name;
                state.Surname = result.Surname;
                state.Role = result.Role;
                state.Avator = result.Avator;
                // state.Title = result.Title;

                test = result.jwtBearer;

                if (test != string.Empty)
                {
                    Console.WriteLine("Token has a value");
                    Console.WriteLine("Token value: " + test);
                }
                else
                {
                    Console.WriteLine("Token Value is empty");
                }

                message = result.Message;

                if (result.Success)
                {
                    successfullLogin = true;
                    state.isLoggedIn = true;
                    SubmitPressed = false;
                    navmanager.NavigateTo("/main");

                }
                else if (message.Equals("User/password not found."))
                {
                    invalidCredentials = true;
                    SubmitPressed = false;
                    successfullLogin = false;
                }
            }
        }
    }

    private async Task GoToLogin()
    {
        SubmitPressed = invalidCredentials = successfullLogin = false;
        LoginForm = true;
        EmailForgotPasswordForm = false;
        await Task.Delay(0);
    }

    private async Task GoToEmail()
    {
        SubmitPressed = invalidEmail = validEmail = false;
        EmailForgotPasswordForm = true;
        LoginForm = false;
        await Task.Delay(0);
    }

    private async Task SubmitEmail()
    {

        SubmitPressed = true;
        forgot.Email = Email;
        forgot.Link = "https://xebechumancapital.azurewebsites.net/forgotpassword";

        using (var msg = await HttpClient.PostAsJsonAsync<ForgotPasswordModel>("https://xebecapi.azurewebsites.net/keyForgot", forgot))
        {
            string res = await msg.Content.ReadAsStringAsync();
            if (msg.IsSuccessStatusCode)
            {
                if (res.Contains("true"))
                {
                    validEmail = true;
                    invalidEmail = SubmitPressed = false;
                }

                else
                {
                    invalidEmail = true;
                    validEmail = SubmitPressed = false;
                }
            }
        }

    }

    private async Task GoToSignup()
    {
        navmanager.NavigateTo("applicantsignup");
    }
    // Local storage is not the route to go, since it can be intercepted by attackers.
    // Session storage would be the best cause, however I do not think it allows a browser to be refreshed and stay logged in.
    /*
    How to prevent it from happening:
        Store the token using the browser sessionStorage container.
        Add it as a Bearer HTTP Authentication header with C# when calling services.
        Add fingerprint information to the token.
    */
    // SignInModel contains Email,Password = AuthenticationRequest in vid
    // AuthenticationResponse only contains the Token, but it is equal to SignInResult.Key

    public async Task<SignInResult> AuthenticateJWT()
    {
        // Creating the authentication request
        //SignInModel signInModel = new SignInModel();
        signIn.Email = this.Email;
        signIn.Password = this.Password;

        // authenticating the request
        var httpMessageResponse = await HttpClient.PostAsJsonAsync<SignInModel>($"https://xebecapi.azurewebsites.net/api/auth/loginnew", signIn); // The api will need to be different since it needs to actually validate the Token on the back-end site. This is where Tshego's API endpoint will be entered

        // sending the token to the client to Store
        return await httpMessageResponse.Content.ReadFromJsonAsync<SignInResult>();
    }

    //https://xebecapi.azurewebsites.net/api/user // gets all of the Appusers
    //https://xebecapi.azurewebsites.net/api/user/AllAuth // Give you a list of your details , can use console.writeLine
    //https://xebecapi.azurewebsites.net/api/user/Admins (Only super admin can log in)


    //Get the token from the Website
    // Add the token to the header
    // Make an api request...
    string token = "";
    private async Task JWTLogin()
    {
        //SignInResult signInResult = await AuthenticateJWT();
        thisUser = await AuthenticateJWT();

        if (thisUser.jwtBearer != string.Empty)
        {
            // storing the token to localstorage on the Browser
            await localStorage.SetItemAsync("jwt_token", thisUser.jwtBearer); // The value in " " is just the name that you will give it when it is displayed in the browser under application

            state.AppUserId = thisUser.AppUserId;
            state.Email = thisUser.Email;
            state.Name = thisUser.Name;
            state.Surname = thisUser.Surname;
            state.Role = thisUser.Role;
            state.Avator = thisUser.Avator;

            message = thisUser.Message;

            if (thisUser.Success)
            {


                successfullLogin = true;
                state.isLoggedIn = true;
                SubmitPressed = false;
                navmanager.NavigateTo("/main");

            }
            else if (message.Equals("User/password not found."))
            {
                invalidCredentials = true;
                SubmitPressed = false;
                successfullLogin = false;
            }
            //navmanager.NavigateTo("/main");// this is where you will start to transfer pages.
        }
        else
        {
            // error message
            Console.WriteLine("Key is empty");
            //await localStorage.ClearAsync(); // Use this at log out
        }
    }
    // SignInResults is where you will store the JWT Token

}
}
