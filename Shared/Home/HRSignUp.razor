@inject NavigationManager navmanager
@layout EmptyLayout
@inject HttpClient HttpClient
@using System.Linq;
@using XebecPortal.UI.Shared.Home.Models;

<style>
    .register-page {
        height: 100vh;
        width: 100%;
        display: flex;
    }

    .register-right {
        margin-top: 6vh;
        height: 90vh;
        background-color: white;
        width: 50%;
    }

    .register-left {
        background-image: linear-gradient(rgba(0, 188, 174,0.2),rgba(0, 188, 174,0.2)),url(/Img/pexels3.jpg);
        height: 90vh;
        margin-top: 6vh;
        width: 50%;
        background-size: cover;
        background-position: center;
    }

    .index-form-register input[type="text"], input[type="email"], input[type="password"] {
        background-color: transparent;
        width: 85%;
        height: 7vh;
        line-height: 7vh;
        font-size: 1em;
        border: none;
        font-weight: 800;
        color: black;
        font-family: opensans-condensed-light;
        padding: 1em 1em 1em 1em;
    }
    .register-page select {
        border: solid #00bcae 0.2em;
        background-color: transparent;
        border-radius: 1em;
        width: 70%;
        margin-left: 15%;
        margin-right: 15%;
        height: 7vh;
        line-height: 7vh;
        font-size: 1em;
        font-weight: 800;
        color: black;
        font-family: opensans-condensed-light;
        padding: 1em 1em 1em 1em;
    }
    .register-page option{
        height: 4vh;
        width: 100%;
        border-bottom: solid 0.2em black;
        margin-bottom: 1vh;
    }
    .register-page option:hover {
        height: 4vh;
        width: 100%;
        border-bottom: solid 0.2em black;
        background-color: yellow;
        margin-bottom: 1vh;
    }
    .select-role-words {
        height: 4vh;
        line-height: 4vh;
        color: #666666;
        font-family: opensans-condensed-bold;
        font-size: 1.2em;
        font-weight: 800;
    }
    .selecting-role{
        height: 4vh;
        line-height: 4vh;
        color: black;
        font-family: opensans-condensed-bold;
        font-size: 1em;
        font-weight: 500;
    }
    .selecting-role:hover{
        background-color: #00bcae;
        color: white;
        font-weight: 900;
    }
    .register-page .index-form-icon {
        width: 15%;
        padding-left: 5%;
        text-align: left;
        background-color: transparent;
        color: #00bcae;
        font-size: 1.5em;
        height: 7vh;
        line-height: 7vh;
    }
    
    .register-page input:focus, textarea:focus, select:focus {
        outline: none;
    }

    .register-page::placeholder {
        color: black;
        font-family: opensans-condensed-light;
        font-size: 1em;
        width: 100%;
        font-weight: 900;
    }

    .index-form-socials-register {
        width: 100%;
        height: 8vh;
        margin-bottom: 5vh;
    }
    .index-select-register {
        height: 7vh;
        margin-top: 3vh;
        margin-bottom: 3vh;
        width: 70%;
        margin-left: 15%;
        margin-right: 15%;
    }
    .socials-register-heading {
        width: 100%;
        height: 3vh;
        color: #666666;
        font-family: opensans-condensed-bold;
        font-weight: 900;
        font-size: 1em;
        text-align: center;
    }

    .socials-register-div {
        width: 100%;
        height: 5vh;
        display: flex;
    }

    .social-media-register {
        width: 33%;
        height: 5vh;
        text-align: center;
        color: #00bcae;
        font-size: 2em;
    }

    .index-role {
        height: 10vh;
        width: 100%;
        display: flex;
    }

    .register-role-heading {
        height: 4vh;
        text-align: center;
        font-weight: 900;
        font-size: 1em;
        color: black;
        width: 100%;
        font-family: opensans-condensed-light;
        margin-top: 0;
        padding-bottom: 1vh;
    }

    .register-role-icon {
        height: 7vh;
        width: 100%;
        font-size: 2em;
        color: #00bcae;
        text-align: center;
        margin-top: 0;
        padding-top: 1vh;
    }

    .index-group-register {
        border: solid #00bcae 0.2em;
        background-color: transparent;
        height: 7vh;
        width: 40%;
        margin-left: 5%;
        margin-right: 5%;
        border-radius: 1em;
        display: flex;
    }
    .key-confirmation-form {
        width: 90%;
        margin-left: 5%;
        margin-right: 5%;
        margin-top: 20vh;
        height: auto;
    }
    .key-input-group{
        height: 15vh;
        width: 100%;
        display: flex;
    }
    .key-confirmation-form input[type="text"]{
        height: 15vh;
        width: 100%;
        margin-left: 3%;
        border-radius: 1em;
        border: #00bcae solid 0.2em;
        background-color: transparent;
        text-align: center;
        color: black;
        font-size: 1.8em;
        font-weight: 900;
        font-family: opensans-bold;
    }
    .key-confirmation-form::placeholder {
        height: 15vh;
        text-align: center;
        color: lightgrey;
    }
</style>
<div class="register-page">
    <div class="register-left"></div>
    <div class="register-right">
        <form class="index-form-register" style="margin-top: 10vh;" hidden="@registrationFormIsHidden">
            <div class="form-group index-form-heading">
                <h1 class="index-form-heading-1">REGISTER</h1>
            </div>
            <div class="form-group index-form-group">
                <div class="index-group-register">
                    <div class="index-form-icon">
                        <i class="fas fa-user"></i>
                    </div>
                    <input type="text" placeholder="Name" @bind="@Name" @ref="SignUpElementInFocus">
                </div>
                <div class="index-group-register">
                    <div class="index-form-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <input type="text" placeholder="Surname" @bind="@Surname">
                </div>
            </div>
            <div class="form-group index-form-group">
                <div class="index-group-register">
                    <div class="index-form-icon">
                        <i class="fas fa-at"></i>
                    </div>
                    <input type="email" placeholder="Email address" @bind="@Email1">
                </div>
                <div class="index-group-register">
                    <div class="index-form-icon">
                        <i class="fas fa-at"></i>
                    </div>
                    <input type="email" placeholder="Confirm Email address" @bind="@Email2">
                </div>
            </div>
            <div class="form-group index-form-group">
                <div class="index-group-register">
                    <div class="index-form-icon">
                        <i class="fa fa-lock "></i>
                    </div>
                    <input type="password" placeholder="Password" @bind="@Password1">
                </div>
                <div class="index-group-register">
                    <div class="index-form-icon">
                        <i class="fa fa-lock "></i>
                    </div>
                    <input type="password" placeholder="Confirm password" @bind="@Password2">
                </div>
            </div>
            <div class="form-group index-select-register">
                <select @onchange="OnRoleChanged">
                    <option class="select-role-words">Select Role</option>
                    <option class="selecting-role" value="Collaborator">Collaborator</option>
                    <option class="selecting-role" value="HRAdmin">HR Administrator</option>
                    <option class="selecting-role" value="Super Admin">Super Admin</option>
                </select>
            </div>
            @if (invalidEmail)
            {
                <div class="form-group index-form-or">
                    <h1 class="index-form-heading-3">Emails do not match.</h1>
                </div>
            }
            @if (invalidPassword)
            {
                <div class="form-group index-form-or">
                    <h1 class="index-form-heading-3">Passwords do not match.</h1>
                </div>
            }
            @if (registeredEmail)
            {
                <div class="form-group index-form-or">
                    <h1 class="index-form-heading-3">This email is already registered on the platform.</h1>
                </div>
            }
            @if (invalidRole)
            {
                <div class="form-group index-form-or">
                    <h1 class="index-form-heading-3">Invalid role selection.</h1>
                </div>
            }
            @if (validRegistration)
            {
                <div class="form-group index-form-or">
                    <h1 class="index-form-heading-3">Success! We will send you a key via email to activate your account.</h1>
                </div>
            }
            @if (invalidRegistration)
            {
                <div class="form-group index-form-or">
                    <h1 class="index-form-heading-3">We have failed to register you.</h1>
                </div>
            }
            <div class="form-group login-button-div">
                <input type="button" class="index-form-button" @onclick="Register" value="Submit" />
            </div>
        </form>
        <form class="key-confirmation-form" hidden="@confirmationFormIsHidden">
            <div class="form-group index-form-heading">
                <h1 class="index-form-heading-1">CONFIRMATION</h1>
            </div>
            <div class="form-group key-input-group">
                <input type="text" @bind="@user.UserKey" @ref="KeyReference">
            </div>
            @if (invalidKey)
            {
                <div class="form-group index-form-or">
                    <h1 class="index-form-heading-3">Invalid Key</h1>
                </div>
            }
            @if (validKey)
            {
                <div class="form-group index-form-or">
                    <h1 class="index-form-heading-3">Valid Key. You can sign in.</h1>
                </div>
            }
            
            <input type="button" class="index-form-button" @onclick="ConfirmAccount" value="Submit" />
        </form>
    </div>
</div>

@code{

    private string Name = "";
    private string Surname = "";
    private string Email1 = "";
    private string Email2 = "";
    private string Password1 = "";
    private string Password2 = "";
    private string Email = "";
    private string Password = "";

    private bool invalidEmail;
    private bool invalidPassword;
    private bool validRegistration;
    private bool invalidRegistration;
    private bool registeredEmail;
    private bool invalidRole;
    private bool validKey;
    private bool invalidKey;

    private bool registrationFormIsHidden;
    private bool confirmationFormIsHidden;

    private bool invalidKeyMessageIsHidden;
    private bool SubmitPressed;
    private string message;

    private UserModel user = new UserModel();
    private List<UserModel> users = new List<UserModel>();

    [Parameter]
    public EventCallback<string> ValueChanged
    {
        get;
        set;
    }

    ElementReference SignUpElementInFocus, KeyReference;


    protected override async Task OnInitializedAsync()
    {

        registrationFormIsHidden = false;
        confirmationFormIsHidden = true;

        await Task.Delay(0);
    }

    protected override void OnAfterRender(bool firstRender)
    {

        SignUpElementInFocus.FocusAsync();
        KeyReference.FocusAsync();
        invalidKeyMessageIsHidden = true;

    }

    private Task OnRoleChanged(ChangeEventArgs e)
    {
        user.Role = e.Value.ToString();
        return ValueChanged.InvokeAsync(user.Role);
    }


    private async Task showConfirmationForm()
    {
        confirmationFormIsHidden = false;
        registrationFormIsHidden = true;
        await Task.Delay(0);
    }

    private bool RegisterPasswordCheck()
    {
        if (Password1 != Password2)
        {
            invalidPassword = true;
            return false;
        }
        else
        {
            invalidPassword = false;
            return true;
        }

    }
    private bool RegisterEmailCheck()
    {
        if (Email1 != Email2)
        {
            invalidEmail = true;
            return false;
        }
        else
        {
            invalidEmail = false;
            Email = Email1;
            return true;
        }
    }

    private bool RegisterCheckbox()
    {
        if (user.Role.Equals(null) || user.Role.Equals(""))
        {
            invalidRole = true;
            return false;
        }
        else
        {
            invalidRole = false;
            return true;
        }
    }

    private async Task ConfirmAccount()
    {
        using (var msg = await HttpClient.PostAsJsonAsync<UserModel>("https://xebecapi.azurewebsites.net/keyConfirm", user))
        {
            string keyresult = await msg.Content.ReadAsStringAsync();
            if (msg.IsSuccessStatusCode)
            {
                if (keyresult.Contains("true"))
                {
                    validKey = true;
                    invalidKey = false;
                }
                else
                {
                    validKey = false;
                    invalidKey = true;
                }

            }

        }
    }

    private async Task Register()
    {
        bool passwordIsValid = RegisterPasswordCheck();
        bool emailIsValid = RegisterEmailCheck();
        bool roleIsValid = RegisterCheckbox();

        if (passwordIsValid && emailIsValid && roleIsValid)
        {
            user.Name = Name;
            user.Surname = Surname;
            user.Email = Email;
            user.Password = Password;

            //Post model to dB
            using (var msg = await HttpClient.PostAsJsonAsync<UserModel>("https://xebecapi.azurewebsites.net/api/auth/registernew", user))
            {
                if (msg.IsSuccessStatusCode)
                {
                    SignInResult result = await msg.Content.ReadFromJsonAsync<SignInResult>();
                    user.ID = result.AppUserId;
                    message = result.Message;
                    if (result.Success)
                    {
                        validRegistration = true;
                        invalidRegistration = false;
                        confirmationFormIsHidden = false;
                        registrationFormIsHidden = true;

                    }
                    else if (message.Equals("User already exists."))
                    {
                        registeredEmail = true;
                    }
                    else
                    {
                        invalidRegistration = true;
                        validRegistration = false;
                    }
                }
            }

        }
        else
        {
            validRegistration = false;
            invalidRegistration = true;
        }
    }
}
