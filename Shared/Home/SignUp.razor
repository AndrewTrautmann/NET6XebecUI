@page "/signup"
@inject NavigationManager navmanager
@layout EmptyLayout
@inject HttpClient HttpClient
@using System.Linq;
@using XebecPortal.UI.Shared.Home.Models;

<div class="register-page">
    <div class="register-left"></div>
    <div class="register-right">
        <form class="index-form-register" hidden="@registrationFormIsHidden">
            <div class="form-group index-form-heading">
                <h1 class="index-form-heading-1">REGISTER</h1>
            </div>
            <div class="form-group index-form-group index-group">
                <div class="index-form-icon">
                    <i class="fas fa-user"></i>
                </div>
                <input type="text" placeholder="Name" @bind="@Name">
            </div>
            <div class="form-group index-form-group index-group">
                <div class="index-form-icon">
                    <i class="fas fa-users"></i>
                </div>
                <input type="text" placeholder="Surname" @bind="@Surname">
            </div>
            <div class="form-group index-form-group index-group">
                <div class="index-form-icon">
                    <i class="fas fa-at"></i>
                </div>
                <input type="email" placeholder="Email address" @bind="@Email">
            </div>
            <div class="form-group index-form-group index-group">
                <div class="index-form-icon">
                    <i class="fa fa-lock "></i>
                </div>
                <input type="password" placeholder="Password" @bind="@Password1">
            </div>
            <div class="form-group index-form-group index-group">
                <div class="index-form-icon">
                    <i class="fa fa-lock "></i>
                </div>
                <input type="password" placeholder="Confirm password" @bind="@Password2">
            </div>
            <div class="form-group index-form-or">
                <h1 class="index-form-heading-3">or sign in using</h1>
            </div>
            <div class="form-group index-form-socials">
                <div class="index-socialmedia-div">
                    <i class="fab fa-google"></i>
                </div>
                <div class="index-socialmedia-div">
                    <i class="fab fa-microsoft"></i>
                </div>
                <div class="index-socialmedia-div">
                    <i class="fab fa-facebook"></i>
                </div>
            </div>
            <div class="form-group index-form-group">
                <div class="index-form-checkbox-div">
                    <input type="checkbox" @onclick="@IsApplicant" @bind="@applicant" /><h2 class="index-checkbox-label">Applicant</h2>
                </div>
                <div class="index-form-checkbox-div">
                    <input type="checkbox" @onclick="@IsHR" @bind="@hr" /><h2 class="index-checkbox-label">Human Resources</h2>
                </div>
            </div>

            <div class="form-group index-form-or" hidden="@passwordMessageIsHidden">
                <h1 class="index-form-heading-3">passwords do not match</h1>
            </div>
            <div class="form-group index-form-or" hidden="@existingUserMessageIsHidden">
                <h1 class="index-form-heading-3">this email is already registered on the platform</h1>
            </div>
            <div class="form-group index-form-or" hidden="@selectCheckBoxMessageIsHidden">
                <h1 class="index-form-heading-3">checkbox not selected</h1>
            </div>
            <div class="form-group index-form-or" hidden="@successfulRegistrationMessageIsHidden">
                <h1 class="index-form-heading-3">You have been successfully registered to xebec. Sign In.</h1>
            </div>
            <div class="form-group index-form-or" hidden="@confirmAccountMessageIsHidden">
                <h1 class="index-form-heading-3">we will send you a key and link to activate your account</h1>
            </div>
            <input type="button" class="index-form-button" @onclick="Register" value="Submit" />
        </form>
        <form class="index-form-login" hidden="@confirmationFormIsHidden">
            <div class="form-group index-form-heading">
                <h1 class="index-form-heading-1">CONFIRMATION</h1>
            </div>
            <div class="form-group index-form-group index-group">
                <div class="index-form-icon">
                    <i class="fa fa-key "></i>
                </div>
                <input type="text" placeholder="Key" @bind="@Key">
            </div>
            <div class="form-group index-form-or" hidden="@invalidKeyMessageIsHidden">
                <h1 class="index-form-heading-3">Invalid Key</h1>
            </div>
            <div class="form-group index-form-or" hidden="@successfulRegistrationMessageIsHidden">
                <h1 class="index-form-heading-3">You have been successfully registered to xebec. Sign In.</h1>
            </div>
            <input type="button" class="index-form-button" @onclick="ConfirmAccount" value="Submit" />
        </form>
    </div>
</div>

@code{

    private string Name = "";
    private string Surname = "";
    private string Email = "";
    private string Password1 = "";
    private string Password2 = "";
    private string Role = "";
    private string Password = "";
    private string Key = "";

    private bool existingUserMessageIsHidden;
    private bool passwordMessageIsHidden;
    private bool selectCheckBoxMessageIsHidden;
    private bool successfulRegistrationMessageIsHidden;
    private bool confirmAccountMessageIsHidden;

    private bool registrationFormIsHidden;
    private bool confirmationFormIsHidden;

    private bool invalidKeyMessageIsHidden;

    private bool applicant;
    private bool hr;

    private string message;

    private KeyRequest request = new KeyRequest();

    private UserModel user = new UserModel();
    private List<UserModel> users = new List<UserModel>();

    protected override async Task OnInitializedAsync()
    {
        passwordMessageIsHidden = true;
        existingUserMessageIsHidden = true;
        selectCheckBoxMessageIsHidden = true;
        successfulRegistrationMessageIsHidden = true;
        confirmAccountMessageIsHidden = true;

        registrationFormIsHidden = false;
        confirmationFormIsHidden = true;

        applicant = false;
        hr = false;
        await Task.Delay(0);
    }

    private void IsApplicant()
    {
        hr = false;
        Role = "applicant";
    }

    private void IsHR()
    {
        applicant = false;
        Role = "hr";
    }

    private async Task ConfirmAccount()
    {
        using (var msg = await HttpClient.GetAsync("https://xebecapi.azurewebsites.net/api/auth/keys"))
        {
            KeyRequest keyresult = await msg.Content.ReadFromJsonAsync<KeyRequest>();
            if (msg.IsSuccessStatusCode)
            {

                if (keyresult.Key.Equals(Key))
                {
                    successfulRegistrationMessageIsHidden = false;
                }
                else
                {
                    invalidKeyMessageIsHidden = false;
                }
            }
        }
    }

    private async Task showConfirmationForm()
    {
        confirmationFormIsHidden = false;
        registrationFormIsHidden = true;
        await Task.Delay(0);

    }

    private bool RegisterPasswordCheck()
    {
        if (Password1 != Password2)
        {
            passwordMessageIsHidden = false;
            existingUserMessageIsHidden = true;
            selectCheckBoxMessageIsHidden = true;
            successfulRegistrationMessageIsHidden = true;
            confirmAccountMessageIsHidden = true;
            return false;
        }
        else
        {
            passwordMessageIsHidden = true;
            existingUserMessageIsHidden = true;
            selectCheckBoxMessageIsHidden = true;
            successfulRegistrationMessageIsHidden = true;
            confirmAccountMessageIsHidden = true;
            Password = Password1;
            return true;
        }
    }

    private bool RegisterCheckboxCheck()
    {

        passwordMessageIsHidden = true;
        existingUserMessageIsHidden = true;
        successfulRegistrationMessageIsHidden = true;
        confirmAccountMessageIsHidden = true;

        if (applicant == false && hr == false)
        {
            selectCheckBoxMessageIsHidden = false;
            return false;
        }
        else
        {
            selectCheckBoxMessageIsHidden = true;
            return true;
        }
    }


    private async Task Register()
    {
        bool passwordIsValid = RegisterPasswordCheck();
        bool checkboxIsValid = RegisterCheckboxCheck();

        if (passwordIsValid && checkboxIsValid)
        {
            user.Name = Name;
            user.Surname = Surname;
            user.Email = Email;
            user.Password = Password;

            if (applicant)
            {
                user.Role = "Candidate";
                user.Key = "";

                using (var msg = await HttpClient.PostAsJsonAsync<UserModel>("https://xebecapi.azurewebsites.net/api/auth/registernew", user))
                {
                    if (msg.IsSuccessStatusCode)
                    {
                        SignInResult result = await msg.Content.ReadFromJsonAsync<SignInResult>();
                        message = result.Message;
                        if (result.Success)
                        {
                            successfulRegistrationMessageIsHidden = false;
                        }
                        else if (message.Equals("User already exists."))
                        {
                            existingUserMessageIsHidden = false;
                        }
                        else
                        {
                            Console.WriteLine("Failed to register user.");
                        }
                    }
                }

            }
            else
            {
                user.Role = "HRAdmin";
                user.Key = "";

                //Post model to dB
                using (var msg = await HttpClient.PostAsJsonAsync<UserModel>("https://xebecapi.azurewebsites.net/api/auth/registernew", user))
                {
                    if (msg.IsSuccessStatusCode)
                    {
                        SignInResult result = await msg.Content.ReadFromJsonAsync<SignInResult>();
                        message = result.Message;
                        if (result.Success)
                        {
                            //await showConfirmationForm();
                            //send key via email 

                            successfulRegistrationMessageIsHidden = false;
                            await HttpClient.PostAsJsonAsync<UserModel>("https://xebecapi.azurewebsites.net/api/auth/registernew", user);
                        }
                        else if (message.Equals("User already exists."))
                        {
                            existingUserMessageIsHidden = false;
                        }
                        else
                        {
                            Console.WriteLine("Failed to register user.");
                        }
                    }
                }
            }
        }
    }
}